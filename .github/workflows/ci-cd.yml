name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock flake8 black

    - name: Code formatting check
      run: |
        black --check --diff .

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      env:
        DISCORD_TOKEN: ${{ secrets.TEST_DISCORD_TOKEN }}
      run: |
        pytest tests/ -v --tb=short

    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 202.181.188.48
        username: root
        password: '&bvWF4oy432&'
        script: |
          # Navigate to project directory or create it
          if [ ! -d "/opt/army-discord-bot" ]; then
            echo "Creating project directory..."
            mkdir -p /opt/army-discord-bot
            cd /opt/army-discord-bot
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd /opt/army-discord-bot
          fi
          
          # Stop the bot if running
          screen -S army-bot -X quit || echo "Bot was not running"
          sleep 2
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Update dependencies
          pip3 install -r requirements.txt
          
          # Create logs directory if not exists
          mkdir -p logs
          
          # Start bot in screen session
          screen -dmS army-bot bash -c "cd /opt/army-discord-bot && python3 app.py 2>&1 | tee logs/bot.log"
          
          # Wait a moment and check if bot started successfully
          sleep 5
          if screen -list | grep -q "army-bot"; then
            echo "✅ Bot deployed and started successfully"
          else
            echo "❌ Bot failed to start"
            exit 1
          fi

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USER }}
        password: ${{ secrets.STAGING_SERVER_PASSWORD }}
        script: |
          # Navigate to staging project directory
          cd /opt/army-discord-bot-staging || { echo "Staging directory not found"; exit 1; }
          
          # Stop the staging bot if running
          screen -S army-bot-staging -X quit || echo "Staging bot was not running"
          
          # Pull latest changes from develop branch
          git fetch origin
          git reset --hard origin/develop
          
          # Update dependencies
          pip3 install -r requirements.txt
          
          # Create logs directory if not exists
          mkdir -p logs
          
          # Start staging bot in screen session
          screen -dmS army-bot-staging bash -c "python3 app.py 2>&1 | tee logs/bot-staging.log"
          
          # Wait a moment and check if staging bot started successfully
          sleep 5
          if screen -list | grep -q "army-bot-staging"; then
            echo "✅ Staging bot deployed and started successfully"
          else
            echo "❌ Staging bot failed to start"
            exit 1
          fi
