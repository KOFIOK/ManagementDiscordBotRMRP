import os
import asyncio
import discord
from discord.ext import commands
from dotenv import load_dotenv

from utils.config_manager import load_config
from forms.dismissal_form import DismissalReportButton, send_dismissal_button_message

# Load environment variables from .env file
load_dotenv()

# Initialize bot with intents
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

# Initialize the bot with a command prefix and intents
bot = commands.Bot(command_prefix='!', intents=intents)

@bot.event
async def on_ready():
    print(f'Logged in as {bot.user} (ID: {bot.user.id})')
    print('------')
    
    # Load all extension cogs
    await load_extensions()
    
    # Sync commands with Discord
    try:
        synced = await bot.tree.sync()
        print(f'Synced {len(synced)} command(s)')
    except Exception as e:
        print(f'Failed to sync commands: {e}')

    # Load configuration on startup
    config = load_config()
    print('Configuration loaded successfully')
    print(f'Dismissal channel: {config["dismissal_channel"]}')
    print(f'Audit channel: {config["audit_channel"]}')
    print(f'Blacklist channel: {config["blacklist_channel"]}')
    
    # Create persistent button view
    bot.add_view(DismissalReportButton())
    
    # Check if dismissal channel exists and restore message if needed
    dismissal_channel_id = config.get('dismissal_channel')
    if dismissal_channel_id:
        channel = bot.get_channel(dismissal_channel_id)
        if channel:
            # Check if there's already a message with the button
            has_button_message = False
            try:
                # Try to get recent messages
                async for message in channel.history(limit=10):
                    # Check if message is from the bot and has the expected embed title
                    if message.author == bot.user and message.embeds:
                        for embed in message.embeds:
                            if embed.title and "Рапорты на увольнение" in embed.title:
                                has_button_message = True
                                break
                    if has_button_message:
                        break
                        
                if not has_button_message:
                    print(f"Sending dismissal button message to channel {channel.name}")
                    await send_dismissal_button_message(channel)
            except Exception as e:
                print(f"Error checking for button message: {e}")

async def load_extensions():
    """Load all extension cogs from the cogs directory."""
    for filename in os.listdir('./cogs'):
        if filename.endswith('.py') and not filename.startswith('_'):
            try:
                await bot.load_extension(f'cogs.{filename[:-3]}')
                print(f'Loaded extension: {filename[:-3]}')
            except Exception as e:
                print(f'Failed to load extension {filename[:-3]}: {e}')

# Run the bot
if __name__ == '__main__':
    # Check for token - first from environment, then try to read from .env file
    token = os.environ.get('DISCORD_TOKEN')
    if not token:
        # If we get here, it means dotenv didn't find the token in .env file
        # or the .env file doesn't exist
        print("Warning: DISCORD_TOKEN not found in environment variables or .env file.")
        print("Checking for token.txt as a fallback...")
        
        # Try to read from token.txt if exists
        try:
            with open('token.txt', 'r') as f:
                token = f.read().strip()
                print("Token found in token.txt")
        except FileNotFoundError:
            raise ValueError(
                "No Discord token found. Please either:\n"
                "1. Set the DISCORD_TOKEN environment variable\n"
                "2. Create a .env file with DISCORD_TOKEN=your_token\n"
                "3. Create a token.txt file containing just your token"
            )
    
    try:
        asyncio.run(bot.start(token))
    except Exception as e:
        print(f"Произошла ошибка при запуске бота: {e}")
        input("Нажмите Enter для выхода...")
