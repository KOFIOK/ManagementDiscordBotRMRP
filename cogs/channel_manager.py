import discord
from discord import app_commands
from discord.ext import commands

from forms.settings_form import send_settings_message
from utils.config_manager import load_config, save_config

class ChannelManagementCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ Discord –±–æ—Ç–∞")
    @app_commands.checks.has_permissions(administrator=True)
    async def settings(self, interaction: discord.Interaction):
        """Unified command for bot configuration with interactive interface"""
        await send_settings_message(interaction)

    @app_commands.command(name="addmoder", description="üëÆ –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
    @app_commands.checks.has_permissions(administrator=True)
    async def add_moderator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Add a user or role as moderator"""
        try:
            config = load_config()
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id not in moderators['users']:
                    moderators['users'].append(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id not in moderators['roles']:
                    moderators['roles'].append(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Add moderator error: {e}")

    @app_commands.command(name="removemoder", description="üö´ –£–±—Ä–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def remove_moderator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Remove a user or role from moderators"""
        try:
            config = load_config()
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id in moderators['users']:
                    moderators['users'].remove(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id in moderators['roles']:
                    moderators['roles'].remove(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Remove moderator error: {e}")

    @app_commands.command(name="listmoders", description="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def list_moderators(self, interaction: discord.Interaction):
        """List all moderators and moderator roles"""
        try:
            config = load_config()
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            embed = discord.Embed(
                title="üëÆ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            # Moderator users
            user_list = []
            for user_id in moderators.get('users', []):
                user = interaction.guild.get_member(user_id)
                if user:
                    user_list.append(f"‚Ä¢ {user.mention} ({user.display_name})")
                else:
                    user_list.append(f"‚Ä¢ <@{user_id}> (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            if user_list:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                    value="\n".join(user_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    inline=False
                )
              # Moderator roles
            role_list = []
            for role_id in moderators.get('roles', []):
                role = interaction.guild.get_role(role_id)
                if role:
                    role_list.append(f"‚Ä¢ {role.mention}")
                else:
                    role_list.append(f"‚Ä¢ <@&{role_id}> (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
            if role_list:
                embed.add_field(
                    name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="\n".join(role_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}",
                ephemeral=True
            )
            print(f"List moderators error: {e}")    # Error handling for commands
    async def on_app_command_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        """Handle app command errors"""
        if isinstance(error, app_commands.errors.MissingPermissions):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", 
                ephemeral=True
            )
            print(f"App command error: {error}")

# Setup function for adding the cog to the bot
async def setup(bot):
    await bot.add_cog(ChannelManagementCog(bot))
