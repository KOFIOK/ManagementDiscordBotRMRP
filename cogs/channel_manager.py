import discord
from discord import app_commands
from discord.ext import commands
import datetime

from forms.settings_form import send_settings_message
from utils.config_manager import load_config, save_config
# Enhanced config manager for backup functionality
from utils.config_manager import (
    create_backup, list_backups, restore_from_backup, 
    export_config, get_config_status
)
# –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from utils.moderator_notifications import (
    send_moderator_welcome_dm, send_administrator_welcome_dm,
    check_if_user_is_moderator, check_if_user_is_administrator
)


# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –†–û–õ–ï–ô =====================

async def handle_moderator_assignment(guild: discord.Guild, target: discord.Member | discord.Role, old_config: dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º"""
    users_to_notify = set()
    
    if isinstance(target, discord.Member):
        # –ü—Ä—è–º–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not check_if_user_is_moderator(target, old_config) and not check_if_user_is_administrator(target, old_config):
            users_to_notify.add(target)
    
    elif isinstance(target, discord.Role):
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
        for member in guild.members:
            if target in member.roles:
                if not check_if_user_is_moderator(member, old_config) and not check_if_user_is_administrator(member, old_config):
                    users_to_notify.add(member)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user in users_to_notify:
        dm_sent = await send_moderator_welcome_dm(user)
        
        status = "‚úÖ" if dm_sent else "‚ùå"
        print(f"{status} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {user.display_name}: DM {status}")


async def handle_administrator_assignment(guild: discord.Guild, target: discord.Member | discord.Role, old_config: dict) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    users_to_notify = set()
    
    if isinstance(target, discord.Member):
        # –ü—Ä—è–º–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not check_if_user_is_administrator(target, old_config):
            users_to_notify.add(target)
    
    elif isinstance(target, discord.Role):
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
        for member in guild.members:
            if target in member.roles:
                if not check_if_user_is_administrator(member, old_config):
                    users_to_notify.add(member)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user in users_to_notify:
        dm_sent = await send_administrator_welcome_dm(user)
        
        status = "‚úÖ" if dm_sent else "‚ùå"
        print(f"{status} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user.display_name}: DM {status}")


# ===================== –û–°–ù–û–í–ù–û–ô COG =====================

class ChannelManagementCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ Discord –±–æ—Ç–∞")
    async def settings(self, interaction: discord.Interaction):
        """Unified command for bot configuration with interactive interface"""
        # Check if user has administrator permissions (custom admins or Discord admins)
        from utils.config_manager import is_administrator
        config = load_config()
        
        if not (interaction.user.guild_permissions.administrator or is_administrator(interaction.user, config)):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
                ephemeral=True
            )
            return
            
        await send_settings_message(interaction)

    # Moderator management commands
    moder = app_commands.Group(name="moder", description="üëÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")

    @moder.command(name="add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
    @app_commands.checks.has_permissions(administrator=True)
    async def add_moderator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Add a user or role as moderator"""
        try:
            config = load_config()
            old_config = config.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id not in moderators['users']:
                    moderators['users'].append(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
                    await handle_moderator_assignment(interaction.guild, target, old_config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id not in moderators['roles']:
                    moderators['roles'].append(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
                    await handle_moderator_assignment(interaction.guild, target, old_config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Add moderator error: {e}")

    @moder.command(name="remove", description="‚ûñ –£–±—Ä–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def remove_moderator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Remove a user or role from moderators"""
        try:
            config = load_config()
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id in moderators['users']:
                    moderators['users'].remove(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id in moderators['roles']:
                    moderators['roles'].remove(target.id)
                    config['moderators'] = moderators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Remove moderator error: {e}")

    @moder.command(name="list", description="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def list_moderators(self, interaction: discord.Interaction):
        """List all moderators and moderator roles"""
        try:
            config = load_config()
            moderators = config.get('moderators', {'users': [], 'roles': []})
            
            embed = discord.Embed(
                title="üëÆ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            # Moderator users
            user_list = []
            for user_id in moderators.get('users', []):
                user = interaction.guild.get_member(user_id)
                if user:
                    user_list.append(f"‚Ä¢ {user.mention} ({user.display_name})")
                else:
                    user_list.append(f"‚Ä¢ <@{user_id}> (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            if user_list:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                    value="\n".join(user_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    inline=False
                )
              # Moderator roles
            role_list = []
            for role_id in moderators.get('roles', []):
                role = interaction.guild.get_role(role_id)
                if role:
                    role_list.append(f"‚Ä¢ {role.mention}")
                else:
                    role_list.append(f"‚Ä¢ <@&{role_id}> (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
            if role_list:
                embed.add_field(
                    name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="\n".join(role_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}",
                ephemeral=True
            )
            print(f"List moderators error: {e}")    # Error handling for commands
    async def on_app_command_error(self, interaction: discord.Interaction, error: app_commands.AppCommandError):
        """Handle app command errors"""
        if isinstance(error, app_commands.errors.MissingPermissions):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}", 
                ephemeral=True
            )
            print(f"App command error: {error}")

    @app_commands.command(name="config-backup", description="üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    @app_commands.describe(
        action="–î–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏",
        backup_name="–ò–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)"
    )
    @app_commands.choices(action=[
        app_commands.Choice(name="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", value="create"),
        app_commands.Choice(name="–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π", value="list"),
        app_commands.Choice(name="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", value="restore"),
        app_commands.Choice(name="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", value="status")
    ])
    @app_commands.checks.has_permissions(administrator=True)
    async def config_backup(self, interaction: discord.Interaction, action: str, backup_name: str = None):
        """Manage configuration backups"""
        
        if action == "create":
            backup_path = create_backup("manual")
            if backup_path:
                await interaction.response.send_message(
                    f"‚úÖ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞**\n"
                    f"üìÅ –§–∞–π–ª: `{backup_path}`\n"
                    f"üìÖ –í—Ä–µ–º—è: <t:{int(datetime.datetime.now().timestamp())}:F>",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏**\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ data/backups",
                    ephemeral=True
                )
        
        elif action == "list":
            backups = list_backups()
            if not backups:
                await interaction.response.send_message(
                    "üìÇ **–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –¥–µ–π—Å—Ç–≤–∏–µ–º 'create' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–æ–ø–∏–∏.",
                    ephemeral=True
                )
                return
            
            backup_list = []
            for i, backup in enumerate(backups[:10], 1):  # Show only last 10
                # Extract timestamp from filename
                try:
                    timestamp_part = backup.split('_')[2]  # config_backup_TIMESTAMP_reason.json
                    timestamp = datetime.datetime.strptime(timestamp_part, "%Y%m%d")
                    date_str = timestamp.strftime("%d.%m.%Y")
                except:
                    date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                backup_list.append(f"`{i}.` {backup} ({date_str})")
            
            embed = discord.Embed(
                title="üìÇ –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                description="\n".join(backup_list),
                color=discord.Color.blue()
            )
            embed.add_field(
                name="‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
                value="–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –¥–µ–π—Å—Ç–≤–∏–µ–º 'restore' –∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞",
                inline=False
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        elif action == "restore":
            if not backup_name:
                await interaction.response.send_message(
                    "‚ùå **–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏**\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ 'list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ø–∏–π.",
                    ephemeral=True
                )
                return
            
            if restore_from_backup(backup_name):
                await interaction.response.send_message(
                    f"‚úÖ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞**\n"
                    f"üìÅ –ò–∑ —Ñ–∞–π–ª–∞: `{backup_name}`\n"
                    f"‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    f"‚ùå **–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è**\n"
                    f"–§–∞–π–ª `{backup_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.",
                    ephemeral=True
                )
        
        elif action == "status":
            status = get_config_status()
            
            config_status = "‚úÖ –í–∞–ª–∏–¥–Ω–∞—è" if status['config_valid'] else "‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"
            if not status['config_exists']:
                config_status = "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            embed = discord.Embed(
                title="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                color=discord.Color.green() if status['config_valid'] else discord.Color.red()
            )
            
            embed.add_field(
                name="üìÑ –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                value=f"–°—Ç–∞—Ç—É—Å: {config_status}\n–†–∞–∑–º–µ—Ä: {status['config_size']} –±–∞–π—Ç",
                inline=True
            )
            
            embed.add_field(
                name="üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏",
                value=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {status['backup_count']}\n–ü–æ—Å–ª–µ–¥–Ω—è—è: {status['last_backup'] or '–Ω–µ—Ç'}",
                inline=True
            )
            
            if not status['config_valid']:
                embed.add_field(
                    name="üö® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    value="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ 'restore' –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="config-export", description="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
    @app_commands.describe(filename="–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)")
    @app_commands.checks.has_permissions(administrator=True)
    async def config_export(self, interaction: discord.Interaction, filename: str = None):
        """Export configuration for migration"""
        if not filename:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"config_export_{timestamp}"
        
        export_path = f"data/{filename}.json"
        
        if export_config(export_path):
            await interaction.response.send_message(
                f"‚úÖ **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞**\n"
                f"üìÅ –§–∞–π–ª: `{export_path}`\n"
                f"üí° –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏**\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ data",
                ephemeral=True
            )    # Administrator management command group
    admin = app_commands.Group(name="admin", description="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")

    @admin.command(name="add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    @app_commands.checks.has_permissions(administrator=True)
    async def add_administrator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Add a user or role as administrator"""
        try:
            config = load_config()
            old_config = config.copy()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            administrators = config.get('administrators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id not in administrators['users']:
                    administrators['users'].append(target.id)
                    config['administrators'] = administrators
                    save_config(config)
                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await handle_administrator_assignment(interaction.guild, target, old_config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id not in administrators['roles']:
                    administrators['roles'].append(target.id)
                    config['administrators'] = administrators
                    save_config(config)
                      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å —ç—Ç–æ–π —Ä–æ–ª—å—é
                    await handle_administrator_assignment(interaction.guild, target, old_config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Add administrator error: {e}")

    @admin.command(name="remove", description="‚ûñ –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ä–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)")
    @app_commands.describe(target="–†–æ–ª—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def remove_administrator(self, interaction: discord.Interaction, target: discord.Member | discord.Role):
        """Remove a user or role from administrators"""
        try:
            config = load_config()
            administrators = config.get('administrators', {'users': [], 'roles': []})
            
            if isinstance(target, discord.Member):
                if target.id in administrators['users']:
                    administrators['users'].remove(target.id)
                    config['administrators'] = administrators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        ephemeral=True
                    )
            
            elif isinstance(target, discord.Role):
                if target.id in administrators['roles']:
                    administrators['roles'].remove(target.id)
                    config['administrators'] = administrators
                    save_config(config)
                    
                    await interaction.response.send_message(
                        f"‚úÖ –†–æ–ª—å {target.mention} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ä–æ–ª–µ–π.",
                        ephemeral=True
                    )
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –†–æ–ª—å {target.mention} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π.",
                        ephemeral=True
                    )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}",
                ephemeral=True
            )
            print(f"Remove administrator error: {e}")

    @admin.command(name="list", description="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def list_administrators(self, interaction: discord.Interaction):
        """List all administrators and administrator roles"""
        try:
            config = load_config()
            administrators = config.get('administrators', {'users': [], 'roles': []})
            
            embed = discord.Embed(
                title="üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                color=discord.Color.gold(),
                timestamp=discord.utils.utcnow()
            )
            
            # Administrator users
            user_list = []
            for user_id in administrators.get('users', []):
                user = interaction.guild.get_member(user_id)
                if user:
                    user_list.append(f"‚Ä¢ {user.mention} ({user.display_name})")
                else:
                    user_list.append(f"‚Ä¢ <@{user_id}> (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            if user_list:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                    value="\n".join(user_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                    inline=False
                )
            
            # Administrator roles
            role_list = []
            for role_id in administrators.get('roles', []):
                role = interaction.guild.get_role(role_id)
                if role:
                    role_list.append(f"‚Ä¢ {role.mention}")
                else:
                    role_list.append(f"‚Ä¢ <@&{role_id}> (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
            if role_list:
                embed.add_field(
                    name="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="\n".join(role_list),
                    inline=False
                )
            else:
                embed.add_field(
                    name="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ä–æ–ª–∏",
                    value="–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π",
                    inline=False
                )
            
            embed.add_field(
                name="‚ÑπÔ∏è –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                value=(
                    "‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –õ–Æ–ë–´–• —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ\n"
                    "‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –õ–Æ–ë–´–• –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π\n"
                    "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ /settings\n"
                    "‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
                ),
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}",
                ephemeral=True
            )
            print(f"List administrators error: {e}")

    @app_commands.command(name="send_welcome_message", description="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    async def send_welcome_message(self, interaction: discord.Interaction, user: discord.Member):
        """Send welcome message to a specific user (admin only)"""
        try:
            # Check if user has administrator permissions
            from utils.config_manager import is_administrator
            config = load_config()
            
            if not (is_administrator(interaction.user, config)):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
                    ephemeral=True
                )
                return
            
            # Import welcome system
            from forms.welcome_system import WelcomeSystem
            
            # Send welcome message
            success = await WelcomeSystem.send_welcome_message(user)
            
            if success:
                await interaction.response.send_message(
                    f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}. "
                    f"–í–æ–∑–º–æ–∂–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    ephemeral=True
                )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                ephemeral=True
            )
            print(f"Send welcome message error: {e}")

    @app_commands.command(name="send_moderator_welcome_message", description="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", role_type='–¢–∏–ø: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä" / "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"')
    @app_commands.choices(role_type=[
        app_commands.Choice(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value="moderator"),
        app_commands.Choice(name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", value="administrator")
    ])
    async def send_moderator_welcome_message(self, interaction: discord.Interaction, user: discord.Member, role_type: str):
        """Send moderator/administrator welcome message to a specific user (admin only)"""
        try:
            # Check if user has administrator permissions
            config = load_config()
            from utils.config_manager import is_administrator
            
            if not (is_administrator(interaction.user, config)):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
                    ephemeral=True
                )
                return
            
            # Send the appropriate welcome message based on selected type
            if role_type == "moderator":
                success = await send_moderator_welcome_dm(user)
                role_label = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É"
            elif role_type == "administrator":
                success = await send_administrator_welcome_dm(user)
                role_label = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –í—ã–±–µ—Ä–∏—Ç–µ '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä' –∏–ª–∏ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'.",
                    ephemeral=True
                )
                return
            
            if success:
                await interaction.response.send_message(
                    f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {role_label} {user.mention}",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {role_label} {user.mention}. "
                    f"–í–æ–∑–º–æ–∂–Ω–æ, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    ephemeral=True
                )
        
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                ephemeral=True
            )
            print(f"Send welcome message error: {e}")

# Setup function for adding the cog to the bot
async def setup(bot):
    await bot.add_cog(ChannelManagementCog(bot))
