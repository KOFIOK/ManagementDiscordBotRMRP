"""
Commands for configuring notification schedules
"""
import discord
from discord import app_commands
from discord.ext import commands
from utils.config_manager import load_config, save_config


class NotificationScheduleCommands(commands.Cog):
    """Cog for notification schedule configuration commands"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(
        name="set_notification_time", 
        description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ú–°–ö)"
    )
    @app_commands.describe(
        hour="–ß–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-23)",
        minute="–ú–∏–Ω—É—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-59)"
    )
    async def set_notification_time(
        self, 
        interaction: discord.Interaction, 
        hour: app_commands.Range[int, 0, 23],
        minute: app_commands.Range[int, 0, 59] = 0
    ):
        """Set the daily notification time"""
        
        # Check if user has administrator permissions
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                ephemeral=True
            )
            return
        
        try:
            # Load config and update notification schedule
            config = load_config()
            
            if 'notification_schedule' not in config:
                config['notification_schedule'] = {}
            
            config['notification_schedule']['hour'] = hour
            config['notification_schedule']['minute'] = minute
            
            save_config(config)
            
            # Format time display
            time_str = f"{hour:02d}:{minute:02d}"
            
            embed = discord.Embed(
                title="‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                description=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ **{time_str} –ú–°–ö**",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                value=(
                    "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.\n"
                    "–î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
                ),
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # Log the change
            print(f"üïê –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str} –ú–°–ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user}")
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(
        name="show_notification_schedule", 
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    async def show_notification_schedule(self, interaction: discord.Interaction):
        """Show current notification schedule"""
        
        try:
            config = load_config()
            schedule_config = config.get('notification_schedule', {'hour': 21, 'minute': 0})
            
            hour = schedule_config.get('hour', 21)
            minute = schedule_config.get('minute', 0)
            time_str = f"{hour:02d}:{minute:02d}"
            
            # Count enabled notifications
            promotion_notifications = config.get('promotion_notifications', {})
            enabled_count = sum(1 for dept_config in promotion_notifications.values() 
                              if dept_config.get('enabled', False))
            total_count = len(promotion_notifications)
            
            embed = discord.Embed(
                title="üïê –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                description=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ **{time_str} –ú–°–ö**",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                value=f"–í–∫–ª—é—á–µ–Ω–æ: **{enabled_count}** –∏–∑ **{total_count}** –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
                inline=False
            )
            
            # Show enabled departments
            if enabled_count > 0:
                enabled_depts = []
                dept_names = {
                    'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
                    'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
                    'uvp': '–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)',
                    'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)',
                    'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
                    'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
                }
                
                for dept_code, dept_config in promotion_notifications.items():
                    if dept_config.get('enabled', False):
                        dept_name = dept_names.get(dept_code, dept_code.upper())
                        enabled_depts.append(f"‚Ä¢ {dept_name}")
                
                embed.add_field(
                    name="‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                    value="\n".join(enabled_depts),
                    inline=False
                )
            
            embed.add_field(
                name="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                value=(
                    "‚Ä¢ `/set_notification_time` - –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è\n"
                    "‚Ä¢ `/settings` ‚Üí –ö–∞–Ω–∞–ª—ã ‚Üí –û—Ç—á—ë—Ç—ã –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                ),
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(
        name="test_notification", 
        description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"
    )
    @app_commands.describe(
        department="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    @app_commands.choices(department=[
        app_commands.Choice(name="–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)", value="va"),
        app_commands.Choice(name="–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)", value="vk"),
        app_commands.Choice(name="–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)", value="uvp"),
        app_commands.Choice(name="–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)", value="sso"),
        app_commands.Choice(name="–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)", value="mr"),
        app_commands.Choice(name="–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)", value="roio"),
    ])
    async def test_notification(
        self, 
        interaction: discord.Interaction, 
        department: str
    ):
        """Send a test notification immediately"""
        
        # Check if user has administrator permissions
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                ephemeral=True
            )
            return
        
        try:
            import os
            
            config = load_config()
            promotion_notifications = config.get('promotion_notifications', {})
            promotion_channels = config.get('promotion_report_channels', {})
            
            # Check if department has notification configured
            notification_config = promotion_notifications.get(department, {})
            if not notification_config.get('enabled', False):
                await interaction.response.send_message(
                    f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {department.upper()} –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.",
                    ephemeral=True
                )
                return
            
            # Check if channel exists
            channel_id = promotion_channels.get(department)
            if not channel_id:
                await interaction.response.send_message(
                    f"‚ùå –ö–∞–Ω–∞–ª –¥–ª—è {department.upper()} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.",
                    ephemeral=True
                )
                return
            
            channel = interaction.guild.get_channel(channel_id)
            if not channel:
                await interaction.response.send_message(
                    f"‚ùå –ö–∞–Ω–∞–ª –¥–ª—è {department.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral=True
                )
                return
            
            # Get notification content
            text = notification_config.get('text')
            image_filename = notification_config.get('image')
            
            if not text and not image_filename:
                await interaction.response.send_message(
                    f"‚ùå –î–ª—è {department.upper()} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ —Ç–µ–∫—Å—Ç, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                    ephemeral=True
                )
                return
            
            # Send notification exactly as configured
            file = None
            
            # Prepare image file if specified
            if image_filename:
                image_path = os.path.join('files', 'reports', image_filename)
                if os.path.exists(image_path):
                    file = discord.File(image_path, filename=image_filename)
                else:
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{image_filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {department.upper()}.",
                        ephemeral=True
                    )
                    return
            
            # Send message based on what admin configured
            if text and file:
                # Both text and image
                await channel.send(content=text, file=file)
            elif text:
                # Only text
                await channel.send(content=text)
            elif file:
                # Only image
                await channel.send(file=file)
            
            dept_names = {
                'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
                'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
                'uvp': '–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)',
                'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)',
                'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
                'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
            }
            
            dept_name = dept_names.get(department, department.upper())
            
            await interaction.response.send_message(
                f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {dept_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel.mention}",
                ephemeral=True
            )
            
            print(f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {department} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user}")
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}",
                ephemeral=True
            )


async def setup(bot):
    """Setup function for the cog"""
    await bot.add_cog(NotificationScheduleCommands(bot))
