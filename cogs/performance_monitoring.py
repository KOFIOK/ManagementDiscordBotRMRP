"""
Comprehensive performance monitoring command for PostgreSQL migration

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
—Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ connection pooling.
"""

import discord
from discord.ext import commands
from discord import app_commands
import time
from utils.user_cache import get_cache_statistics, get_cached_user_info
from utils.database_manager import personnel_manager

class PerformanceMonitoringCog(commands.Cog):
    """Cog for monitoring PostgreSQL migration performance"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="perf-test", description="üß™ –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    async def performance_test(self, interaction: discord.Interaction):
        """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.", 
                ephemeral=True
            )
            return
        
        await interaction.response.defer(ephemeral=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ personnel —Ç–∞–±–ª–∏—Ü—ã
            all_users_raw = await personnel_manager.get_all_personnel()
            all_users = [{'discord_id': user.get('discord_id')} for user in all_users_raw if user.get('discord_id')]
        except Exception as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return
        if not all_users:
            await interaction.followup.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        
        test_users = all_users[:20]  # –ü–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
        
        embed = discord.Embed(
            title="üß™ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL —Å–∏—Å—Ç–µ–º—ã",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # –¢–µ—Å—Ç 1: –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ PostgreSQL
        print(f"üß™ PERFORMANCE TEST: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        start_time = time.time()
        direct_successes = 0
        for user in test_users:
            try:
                user_info = personnel_manager.get_personnel_by_discord_id(user['discord_id'])
                if user_info:
                    direct_successes += 1
            except Exception:
                pass
        direct_time = time.time() - start_time
        
        # –¢–µ—Å—Ç 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        start_time = time.time()
        cache_successes = 0
        for user in test_users:
            try:
                user_info = await get_cached_user_info(user['discord_id'])
                if user_info:
                    cache_successes += 1
            except Exception:
                pass
        cache_time = time.time() - start_time
        
        # –¢–µ—Å—Ç 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫—ç—à–µ)
        start_time = time.time()
        cache_hit_successes = 0
        for user in test_users:
            try:
                user_info = await get_cached_user_info(user['discord_id'])
                if user_info:
                    cache_hit_successes += 1
            except Exception:
                pass
        cache_hit_time = time.time() - start_time
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        speedup_first = direct_time / cache_time if cache_time > 0 else 0
        speedup_cached = direct_time / cache_hit_time if cache_hit_time > 0 else 0
        
        embed.add_field(
            name="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞",
            value=f"""
**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(test_users)}
            
**üîó –ü—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã PostgreSQL:**
‚Ä¢ –í—Ä–µ–º—è: {direct_time:.3f}s
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {direct_successes}/{len(test_users)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(direct_time/len(test_users)*1000):.1f}ms

**üîÑ –ü–µ—Ä–≤—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Ä–µ–º—è: {cache_time:.3f}s  
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {cache_successes}/{len(test_users)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(cache_time/len(test_users)*1000):.1f}ms
‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup_first:.1f}x

**‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ –í—Ä–µ–º—è: {cache_hit_time:.3f}s
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {cache_hit_successes}/{len(test_users)}  
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(cache_hit_time/len(test_users)*1000):.1f}ms
‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup_cached:.0f}x
            """.strip(),
            inline=False
        )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if direct_time > 2.0:
            recommendations.append("‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ë–î")
        if speedup_cached < 50:
            recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        if cache_hit_successes < len(test_users):
            recommendations.append("‚ö†Ô∏è –ù–µ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫—ç—à")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ!")
        
        embed.add_field(
            name="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            value="\n".join(recommendations),
            inline=False
        )
        
        embed.set_footer(text=f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {direct_time + cache_time + cache_hit_time:.2f}s")
        
        await interaction.followup.send(embed=embed)
    

async def setup(bot):
    """–î–æ–±–∞–≤–∏—Ç—å cog –∫ –±–æ—Ç—É"""
    await bot.add_cog(PerformanceMonitoringCog(bot))