"""
Personnel management commands for Discord bot
Includes audit, blacklist, and promotion commands
"""

import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime, timezone, timedelta
from utils.config_manager import load_config, is_moderator_or_admin
from utils.google_sheets import sheets_manager
import asyncio
import re
from discord import ui


class PersonnelCommands(commands.Cog):
    """Commands for personnel management"""
    
    def __init__(self, bot):
        self.bot = bot
        self._cached_settings = {}
        self._last_cache_update = None
        self._cache_loading = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self._cache_duration = 1800  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—ç—à –¥–æ 10 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ cog'–∞
        self.bot.loop.create_task(self._preload_settings_cache())
    
    async def _preload_settings_cache(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            print("üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
            await self._get_settings_data()
            print("‚úÖ –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
    
    async def _get_settings_data(self):
        """Get settings data from Google Sheets with enhanced caching"""
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–æ 10 –º–∏–Ω—É—Ç
            if (self._last_cache_update and 
                (current_time - self._last_cache_update).seconds < self._cache_duration and
                self._cached_settings):
                return self._cached_settings
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            if self._cache_loading:
                # –ï—Å–ª–∏ –∫—ç—à –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
                for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 0.1 —Å–µ–∫—É–Ω–¥—ã = 3 —Å–µ–∫—É–Ω–¥—ã
                    if not self._cache_loading:
                        break
                    await asyncio.sleep(0.1)
                
                # –ï—Å–ª–∏ –∫—ç—à –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—É—Å—Ç—ã–µ
                return self._cached_settings if self._cached_settings else self._get_fallback_settings()
            
            self._cache_loading = True
            
            try:
                if not sheets_manager._ensure_connection():
                    return self._get_fallback_settings()
                
                # Get Settings worksheet
                settings_worksheet = None
                for worksheet in sheets_manager.spreadsheet.worksheets():
                    if worksheet.title == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                        settings_worksheet = worksheet
                        break
                
                if not settings_worksheet:
                    print("Settings worksheet not found")
                    return self._get_fallback_settings()
                
                # Get all data from Settings sheet
                all_values = settings_worksheet.get_all_values()
                if not all_values:
                    return self._get_fallback_settings()
                
                # Parse data into columns
                settings_data = {
                    'actions': [],
                    'departments': [],
                    'positions': [],
                    'ranks': []
                }
                for row in all_values:  # Process all rows (no header)
                    if len(row) >= 4:
                        if row[0].strip():  # Column A - Actions
                            settings_data['actions'].append(row[0].strip())
                        if row[1].strip():  # Column B - Departments
                            settings_data['departments'].append(row[1].strip())
                        if row[2].strip():  # Column C - Positions
                            settings_data['positions'].append(row[2].strip())
                        if row[3].strip():  # Column D - Ranks
                            settings_data['ranks'].append(row[3].strip())
                
                # Remove duplicates while preserving order
                for key in settings_data:
                    settings_data[key] = list(dict.fromkeys(settings_data[key]))
                
                self._cached_settings = settings_data
                self._last_cache_update = current_time
                
                print(f"üîÑ –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {len(settings_data['actions'])} –¥–µ–π—Å—Ç–≤–∏–π, "
                      f"{len(settings_data['departments'])} –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π, "
                      f"{len(settings_data['positions'])} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π, "
                      f"{len(settings_data['ranks'])} –∑–≤–∞–Ω–∏–π")
                
                return settings_data
                
            finally:
                self._cache_loading = False
                
        except Exception as e:
            print(f"Error getting settings data: {e}")
            self._cache_loading = False
            return self._get_fallback_settings()
    
    def _get_fallback_settings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'actions': [
                '–ü—Ä–∏–Ω—è—Ç –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
                '–ü–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 
                '–ü–æ–≤—ã—à–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏',
                '–ü–æ–Ω–∏–∂–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏',
                '–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
                '–°–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
                '–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã',
                '–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É'
            ],
            'departments': [
                '–£–í–ü', '–°–°–û', '–†–û–∏–û', '–ú–†', '–í–î–í', '–í–í–°', '–í–ú–§'
            ],
            'positions': [
                '–°—Ç—Ä–µ–ª–æ–∫', '–°–Ω–∞–π–ø–µ—Ä', '–ü—É–ª–µ–º–µ—Ç—á–∏–∫', '–ì—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—á–∏–∫',
                '–ö–æ–º–∞–Ω–¥–∏—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –≤–∑–≤–æ–¥–∞',
                '–ö–æ–º–∞–Ω–¥–∏—Ä –≤–∑–≤–æ–¥–∞', '–ö–æ–º–∞–Ω–¥–∏—Ä —Ä–æ—Ç—ã'
            ],
            'ranks': [
                '–†—è–¥–æ–≤–æ–π', '–ï—Ñ—Ä–µ–π—Ç–æ—Ä', '–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–°–µ—Ä–∂–∞–Ω—Ç',
                '–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–°—Ç–∞—Ä—à–∏–Ω–∞', '–ü—Ä–∞–ø–æ—Ä—â–∏–∫', '–°—Ç–∞—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä—â–∏–∫',
                '–ú–ª–∞–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–ö–∞–ø–∏—Ç–∞–Ω'
            ]
        }
    
    async def _get_moderator_signed_name(self, discord_id: int):
        """Get moderator's signed name from '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet"""
        try:
            if not sheets_manager._ensure_connection():
                return None
            
            # Get the signed name using existing method
            signed_name = await sheets_manager.get_user_info_by_discord_id(discord_id)
            return signed_name
            
        except Exception as e:
            print(f"Error getting moderator signed name: {e}")
            return None
    async def _get_personnel_data(self, discord_id: int):
        """Get personnel data from '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet"""
        try:
            if not sheets_manager._ensure_connection():
                return {}
            
            # Get Personnel worksheet
            personnel_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤":
                    personnel_worksheet = worksheet
                    break
            
            if not personnel_worksheet:
                print("Personnel worksheet not found")
                return {}
            
            # Get all data
            all_values = personnel_worksheet.get_all_values()
            if len(all_values) < 2:
                return {}
            
            # Find user by Discord ID (column G, index 6)
            for row in all_values[1:]:  # Skip header
                if len(row) >= 7 and row[6].strip() == str(discord_id):
                    return {
                        'name': row[0].strip(),  # A
                        'surname': row[1].strip(),  # B
                        'static': row[2].strip(),  # C
                        'rank': row[3].strip(),  # D
                        'department': row[4].strip(),  # E
                        'position': row[5].strip(),  # F
                        'full_name': f"{row[0].strip()} {row[1].strip()}".strip()
                    }
            
            return {}
            
        except Exception as e:
            print(f"Error getting personnel data: {e}")
            return {}
    
    async def _add_to_audit_sheet(self, audit_data):
        """Add record to '–û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π' sheet at the top"""
        try:
            if not sheets_manager._ensure_connection():
                return False
            
            # Get audit worksheet
            audit_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π":
                    audit_worksheet = worksheet
                    break
            
            if not audit_worksheet:
                print("Audit worksheet not found")
                return False
            
            # Prepare row data (A-L) with Moscow timezone
            moscow_tz = timezone(timedelta(hours=3))
            current_time = datetime.now(moscow_tz)
            
            # Format static for column B (Name | Static)
            static_formatted = audit_data.get('static', '').replace('-', '')
            if len(static_formatted) == 5:
                static_formatted = f"{static_formatted[:2]}-{static_formatted[2:]}"
            elif len(static_formatted) == 6:
                static_formatted = f"{static_formatted[:3]}-{static_formatted[3:]}"
            
            name_with_static = f"{audit_data.get('full_name', '')} | {static_formatted}".strip(' |')
            
            row_data = [
                current_time.strftime("%d.%m.%Y %H:%M:%S"),  # A: Timestamp
                name_with_static,  # B: Name | Static
                audit_data.get('full_name', ''),  # C: Full Name
                audit_data.get('static', ''),  # D: Static
                audit_data.get('action', ''),  # E: Action
                current_time.strftime("%d.%m.%Y"),  # F: Action Date
                audit_data.get('department', ''),  # G: Department
                audit_data.get('position', ''),  # H: Position
                audit_data.get('rank', ''),  # I: Rank
                str(audit_data.get('discord_id', '')),  # J: Discord ID
                audit_data.get('reason', ''),  # K: Dismissal Reason
                audit_data.get('moderator_signed_name', '')  # L: Who wrote audit
            ]
            
            # Insert at row 2 (after header)
            audit_worksheet.insert_row(row_data, 2)
            
            return True
            
        except Exception as e:
            print(f"Error adding to audit sheet: {e}")
            return False
    
    @app_commands.command(name="–∞—É–¥–∏—Ç", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç")
    @app_commands.describe(
        —Å–æ—Ç—Ä—É–¥–Ω–∏–∫="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        –¥–µ–π—Å—Ç–≤–∏–µ="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        –¥–æ–ª–∂–Ω–æ—Å—Ç—å="–î–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", 
        –∑–≤–∞–Ω–∏–µ="–ó–≤–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ (–¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è/–ø—Ä–∏–µ–º–∞ –Ω–∞ —Å–ª—É–∂–±—É)"
    )
    async def audit_command(
        self,
        interaction: discord.Interaction,
        —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: discord.Member,
        –¥–µ–π—Å—Ç–≤–∏–µ: str,
        –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: str = None,
        –¥–æ–ª–∂–Ω–æ—Å—Ç—å: str = None,
        –∑–≤–∞–Ω–∏–µ: str = None,
        –ø—Ä–∏—á–∏–Ω–∞: str = None
    ):
        """Add personnel audit record"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Defer response as this might take time
        await interaction.response.defer(ephemeral=True)
        
        try:
            # Special validation for dismissal - no optional fields required
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                # For dismissal, only reason is required, other fields are optional
                if not –ø—Ä–∏—á–∏–Ω–∞:
                    embed = discord.Embed(
                        title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                        description="–î–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.",
                        color=discord.Color.red()
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return
            elif –¥–µ–π—Å—Ç–≤–∏–µ == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É":
                # For recruitment, reason is required
                if not –ø—Ä–∏—á–∏–Ω–∞:
                    embed = discord.Embed(
                        title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è",
                        description="–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ —Å–ª—É–∂–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.",
                        color=discord.Color.red()
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return
            else:
                # For other actions, validate that at least one optional field is provided
                if not any([–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∑–≤–∞–Ω–∏–µ]):
                    embed = discord.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                        description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∑–≤–∞–Ω–∏–µ.",
                        color=discord.Color.red()
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return
              # Get moderator's signed name
            moderator_signed_name = await self._get_moderator_signed_name(interaction.user.id)
            if not moderator_signed_name:
                moderator_signed_name = f"{interaction.user.display_name}"
            
            # Get personnel data for validation
            personnel_data = await self._get_personnel_data(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id)
            
            # Check if user exists in personnel sheet
            if not personnel_data or not personnel_data.get('full_name'):
                # Special case for "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É" - show form for new employee data
                if –¥–µ–π—Å—Ç–≤–∏–µ == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É":
                    embed = discord.Embed(
                        title="üìù –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫",
                        description=f"–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} –Ω–∞ —Å–ª—É–∂–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                        color=discord.Color.blue()
                    )
                    embed.add_field(
                        name="üìã –¢—Ä–µ–±—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:",
                        value="‚Ä¢ –ò–º—è\n‚Ä¢ –§–∞–º–∏–ª–∏—è\n‚Ä¢ –°—Ç–∞—Ç–∏–∫",
                        inline=False
                    )
                    embed.add_field(
                        name="‚öôÔ∏è –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
                        value=f"‚Ä¢ –ó–≤–∞–Ω–∏–µ: {–∑–≤–∞–Ω–∏–µ or '–†—è–¥–æ–≤–æ–π'}\n‚Ä¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ or '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è - –í–ê'}\n‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {–¥–æ–ª–∂–Ω–æ—Å—Ç—å or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                        inline=False
                    )
                    
                    view = NewEmployeeDataInputView(
                        audit_data={
                            'discord_id': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id,
                            'user_mention': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention,
                            'action': –¥–µ–π—Å—Ç–≤–∏–µ,
                            'department': –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ or '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è - –í–ê',
                            'position': –¥–æ–ª–∂–Ω–æ—Å—Ç—å or '',
                            'rank': –∑–≤–∞–Ω–∏–µ or '–†—è–¥–æ–≤–æ–π',
                            'reason': –ø—Ä–∏—á–∏–Ω–∞ or '',
                            'moderator_signed_name': moderator_signed_name
                        },
                        interaction=interaction,
                        config=config
                    )
                    message = await interaction.followup.send(embed=embed, view=view, ephemeral=True)
                    view.message = message
                    return
                
                # For dismissal and other actions, show error if user not found
                embed = discord.Embed(
                    title="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ \"–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤\".",
                    color=discord.Color.red()
                )
                
                if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                    embed.add_field(
                        name="üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:",
                        value="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ \"–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤\" –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è.\n"
                              "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="üìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:",
                        value="1. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É \"–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤\"\n"
                              "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –ò–º—è, –§–∞–º–∏–ª–∏—è, Discord ID\n"
                              "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∞—É–¥–∏—Ç–∞",
                        inline=False
                    )
                    embed.add_field(
                        name="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:",
                        value="–î–æ–±–∞–≤–ª—è—Ç—å –Ω—É–∂–Ω–æ —á–µ—Ä–µ–∑ –ª–∏—Å—Ç '–î–û–ë–ê–í–ò–¢–¨ –ö–∞–¥—Ä–æ–≤—ã–π'. –û—Ç–ø–∏—à–∏—Ç–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ –∏ —Å–µ–π—á–∞—Å —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–¥–µ–ª–∞—Ç—å.",
                        inline=False
                    )
                
                await interaction.followup.send(embed=embed, ephemeral=True)
                return
            
            # Prepare audit data with autofill from personnel sheet
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                # For dismissal, use only data from personnel sheet and reason
                audit_data = {
                    'discord_id': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id,
                    'user_mention': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention,
                    'full_name': personnel_data.get('full_name', f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name}"),
                    'static': personnel_data.get('static', ''),
                    'action': –¥–µ–π—Å—Ç–≤–∏–µ,
                    'department': personnel_data.get('department', ''),
                    'position': personnel_data.get('position', ''),
                    'rank': personnel_data.get('rank', ''),
                    'reason': –ø—Ä–∏—á–∏–Ω–∞ or '',
                    'moderator_signed_name': moderator_signed_name
                }
            else:
                # For other actions, allow override of personnel data with command parameters
                audit_data = {
                    'discord_id': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id,
                    'user_mention': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention,
                    'full_name': personnel_data.get('full_name', f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name}"),
                    'static': personnel_data.get('static', ''),
                    'action': –¥–µ–π—Å—Ç–≤–∏–µ,
                    'department': –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ or personnel_data.get('department', ''),
                    'position': –¥–æ–ª–∂–Ω–æ—Å—Ç—å or personnel_data.get('position', ''),
                    'rank': –∑–≤–∞–Ω–∏–µ or personnel_data.get('rank', ''),
                    'reason': –ø—Ä–∏—á–∏–Ω–∞ or '',
                    'moderator_signed_name': moderator_signed_name
                }
            
            # Add to Google Sheets
            sheets_success = await self._add_to_audit_sheet(audit_data)
            
            # Handle personnel sheet updates based on action
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                # Remove user from personnel sheet
                personnel_update_result = await self._remove_from_personnel_sheet(audit_data)
                personnel_update_success = bool(personnel_update_result)
            else:
                # Update personnel sheet with new data
                personnel_update_result = await self._update_personnel_sheet(audit_data)
                personnel_update_success = bool(personnel_update_result)
            
            # Send to audit channel
            audit_channel_id = config.get('audit_channel')
            channel_success = False
            
            if audit_channel_id:
                audit_channel = interaction.guild.get_channel(audit_channel_id)
                if audit_channel:
                    # Create audit embed in standard format
                    moscow_tz = timezone(timedelta(hours=3))
                    current_time = datetime.now(moscow_tz)
                    action_date = current_time.strftime('%d-%m-%Y')
                    
                    # Format name with static for display
                    static_formatted = audit_data['static'].replace('-', '') if audit_data['static'] else ''
                    if len(static_formatted) == 5:
                        static_formatted = f"{static_formatted[:2]}-{static_formatted[2:]}"
                    elif len(static_formatted) == 6:
                        static_formatted = f"{static_formatted[:3]}-{static_formatted[3:]}"
                    
                    name_with_static = f"{audit_data['full_name']} | {static_formatted}".strip(' |')
                    
                    embed = discord.Embed(
                        title="–ö–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç –í–° –†–§",
                        color=0x055000,  # Green color as in existing templates
                        timestamp=discord.utils.utcnow()
                    )
                    
                    embed.add_field(name="–ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª", value=moderator_signed_name, inline=False)
                    embed.add_field(name="–ò–º—è –§–∞–º–∏–ª–∏—è | 6 —Ü–∏—Ñ—Ä —Å—Ç–∞—Ç–∏–∫–∞", value=name_with_static, inline=False)
                    embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value=–¥–µ–π—Å—Ç–≤–∏–µ, inline=False)
                    
                    # Add reason field only if reason exists
                    if –ø—Ä–∏—á–∏–Ω–∞:
                        if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è", value=–ø—Ä–∏—á–∏–Ω–∞, inline=False)
                        elif –¥–µ–π—Å—Ç–≤–∏–µ == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É":
                            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", value=–ø—Ä–∏—á–∏–Ω–∞, inline=False)
                        else:
                            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=–ø—Ä–∏—á–∏–Ω–∞, inline=False)
                    
                    embed.add_field(name="–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è", value=action_date, inline=False)
                    embed.add_field(name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", value=audit_data['department'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=False)
                    if audit_data['position']:
                        embed.add_field(name="–î–æ–ª–∂–Ω–æ—Å—Ç—å", value=audit_data['position'], inline=False)
                    embed.add_field(name="–í–æ–∏–Ω—Å–∫–æ–µ –∑–≤–∞–Ω–∏–µ", value=audit_data['rank'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=False)
                    
                    embed.set_thumbnail(url="https://i.imgur.com/07MRSyl.png")
                    
                    await audit_channel.send(content=f"<@{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id}>", embed=embed)
                    channel_success = True
            
            # Send confirmation
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                embed = discord.Embed(
                    title="‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–æ–ª–µ–Ω",
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="‚úÖ –ö–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
                    color=discord.Color.green()
                )
            
            status_parts = []
            if sheets_success:
                status_parts.append("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É")
            else:
                status_parts.append("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
                
            if personnel_update_success:
                if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                    status_parts.append("‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ –õ–∏—á–Ω–æ–≥–æ –°–æ—Å—Ç–∞–≤–∞")
                else:
                    status_parts.append("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤")
            else:
                if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã":
                    status_parts.append("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –õ–∏—á–Ω–æ–≥–æ –°–æ—Å—Ç–∞–≤–∞")
                else:
                    status_parts.append("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –õ–∏—á–Ω–æ–≥–æ –°–æ—Å—Ç–∞–≤–∞")
                
            if channel_success:
                status_parts.append("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞")
            else:
                status_parts.append("‚ùå –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            embed.description = "\n".join(status_parts)
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in audit command: {e}")
            embed = discord.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
    
    # Autocomplete functions
    @audit_command.autocomplete('–¥–µ–π—Å—Ç–≤–∏–µ')
    async def action_autocomplete(self, interaction: discord.Interaction, current: str):
        settings = await self._get_settings_data()
        actions = settings.get('actions', [])
        
        # Filter actions based on current input
        filtered = [action for action in actions if current.lower() in action.lower()]
        return [app_commands.Choice(name=action, value=action) for action in filtered[:25]]
    
    @audit_command.autocomplete('–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
    async def department_autocomplete(self, interaction: discord.Interaction, current: str):
        settings = await self._get_settings_data()
        departments = settings.get('departments', [])
        
        filtered = [dept for dept in departments if current.lower() in dept.lower()]
        return [app_commands.Choice(name=dept, value=dept) for dept in filtered[:25]]
    
    @audit_command.autocomplete('–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
    async def position_autocomplete(self, interaction: discord.Interaction, current: str):
        settings = await self._get_settings_data()
        positions = settings.get('positions', [])
        
        filtered = [pos for pos in positions if current.lower() in pos.lower()]
        return [app_commands.Choice(name=pos, value=pos) for pos in filtered[:25]]
    
    @audit_command.autocomplete('–∑–≤–∞–Ω–∏–µ')
    async def rank_autocomplete(self, interaction: discord.Interaction, current: str):
        settings = await self._get_settings_data()
        ranks = settings.get('ranks', [])
        
        filtered = [rank for rank in ranks if current.lower() in rank.lower()]
        return [app_commands.Choice(name=rank, value=rank) for rank in filtered[:25]]
    
    async def _add_to_blacklist_sheet(self, blacklist_data):
        """Add record to '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)' sheet"""
        try:
            if not sheets_manager._ensure_connection():
                return False
            
            # Get blacklist worksheet
            blacklist_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)":
                    blacklist_worksheet = worksheet
                    break
            
            if not blacklist_worksheet:
                print("Blacklist worksheet not found")
                return False
            
            # Prepare row data (A-G) with Moscow timezone
            moscow_tz = timezone(timedelta(hours=3))
            current_time = datetime.now(moscow_tz)
            
            # Calculate enforcement date based on term
            term_days = 14 if blacklist_data.get('term') == "14 –¥–Ω–µ–π" else 30
            enforcement_date = current_time + timedelta(days=term_days)
            
            row_data = [
                blacklist_data.get('term', ''),  # A: –°—Ä–æ–∫
                blacklist_data.get('name_with_static', ''),  # B: –ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫
                blacklist_data.get('reason', ''),  # C: –ü—Ä–∏—á–∏–Ω–∞
                current_time.strftime("%d.%m.%Y"),  # D: –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è
                enforcement_date.strftime("%d.%m.%Y"),  # E: –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è
                blacklist_data.get('moderator_signed_name', ''),  # F: –ö–µ–º –≤–Ω–µ—Å—ë–Ω
                ""  # G: –°–æ–æ–±—â–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–µ)
            ]
            
            # Insert at row 2 (after header)
            blacklist_worksheet.insert_row(row_data, 2)
            
            return True
            
        except Exception as e:
            print(f"Error adding to blacklist sheet: {e}")
            return False

    @app_commands.command(name="—á—Å", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    @app_commands.describe(
        –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è",
        —Å—Ä–æ–∫="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—è",
        –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç)"
    )
    async def blacklist_command(
        self,
        interaction: discord.Interaction,
        –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å: discord.Member,
        —Å—Ä–æ–∫: str,
        –ø—Ä–∏—á–∏–Ω–∞: str,
        –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: str
    ):
        """Add user to blacklist"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Defer response as this might take time
        await interaction.response.defer(ephemeral=True)
        
        try:
            # Get moderator's signed name
            moderator_signed_name = await self._get_moderator_signed_name(interaction.user.id)
            if not moderator_signed_name:
                moderator_signed_name = f"{interaction.user.display_name}"
              # Try to get personnel data for the violator
            personnel_data = await self._get_personnel_data(–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å.id)
            
            if personnel_data and personnel_data.get('full_name') and personnel_data.get('static'):
                # Found personnel data, proceed automatically
                await self._process_blacklist_with_data(
                    interaction, –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å, —Å—Ä–æ–∫, –ø—Ä–∏—á–∏–Ω–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞,
                    personnel_data, moderator_signed_name, config
                )
            else:
                # Personnel data not found, show manual input option
                await self._show_manual_blacklist_input(
                    interaction, –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å, —Å—Ä–æ–∫, –ø—Ä–∏—á–∏–Ω–∞, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞,
                    moderator_signed_name, config
                )
                
        except Exception as e:
            print(f"Error in blacklist command: {e}")
            embed = discord.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
    
    async def _process_blacklist_with_data(self, interaction, violator, term, reason, evidence, personnel_data, moderator_signed_name, config):
        """Process blacklist addition with known personnel data"""
        try:            # Format static
            static_formatted = personnel_data.get('static', '').replace('-', '')
            if len(static_formatted) == 5:
                static_formatted = f"{static_formatted[:2]}-{static_formatted[2:]}"
            elif len(static_formatted) == 6:
                static_formatted = f"{static_formatted[:3]}-{static_formatted[3:]}"
            
            name_with_static = f"{personnel_data['full_name']} | {static_formatted}"
              # Prepare blacklist data
            blacklist_data = {
                'term': term,
                'name_with_static': name_with_static,
                'reason': reason,
                'evidence': evidence,
                'moderator_signed_name': moderator_signed_name,
                'discord_id': violator.id
            }
            
            # Add to Google Sheets
            sheets_success = await self._add_to_blacklist_sheet(blacklist_data)
            
            # Send to blacklist channel
            channel_success = await self._send_blacklist_embed(
                interaction, violator, blacklist_data, config
            )
            
            # Send confirmation
            await self._send_blacklist_confirmation(interaction, sheets_success, channel_success)
            
        except Exception as e:
            print(f"Error processing blacklist with data: {e}")
            raise
    
    async def _show_manual_blacklist_input(self, interaction, violator, term, reason, evidence, moderator_signed_name, config):
        """Show manual input option for missing personnel data"""
        embed = discord.Embed(
            title="üìã –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {violator.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö \"–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤\".\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:",
            color=discord.Color.orange()
        )
        view = BlacklistManualInputView(violator, term, reason, evidence, moderator_signed_name, config)
        message = await interaction.followup.send(embed=embed, view=view, ephemeral=True)
        view.message = message  # Store message reference for later updates
    
    async def _send_blacklist_embed(self, interaction, violator, blacklist_data, config):
        """Send blacklist embed to configured channel"""
        try:
            blacklist_channel_id = config.get('blacklist_channel')
            if not blacklist_channel_id:
                return False
            
            blacklist_channel = interaction.guild.get_channel(blacklist_channel_id)
            if not blacklist_channel:
                return False
            
            # Calculate dates
            moscow_tz = timezone(timedelta(hours=3))
            current_time = datetime.now(moscow_tz)
            term_days = 14 if blacklist_data.get('term') == "14 –¥–Ω–µ–π" else 30
            enforcement_date = current_time + timedelta(days=term_days)
            
            def format_date(date):
                return date.strftime('%d.%m.%Y')
              # Create embed fields in the required format
            fields = [
                {"name": "1. –ö—Ç–æ –≤—ã–¥–∞—ë—Ç", "value": blacklist_data['moderator_signed_name'], "inline": False},
                {"name": "2. –ö–æ–º—É", "value": blacklist_data['name_with_static'], "inline": False},
                {"name": "3. –ü—Ä–∏—á–∏–Ω–∞", "value": blacklist_data['reason'], "inline": False},
                {"name": "4. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "value": format_date(current_time), "inline": True},
                {"name": "5. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "value": format_date(enforcement_date), "inline": True},
                {"name": "6. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "value": blacklist_data['evidence'], "inline": False}
            ]
            
            # Create blacklist embed
            embed = discord.Embed(
                title="üìã –ù–æ–≤–æ–µ –¥–µ–ª–æ",
                color=0xe74c3c,  # Red color as in existing template
                timestamp=discord.utils.utcnow()
            )
            
            # Add fields to embed
            for field in fields:
                embed.add_field(
                    name=field["name"], 
                    value=field["value"], 
                    inline=field["inline"]
                )
            
            # Set thumbnail
            embed.set_thumbnail(url="https://i.imgur.com/07MRSyl.png")
            
            # Send message with role pings
            role_mentions = config.get('blacklist_role_mentions', [])
            content = ""
            if role_mentions:
                mentions = [f"<@&{role_id}>" for role_id in role_mentions]
                content = f"-# {' '.join(mentions)}"
            
            await blacklist_channel.send(content=content, embed=embed)
            return True
            
        except Exception as e:
            print(f"Error sending blacklist embed: {e}")
            return False
    
    async def _send_blacklist_confirmation(self, interaction, sheets_success, channel_success):
        """Send confirmation message"""
        embed = discord.Embed(
            title="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
            color=discord.Color.green()
        )
        
        status_parts = []
        if sheets_success:
            status_parts.append("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É")
        else:
            status_parts.append("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
            
        if channel_success:
            status_parts.append("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        else:
            status_parts.append("‚ùå –ö–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        embed.description = "\n".join(status_parts)
        
        await interaction.followup.send(embed=embed, ephemeral=True)
    
    # Autocomplete for blacklist term
    @blacklist_command.autocomplete('—Å—Ä–æ–∫')
    async def term_autocomplete(self, interaction: discord.Interaction, current: str):
        terms = ["14 –¥–Ω–µ–π", "30 –¥–Ω–µ–π"]
        filtered = [term for term in terms if current.lower() in term.lower()]
        return [app_commands.Choice(name=term, value=term) for term in filtered]

    async def _update_personnel_sheet(self, audit_data):
        """Update user record in '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet with audit data"""
        try:
            if not sheets_manager._ensure_connection():
                print("Warning: Could not connect to Google Sheets for personnel update")
                return False
            
            # Get Personnel worksheet
            personnel_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤":
                    personnel_worksheet = worksheet
                    break
            
            if not personnel_worksheet:
                print("Warning: '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' worksheet not found")
                return False
            
            discord_id = str(audit_data.get('discord_id', ''))
            if not discord_id:
                print("Warning: No Discord ID provided for personnel update")
                return False
            
            # Get all data to find the user row
            all_values = personnel_worksheet.get_all_values()
            if len(all_values) < 2:
                print("Warning: '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet appears to be empty")
                return False
            
            user_row_index = None
            
            # Find user by Discord ID (column G, index 6)
            for i, row in enumerate(all_values[1:], start=2):  # Skip header, start from row 2
                if len(row) >= 7 and row[6].strip() == discord_id:
                    user_row_index = i
                    break
            
            if user_row_index is None:
                # User not found in sheet - this should not happen since we check beforehand
                print(f"Warning: User {discord_id} not found in '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' but passed initial check")
                return False
            
            # User found - update relevant fields
            updates_made = False
            
            # Parse full name into first and last name if provided
            full_name = audit_data.get('full_name', '').strip()
            if full_name:
                name_parts = full_name.split()
                if len(name_parts) >= 2:
                    first_name = name_parts[0]
                    last_name = " ".join(name_parts[1:])
                    
                    # Update first name (column A)
                    current_first_name = all_values[user_row_index - 1][0] if len(all_values[user_row_index - 1]) > 0 else ""
                    if first_name and current_first_name != first_name:
                        personnel_worksheet.update_cell(user_row_index, 1, first_name)
                        updates_made = True
                    
                    # Update last name (column B)
                    current_last_name = all_values[user_row_index - 1][1] if len(all_values[user_row_index - 1]) > 1 else ""
                    if last_name and current_last_name != last_name:
                        personnel_worksheet.update_cell(user_row_index, 2, last_name)
                        updates_made = True
                elif len(name_parts) == 1:
                    # Only first name provided
                    first_name = name_parts[0]
                    current_first_name = all_values[user_row_index - 1][0] if len(all_values[user_row_index - 1]) > 0 else ""
                    if first_name and current_first_name != first_name:
                        personnel_worksheet.update_cell(user_row_index, 1, first_name)
                        updates_made = True
            
            # Update static (column C) if provided
            static = audit_data.get('static', '').strip()
            if static:
                current_static = all_values[user_row_index - 1][2] if len(all_values[user_row_index - 1]) > 2 else ""
                if current_static != static:
                    personnel_worksheet.update_cell(user_row_index, 3, static)
                    updates_made = True
            
            # Update rank (column D) if provided
            rank = audit_data.get('rank', '').strip()
            if rank:
                current_rank = all_values[user_row_index - 1][3] if len(all_values[user_row_index - 1]) > 3 else ""
                if current_rank != rank:
                    personnel_worksheet.update_cell(user_row_index, 4, rank)
                    updates_made = True
            
            # Update department (column E) if provided
            department = audit_data.get('department', '').strip()
            if department:
                current_department = all_values[user_row_index - 1][4] if len(all_values[user_row_index - 1]) > 4 else ""
                if current_department != department:
                    personnel_worksheet.update_cell(user_row_index, 5, department)
                    updates_made = True
            
            # Update position (column F) if provided
            position = audit_data.get('position', '').strip()
            if position:
                current_position = all_values[user_row_index - 1][5] if len(all_values[user_row_index - 1]) > 5 else ""
                if current_position != position:
                    personnel_worksheet.update_cell(user_row_index, 6, position)
                    updates_made = True
            
            if updates_made:
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_id}")
            else:
                print(f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –≤ –ª–∏—Å—Ç–µ '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_id} –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                
            return True
            
        except Exception as e:
            print(f"Error updating personnel sheet: {e}")
            return False

    async def _remove_from_personnel_sheet(self, audit_data):
        """Remove user record from '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet when dismissed"""
        try:
            if not sheets_manager._ensure_connection():
                print("Warning: Could not connect to Google Sheets for personnel removal")
                return False
            
            # Get Personnel worksheet
            personnel_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤":
                    personnel_worksheet = worksheet
                    break
            
            if not personnel_worksheet:
                print("Warning: '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' worksheet not found")
                return False
            
            discord_id = str(audit_data.get('discord_id', ''))
            if not discord_id:
                print("Warning: No Discord ID provided for personnel removal")
                return False
            
            # Get all data to find the user row
            all_values = personnel_worksheet.get_all_values()
            if len(all_values) < 2:
                print("Warning: '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet appears to be empty")
                return False
            
            user_row_index = None
            
            # Find user by Discord ID (column G, index 6)
            for i, row in enumerate(all_values[1:], start=2):  # Skip header, start from row 2
                if len(row) >= 7 and row[6].strip() == discord_id:
                    user_row_index = i
                    break
            
            if user_row_index is None:
                print(f"Warning: User {discord_id} not found in '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' for removal")
                return False
            
            # Delete the row
            personnel_worksheet.delete_rows(user_row_index)
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {discord_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–∏—Å—Ç–∞ '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤'")
            return True
            
        except Exception as e:
            print(f"Error removing user from personnel sheet: {e}")
            return False

    async def _add_new_employee_to_personnel_sheet(self, audit_data):
        """Add new employee record to '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' sheet"""
        try:
            if not sheets_manager._ensure_connection():
                print("Warning: Could not connect to Google Sheets for new employee addition")
                return False
            
            # Get Personnel worksheet
            personnel_worksheet = None
            for worksheet in sheets_manager.spreadsheet.worksheets():
                if worksheet.title == "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤":
                    personnel_worksheet = worksheet
                    break
            
            if not personnel_worksheet:
                print("Warning: '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤' worksheet not found")
                return False
            
            # Parse full name into first and last name
            full_name = audit_data.get('full_name', '').strip()
            first_name = ""
            last_name = ""
            
            if full_name:
                name_parts = full_name.split()
                if len(name_parts) >= 2:
                    first_name = name_parts[0]
                    last_name = " ".join(name_parts[1:])
                elif len(name_parts) == 1:
                    first_name = name_parts[0]
            
            # Prepare row data for "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤" (columns A-G)
            row_data = [
                first_name,                              # A: –ò–º—è
                last_name,                               # B: –§–∞–º–∏–ª–∏—è
                audit_data.get('static', '').strip(),    # C: –°—Ç–∞—Ç–∏–∫
                audit_data.get('rank', '').strip(),      # D: –ó–≤–∞–Ω–∏–µ
                audit_data.get('department', '').strip(),# E: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                audit_data.get('position', '').strip(),  # F: –î–æ–ª–∂–Ω–æ—Å—Ç—å
                str(audit_data.get('discord_id', ''))    # G: Discord ID
            ]
            
            # Add record at the end of the sheet
            personnel_worksheet.append_row(row_data)
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –ª–∏—Å—Ç '–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤': {full_name}")
            return True
            
        except Exception as e:
            print(f"Error adding new employee to personnel sheet: {e}")
            return False

class BlacklistManualInputView(ui.View):
    """View with button to open modal for blacklist"""
    
    def __init__(self, violator, term, reason, evidence, moderator_signed_name, config):
        super().__init__(timeout=300)  # 5 minutes timeout
        self.violator = violator
        self.term = term
        self.reason = reason
        self.evidence = evidence
        self.moderator_signed_name = moderator_signed_name
        self.config = config
        self.message = None  # Will be set after message is sent

    @ui.button(label="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", style=discord.ButtonStyle.primary, emoji="üìù")
    async def input_data_button(self, interaction: discord.Interaction, button: ui.Button):
        # Create and send modal
        modal = BlacklistManualInputModal(
            self.violator, self.term, self.reason, self.evidence,
            self.moderator_signed_name, self.config, self
        )
        await interaction.response.send_modal(modal)
    
    async def on_timeout(self):
        """Called when the view times out"""
        # Disable all items when timeout occurs
        for item in self.children:
            item.disabled = True
        
        # Try to update the message if possible
        try:
            if self.message:
                await self.message.edit(view=self)
        except:
            pass  # Message might be deleted or we don't have permission


class BlacklistManualInputModal(ui.Modal):
    """Modal for manual input of personnel data for blacklist"""
    
    def __init__(self, violator, term, reason, evidence, moderator_signed_name, config, parent_view):
        super().__init__(title="–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        self.violator = violator
        self.term = term
        self.reason = reason
        self.evidence = evidence
        self.moderator_signed_name = moderator_signed_name
        self.config = config
        self.parent_view = parent_view
        
        self.name_input = ui.TextInput(
            label="–ò–º—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥",
            min_length=1,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.surname_input = ui.TextInput(
            label="–§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î—É–±–æ–≤",
            min_length=1,
            max_length=50,
            required=True
        )
        self.add_item(self.surname_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Validate and format static
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # Prepare data
            full_name = f"{self.name_input.value.strip()} {self.surname_input.value.strip()}"
            name_with_static = f"{full_name} | {formatted_static}"
              # Prepare blacklist data
            blacklist_data = {
                'term': self.term,
                'name_with_static': name_with_static,
                'reason': self.reason,
                'evidence': self.evidence,
                'moderator_signed_name': self.moderator_signed_name,
                'discord_id': self.violator.id
            }
            
            # Get personnel commands cog instance
            cog = interaction.client.get_cog("PersonnelCommands")
            if not cog:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –∫–∞–¥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral=True
                )
                return
            
            await interaction.response.defer(ephemeral=True)
            
            # Add to Google Sheets
            sheets_success = await cog._add_to_blacklist_sheet(blacklist_data)
            
            # Send to blacklist channel
            channel_success = await cog._send_blacklist_embed(
                interaction, self.violator, blacklist_data, self.config
            )
              # Send confirmation
            await cog._send_blacklist_confirmation(interaction, sheets_success, channel_success)
              # Disable the parent view after successful submission
            self.parent_view.clear_items()
            self.parent_view.add_item(ui.Button(
                label="‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", 
                style=discord.ButtonStyle.success, 
                disabled=True
            ))
            
            # Update the original message to show success
            try:
                if self.parent_view.message:
                    await self.parent_view.message.edit(view=self.parent_view)
            except:
                pass  # Ignore if we can't update the message
            
        except Exception as e:
            print(f"Error in blacklist manual input: {e}")
              # Also disable the parent view on error
            self.parent_view.clear_items()
            self.parent_view.add_item(ui.Button(
                label="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ", 
                style=discord.ButtonStyle.danger, 
                disabled=True
            ))
            
            # Update the original message to show error
            try:
                if self.parent_view.message:
                    await self.parent_view.message.edit(view=self.parent_view)
            except:
                pass  # Ignore if we can't update the message

            if not interaction.response.is_done():
                await interaction.response.send_message(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )

class NewEmployeeDataInputView(ui.View):
    """View with button to open modal for new employee data input"""
    
    def __init__(self, audit_data, interaction, config):
        super().__init__(timeout=300)  # 5 minutes timeout
        self.audit_data = audit_data
        self.original_interaction = interaction
        self.config = config
        self.message = None  # Will be set after message is sent

    @ui.button(label="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", style=discord.ButtonStyle.primary, emoji="üë§")
    async def input_employee_data_button(self, interaction: discord.Interaction, button: ui.Button):
        # Create and send modal
        modal = NewEmployeeDataInputModal(self.audit_data, self.original_interaction, self.config, self)
        await interaction.response.send_modal(modal)
    
    @ui.button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary, emoji="‚ùå")
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        # Disable the view and show cancellation message
        self.clear_items()
        self.add_item(ui.Button(
            label="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
            style=discord.ButtonStyle.secondary, 
            disabled=True
        ))
        
        embed = discord.Embed(
            title="‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            description="–ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞ —Å–ª—É–∂–±—É –æ—Ç–º–µ–Ω–µ–Ω–æ. –ê—É–¥–∏—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω.",
            color=discord.Color.red()
        )
        
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def on_timeout(self):
        """Called when the view times out"""
        # Disable all items when timeout occurs
        for item in self.children:
            item.disabled = True
        
        # Try to update the message if possible
        try:
            if self.message:
                embed = discord.Embed(
                    title="‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                    description="–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞ —Å–ª—É–∂–±—É –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                    color=discord.Color.orange()
                )
                await self.message.edit(embed=embed, view=self)
        except:
            pass  # Message might be deleted or we don't have permission


class NewEmployeeDataInputModal(ui.Modal):
    """Modal for entering new employee data for '–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É' action"""
    
    def __init__(self, audit_data, original_interaction, config, parent_view):
        super().__init__(title="–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
        self.audit_data = audit_data
        self.original_interaction = original_interaction
        self.config = config
        self.parent_view = parent_view
        
        self.first_name_input = ui.TextInput(
            label="–ò–º—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω",
            min_length=1,
            max_length=50,
            required=True
        )
        self.add_item(self.first_name_input)
        
        self.last_name_input = ui.TextInput(
            label="–§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤",
            min_length=1,
            max_length=50,
            required=True
        )
        self.add_item(self.last_name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Validate and format static
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # Prepare updated audit data with new employee info
            first_name = self.first_name_input.value.strip()
            last_name = self.last_name_input.value.strip()
            full_name = f"{first_name} {last_name}".strip()
            
            updated_audit_data = self.audit_data.copy()
            updated_audit_data.update({
                'full_name': full_name,
                'static': formatted_static,
            })
            
            # Get personnel commands cog instance
            cog = interaction.client.get_cog("PersonnelCommands")
            if not cog:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞: –º–æ–¥—É–ª—å –∫–∞–¥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral=True
                )
                return
            
            await interaction.response.defer(ephemeral=True)
            
            # Create the audit and add new employee to personnel sheet
            sheets_success = await cog._add_to_audit_sheet(updated_audit_data)
            
            # Add new employee to personnel sheet
            personnel_success = await cog._add_new_employee_to_personnel_sheet(updated_audit_data)
            
            # Send to audit channel
            channel_success = False
            audit_channel_id = self.config.get('audit_channel')
            
            if audit_channel_id:
                audit_channel = interaction.guild.get_channel(audit_channel_id)
                if audit_channel:
                    # Create audit embed
                    moscow_tz = timezone(timedelta(hours=3))
                    current_time = datetime.now(moscow_tz)
                    action_date = current_time.strftime('%d-%m-%Y')
                    
                    # Format name with static for display
                    static_formatted_display = formatted_static.replace('-', '') if formatted_static else ''
                    if len(static_formatted_display) == 5:
                        static_formatted_display = f"{static_formatted_display[:2]}-{static_formatted_display[2:]}"
                    elif len(static_formatted_display) == 6:
                        static_formatted_display = f"{static_formatted_display[:3]}-{static_formatted_display[3:]}"
                    
                    name_with_static = f"{full_name} | {static_formatted_display}".strip(' |')
                    
                    embed = discord.Embed(
                        title="–ö–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç –í–° –†–§",
                        color=0x055000,
                        timestamp=discord.utils.utcnow()
                    )
                    
                    embed.add_field(name="–ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª", value=updated_audit_data['moderator_signed_name'], inline=False)
                    embed.add_field(name="–ò–º—è –§–∞–º–∏–ª–∏—è | 6 —Ü–∏—Ñ—Ä —Å—Ç–∞—Ç–∏–∫–∞", value=name_with_static, inline=False)
                    embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value=updated_audit_data['action'], inline=False)
                    
                    # Add reason field if exists
                    if updated_audit_data.get('reason'):
                        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", value=updated_audit_data['reason'], inline=False)
                    
                    embed.add_field(name="–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è", value=action_date, inline=False)
                    embed.add_field(name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", value=updated_audit_data['department'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=False)
                    if updated_audit_data['position']:
                        embed.add_field(name="–î–æ–ª–∂–Ω–æ—Å—Ç—å", value=updated_audit_data['position'], inline=False)
                    embed.add_field(name="–í–æ–∏–Ω—Å–∫–æ–µ –∑–≤–∞–Ω–∏–µ", value=updated_audit_data['rank'] or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=False)
                    
                    embed.set_thumbnail(url="https://i.imgur.com/07MRSyl.png")
                    
                    await audit_channel.send(content=f"<@{updated_audit_data['discord_id']}>", embed=embed)
                    channel_success = True
            
            # Disable the parent view and show result
            self.parent_view.clear_items()
            
            if sheets_success and personnel_success:
                self.parent_view.add_item(ui.Button(
                    label="‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É", 
                    style=discord.ButtonStyle.success, 
                    disabled=True
                ))
                
                embed = discord.Embed(
                    title="‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É",
                    description=f"**{full_name}** —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É.",
                    color=discord.Color.green()
                )
                
                # Add status information
                status_parts = []
                status_parts.append("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç")
                status_parts.append("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ –õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤")
                if channel_success:
                    status_parts.append("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞")
                else:
                    status_parts.append("‚ùå –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
                embed.add_field(name="–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏:", value='\n'.join(status_parts), inline=False)
                
            else:
                self.parent_view.add_item(ui.Button(
                    label="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏", 
                    style=discord.ButtonStyle.danger, 
                    disabled=True
                ))
                
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞ —Å–ª—É–∂–±—É",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ —Å–ª—É–∂–±—É.",
                    color=discord.Color.red()
                )
            
            # Update the original message
            try:
                if self.parent_view.message:
                    await self.parent_view.message.edit(embed=embed, view=self.parent_view)
            except:
                pass  # Ignore if we can't update the message
            
            # Send followup confirmation to the interaction
            await interaction.followup.send(
                f"{'‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É!' if sheets_success and personnel_success else '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞ —Å–ª—É–∂–±—É.'}",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in new employee data input: {e}")
            
            # Also disable the parent view on error
            self.parent_view.clear_items()
            self.parent_view.add_item(ui.Button(
                label="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", 
                style=discord.ButtonStyle.danger, 
                disabled=True
            ))
            
            # Update the original message to show error
            try:
                if self.parent_view.message:
                    error_embed = discord.Embed(
                        title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                        description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞ —Å–ª—É–∂–±—É: {str(e)}",
                        color=discord.Color.red()
                    )
                    await self.parent_view.message.edit(embed=error_embed, view=self.parent_view)
            except:
                pass  # Ignore if we can't update the message

            if not interaction.response.is_done():
                await interaction.response.send_message(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    ephemeral=True
                )

async def setup(bot):
    await bot.add_cog(PersonnelCommands(bot))
