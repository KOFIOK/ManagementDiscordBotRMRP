"""
Personnel management commands for Discord bot
Includes audit command integrated with PersonnelManager and PostgreSQL
"""

import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime, timezone, timedelta
from utils.config_manager import load_config, is_moderator_or_admin, is_administrator
from utils.database_manager import PersonnelManager
from utils.nickname_manager import nickname_manager


class PersonnelCommands(commands.Cog):
    """Commands for personnel management using PersonnelManager and PostgreSQL"""
    
    def __init__(self, bot):
        self.bot = bot
        self.temporarily_disabled = False
        self._cached_settings = None
        self._cache_timestamp = None
        self._cache_duration = 300  # 5 minutes cache
    
    async def _check_disabled(self, interaction):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        if self.temporarily_disabled:
            await interaction.response.send_message(
                "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL.\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–Ω–∞–π–º, —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—ã) —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
                ephemeral=True
            )
            return True
        return False
    
    async def _get_settings_from_postgresql(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            current_time = datetime.now()
            
            # Check cache
            if (self._cached_settings and self._cache_timestamp and 
                (current_time - self._cache_timestamp).seconds < self._cache_duration):
                return self._cached_settings
            
            # Get settings from database using get_db_cursor
            from utils.postgresql_pool import get_db_cursor
            
            settings = {
                'actions': [],
                'ranks': [],
                'departments': [],
                'positions': []
            }
            
            with get_db_cursor() as cursor:
                # Get actions
                try:
                    cursor.execute("SELECT name FROM actions ORDER BY name")
                    actions_result = cursor.fetchall()
                    settings['actions'] = [row['name'] for row in actions_result] if actions_result else []
                except Exception as e:
                    print(f"‚ö†Ô∏è Actions table not available: {e}")
                    settings['actions'] = []
                
                # Get ranks
                try:
                    cursor.execute("SELECT name FROM ranks ORDER BY name")
                    ranks_result = cursor.fetchall()
                    settings['ranks'] = [row['name'] for row in ranks_result] if ranks_result else []
                except Exception as e:
                    print(f"‚ö†Ô∏è Ranks table not available: {e}")
                    settings['ranks'] = []
                
                # Get subdivisions
                try:
                    cursor.execute("SELECT name FROM subdivisions ORDER BY name")
                    subdivisions_result = cursor.fetchall()
                    settings['departments'] = [row['name'] for row in subdivisions_result] if subdivisions_result else []
                except Exception as e:
                    print(f"‚ö†Ô∏è Subdivisions table not available: {e}")
                    settings['departments'] = []
                
                # Get positions
                try:
                    cursor.execute("SELECT name FROM positions ORDER BY name")
                    positions_result = cursor.fetchall()
                    settings['positions'] = [row['name'] for row in positions_result] if positions_result else []
                except Exception as e:
                    print(f"‚ö†Ô∏è Positions table not available: {e}")
                    settings['positions'] = []
            
            # If no data from PostgreSQL, use fallback
            if not any(settings.values()):
                print("‚ö†Ô∏è No data from PostgreSQL, using fallback settings")
                return self._get_fallback_settings()
            
            # Update cache
            self._cached_settings = settings
            self._cache_timestamp = current_time
            
            print(f"üîÑ PostgreSQL settings loaded: {len(settings['actions'])} actions, {len(settings['ranks'])} ranks, {len(settings['departments'])} subdivisions, {len(settings['positions'])} positions")
            return settings
            
        except Exception as e:
            print(f"‚ùå Error loading settings from PostgreSQL: {e}")
            return self._get_fallback_settings()
    
    def _get_fallback_settings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'actions': [
                '–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É',
                '–ü—Ä–∏–Ω—è—Ç –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
                '–ü–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 
                '–ü–æ–≤—ã—à–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏',
                '–ü–æ–Ω–∏–∂–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏',
                '–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å',
                '–°–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
                '–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã'
            ],
            'departments': [
                '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è', '–£–í–ü', '–°–°–û', '–†–û–∏–û', '–ú–†'
            ],
            'positions': [
                '–°—Ç—Ä–µ–ª–æ–∫', '–°–Ω–∞–π–ø–µ—Ä', '–ü—É–ª–µ–º–µ—Ç—á–∏–∫', '–ì—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—á–∏–∫',
                '–ö–æ–º–∞–Ω–¥–∏—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–∞ –≤–∑–≤–æ–¥–∞',
                '–ö–æ–º–∞–Ω–¥–∏—Ä –≤–∑–≤–æ–¥–∞', '–ö–æ–º–∞–Ω–¥–∏—Ä —Ä–æ—Ç—ã'
            ],
            'ranks': [
                '–†—è–¥–æ–≤–æ–π', '–ï—Ñ—Ä–µ–π—Ç–æ—Ä', '–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–°–µ—Ä–∂–∞–Ω—Ç',
                '–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–°—Ç–∞—Ä—à–∏–Ω–∞', '–ü—Ä–∞–ø–æ—Ä—â–∏–∫', '–°—Ç–∞—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä—â–∏–∫',
                '–ú–ª–∞–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–ö–∞–ø–∏—Ç–∞–Ω'
            ]
        }
    
    @app_commands.command(name="–∞—É–¥–∏—Ç", description="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç")
    @app_commands.describe(
        —Å–æ—Ç—Ä—É–¥–Ω–∏–∫="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        –¥–µ–π—Å—Ç–≤–∏–µ="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        –¥–æ–ª–∂–Ω–æ—Å—Ç—å="–î–æ–ª–∂–Ω–æ—Å—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", 
        –∑–≤–∞–Ω–∏–µ="–ó–≤–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ (–¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è/–ø—Ä–∏–µ–º–∞ –Ω–∞ —Å–ª—É–∂–±—É)"
    )
    async def audit_command(
        self,
        interaction: discord.Interaction,
        —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: discord.Member,
        –¥–µ–π—Å—Ç–≤–∏–µ: str,
        –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: str = None,
        –¥–æ–ª–∂–Ω–æ—Å—Ç—å: str = None,
        –∑–≤–∞–Ω–∏–µ: str = None,
        –ø—Ä–∏—á–∏–Ω–∞: str = None
    ):
        """Add personnel audit record using PersonnelManager"""
        
        # Check if disabled
        if await self._check_disabled(interaction):
            return
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Check if action is disabled
        disabled_audit_actions = config.get('disabled_audit_actions', [])
        if –¥–µ–π—Å—Ç–≤–∏–µ in disabled_audit_actions:
            embed = discord.Embed(
                title="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
                description=f"–î–µ–π—Å—Ç–≤–∏–µ '{–¥–µ–π—Å—Ç–≤–∏–µ}' –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Defer response as this might take time
        await interaction.response.defer(ephemeral=True)
        
        try:
            # Validate required fields
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã" and not –ø—Ä–∏—á–∏–Ω–∞:
                embed = discord.Embed(
                    title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                    description="–î–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return
            elif –¥–µ–π—Å—Ç–≤–∏–µ == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É" and not –ø—Ä–∏—á–∏–Ω–∞:
                embed = discord.Embed(
                    title="‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è",
                    description="–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ —Å–ª—É–∂–±—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return
            elif –¥–µ–π—Å—Ç–≤–∏–µ not in ["–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã", "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É"] and not any([–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∑–≤–∞–Ω–∏–µ]):
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
                    description="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–æ–ª–µ–π: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∑–≤–∞–Ω–∏–µ.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return
            
            # Handle different actions with nickname integration
            if –¥–µ–π—Å—Ç–≤–∏–µ == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É":
                # –≠—Ç–æ –ø—Ä–∏—ë–º –Ω–∞ —Å–ª—É–∂–±—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º PersonnelManager + nickname_manager
                application_data = {
                    'user_id': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id,
                    'username': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name,
                    'name': —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name,  # Will be overridden if user provides specific name
                    'type': 'military',
                    'recruitment_type': '–ø—Ä–∏–∑—ã–≤',
                    'rank': –∑–≤–∞–Ω–∏–µ or '–†—è–¥–æ–≤–æ–π',
                    'subdivision': –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ or '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è',
                    'position': –¥–æ–ª–∂–Ω–æ—Å—Ç—å,
                    'reason': –ø—Ä–∏—á–∏–Ω–∞
                }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PersonnelManager –¥–ª—è –ø—Ä–∏—ë–º–∞
                pm = PersonnelManager()
                success, message = await pm.process_role_application_approval(
                    application_data,
                    —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.id,
                    interaction.user.id,
                    interaction.user.display_name
                )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ display_name –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
                    full_name = —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name
                    name_parts = full_name.split()
                    
                    if len(name_parts) >= 2:
                        first_name = name_parts[0]
                        last_name = ' '.join(name_parts[1:])
                    else:
                        first_name = full_name
                        last_name = ''
                    
                    print(f"üéÜ AUDIT COMMAND: –ü—Ä–∏—ë–º –Ω–∞ —Å–ª—É–∂–±—É {full_name} (–∑–≤–∞–Ω–∏–µ: {–∑–≤–∞–Ω–∏–µ})")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nickname_manager
                    new_nickname = await nickname_manager.handle_hiring(
                        member=—Å–æ—Ç—Ä—É–¥–Ω–∏–∫,
                        rank_name=–∑–≤–∞–Ω–∏–µ or '–†—è–¥–æ–≤–æ–π',
                        first_name=first_name,
                        last_name=last_name
                    )
                    
                    if new_nickname:
                        await —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.edit(nick=new_nickname, reason=f"–ö–æ–º–∞–Ω–¥–∞ –∞—É–¥–∏—Ç–∞: {–¥–µ–π—Å—Ç–≤–∏–µ}")
                        print(f"‚úÖ AUDIT NICKNAME: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫–Ω–µ–π–º {new_nickname}")
                    
                except Exception as nickname_error:
                    print(f"‚ö†Ô∏è AUDIT NICKNAME ERROR: {nickname_error}")
                
                if success:
                    embed = discord.Embed(
                        title="‚úÖ –ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É",
                        description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É.\n\n**–î–µ—Ç–∞–ª–∏:**\n{message}",
                        color=discord.Color.green()
                    )
                else:
                    embed = discord.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –Ω–∞ —Å–ª—É–∂–±—É",
                        description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} –Ω–∞ —Å–ª—É–∂–±—É.\n\n**–û—à–∏–±–∫–∞:**\n{message}",
                        color=discord.Color.red()
                    )
                
                await interaction.followup.send(embed=embed, ephemeral=True)
            
            elif –¥–µ–π—Å—Ç–≤–∏–µ == "–ü–æ–≤—ã—à–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏":
                # –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ –∑–≤–∞–Ω–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∏–∫–Ω–µ–π–º–∞
                try:
                    if not –∑–≤–∞–Ω–∏–µ:
                        embed = discord.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                            description="–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤ –∑–≤–∞–Ω–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ.",
                            color=discord.Color.red()
                        )
                        await interaction.followup.send(embed=embed, ephemeral=True)
                        return
                    
                    print(f"üéÜ AUDIT COMMAND: –ü–æ–≤—ã—à–µ–Ω–∏–µ –≤ –∑–≤–∞–Ω–∏–∏ {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name} -> {–∑–≤–∞–Ω–∏–µ}")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nickname_manager –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è
                    new_nickname = await nickname_manager.handle_promotion(
                        member=—Å–æ—Ç—Ä—É–¥–Ω–∏–∫,
                        new_rank_name=–∑–≤–∞–Ω–∏–µ
                    )
                    
                    if new_nickname:
                        await —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.edit(nick=new_nickname, reason=f"–ö–æ–º–∞–Ω–¥–∞ –∞—É–¥–∏—Ç–∞: {–¥–µ–π—Å—Ç–≤–∏–µ}")
                        embed = discord.Embed(
                            title="‚úÖ –ü–æ–≤—ã—à–µ–Ω –≤ –∑–≤–∞–Ω–∏–∏",
                            description=f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è **{–∑–≤–∞–Ω–∏–µ}**.\n\n–ù–∏–∫–Ω–µ–π–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: `{new_nickname}`",
                            color=discord.Color.green()
                        )
                        print(f"‚úÖ AUDIT PROMOTION: –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω: {new_nickname}")
                    else:
                        embed = discord.Embed(
                            title="‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º",
                            description=f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∑–≤–∞–Ω–∏—è **{–∑–≤–∞–Ω–∏–µ}**, –Ω–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–≥ –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤—Ä—É—á–Ω—É—é.",
                            color=discord.Color.orange()
                        )
                    
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    
                except Exception as e:
                    print(f"‚ùå AUDIT PROMOTION ERROR: {e}")
                    embed = discord.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention}: {e}",
                        color=discord.Color.red()
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
            
            elif –¥–µ–π—Å—Ç–≤–∏–µ == "–ü–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ":
                # –ü–µ—Ä–µ–≤–æ–¥ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∏–∫–Ω–µ–π–º–∞
                try:
                    if not –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:
                        embed = discord.Embed(
                            title="‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                            description="–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.",
                            color=discord.Color.red()
                        )
                        await interaction.followup.send(embed=embed, ephemeral=True)
                        return
                    
                    print(f"üéÜ AUDIT COMMAND: –ü–µ—Ä–µ–≤–æ–¥ {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.display_name} -> {–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ}")
                    
                    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –Ω–∞ –∫–ª—é—á–∏
                    subdivision_mapping = {
                        '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è': 'military_academy',
                        '–£–í–ü': '–£–í–ü',
                        '–°–°–û': '–°–°–û',
                        '–†–û–∏–û': '–†–û–∏–û',
                        '–ú–†': '–ú–†'
                    }
                    
                    subdivision_key = subdivision_mapping.get(–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nickname_manager –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                    new_nickname = await nickname_manager.handle_transfer(
                        member=—Å–æ—Ç—Ä—É–¥–Ω–∏–∫,
                        subdivision_key=subdivision_key,
                        rank_name=–∑–≤–∞–Ω–∏–µ or '–†—è–¥–æ–≤–æ–π'
                    )
                    
                    if new_nickname:
                        await —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.edit(nick=new_nickname, reason=f"–ö–æ–º–∞–Ω–¥–∞ –∞—É–¥–∏—Ç–∞: {–¥–µ–π—Å—Ç–≤–∏–µ}")
                        embed = discord.Embed(
                            title="‚úÖ –ü–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
                            description=f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ **{–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ}**.\n\n–ù–∏–∫–Ω–µ–π–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: `{new_nickname}`",
                            color=discord.Color.green()
                        )
                        print(f"‚úÖ AUDIT TRANSFER: –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω: {new_nickname}")
                    else:
                        embed = discord.Embed(
                            title="‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º",
                            description=f"{—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ **{–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ}**, –Ω–æ –Ω–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–≥ –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤—Ä—É—á–Ω—É—é.",
                            color=discord.Color.orange()
                        )
                    
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    
                except Exception as e:
                    print(f"‚ùå AUDIT TRANSFER ERROR: {e}")
                    embed = discord.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞",
                        description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention}: {e}",
                        color=discord.Color.red()
                    )
                    await interaction.followup.send(embed=embed, ephemeral=True)
                
            else:
                # Other actions - for now show that they need manual implementation
                embed = discord.Embed(
                    title="üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                    description=f"–î–µ–π—Å—Ç–≤–∏–µ '{–¥–µ–π—Å—Ç–≤–∏–µ}' –ø–æ–∫–∞ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π PersonnelManager.\n\n"
                               f"**–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n"
                               f"‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {—Å–æ—Ç—Ä—É–¥–Ω–∏–∫.mention}\n"
                               f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {–¥–µ–π—Å—Ç–≤–∏–µ}\n"
                               f"‚Ä¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                               f"‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {–¥–æ–ª–∂–Ω–æ—Å—Ç—å or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                               f"‚Ä¢ –ó–≤–∞–Ω–∏–µ: {–∑–≤–∞–Ω–∏–µ or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                               f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {–ø—Ä–∏—á–∏–Ω–∞ or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                    color=discord.Color.orange()
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                
        except Exception as e:
            print(f"Error in audit command: {e}")
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∞—É–¥–∏—Ç–∞.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
    
    # Autocomplete functions
    @audit_command.autocomplete('–¥–µ–π—Å—Ç–≤–∏–µ')
    async def action_autocomplete(self, interaction: discord.Interaction, current: str):
        try:
            settings = await self._get_settings_from_postgresql()
            actions = settings.get('actions', [])
            
            # Filter out disabled actions from config
            config = load_config()
            disabled_audit_actions = config.get('disabled_audit_actions', [])
            enabled_actions = [action for action in actions if action not in disabled_audit_actions]
            
            # Filter actions based on current input
            filtered = [action for action in enabled_actions if current.lower() in action.lower()]
            return [app_commands.Choice(name=action, value=action) for action in filtered[:25]]
        except Exception as e:
            print(f"Error in action autocomplete: {e}")
            # Fallback to basic settings
            settings = self._get_fallback_settings()
            actions = settings.get('actions', [])
            
            # Also apply filtering for fallback
            try:
                config = load_config()
                disabled_audit_actions = config.get('disabled_audit_actions', [])
                actions = [action for action in actions if action not in disabled_audit_actions]
            except:
                pass
            
            filtered = [action for action in actions if current.lower() in action.lower()]
            return [app_commands.Choice(name=action, value=action) for action in filtered[:25]]
    
    @audit_command.autocomplete('–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
    async def department_autocomplete(self, interaction: discord.Interaction, current: str):
        try:
            settings = await self._get_settings_from_postgresql()
            departments = settings.get('departments', [])
            
            filtered = [dept for dept in departments if current.lower() in dept.lower()]
            return [app_commands.Choice(name=dept, value=dept) for dept in filtered[:25]]
        except Exception as e:
            print(f"Error in department autocomplete: {e}")
            settings = self._get_fallback_settings()
            departments = settings.get('departments', [])
            filtered = [dept for dept in departments if current.lower() in dept.lower()]
            return [app_commands.Choice(name=dept, value=dept) for dept in filtered[:25]]
    
    @audit_command.autocomplete('–¥–æ–ª–∂–Ω–æ—Å—Ç—å')
    async def position_autocomplete(self, interaction: discord.Interaction, current: str):
        try:
            settings = await self._get_settings_from_postgresql()
            positions = settings.get('positions', [])
            
            filtered = [pos for pos in positions if current.lower() in pos.lower()]
            return [app_commands.Choice(name=pos, value=pos) for pos in filtered[:25]]
        except Exception as e:
            print(f"Error in position autocomplete: {e}")
            settings = self._get_fallback_settings()
            positions = settings.get('positions', [])
            filtered = [pos for pos in positions if current.lower() in pos.lower()]
            return [app_commands.Choice(name=pos, value=pos) for pos in filtered[:25]]
    
    @audit_command.autocomplete('–∑–≤–∞–Ω–∏–µ')
    async def rank_autocomplete(self, interaction: discord.Interaction, current: str):
        try:
            settings = await self._get_settings_from_postgresql()
            ranks = settings.get('ranks', [])
            
            filtered = [rank for rank in ranks if current.lower() in rank.lower()]
            return [app_commands.Choice(name=rank, value=rank) for rank in filtered[:25]]
        except Exception as e:
            print(f"Error in rank autocomplete: {e}")
            settings = self._get_fallback_settings()
            ranks = settings.get('ranks', [])
            filtered = [rank for rank in ranks if current.lower() in rank.lower()]
            return [app_commands.Choice(name=rank, value=rank) for rank in filtered[:25]]
    
    @app_commands.command(name="—á—Å", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    @app_commands.describe(
        –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        —Å—Ä–æ–∫="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        –ø—Ä–∏—á–∏–Ω–∞="–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç.–¥.)"
    )
    @app_commands.choices(—Å—Ä–æ–∫=[
        app_commands.Choice(name="14 –¥–Ω–µ–π", value=14),
        app_commands.Choice(name="30 –¥–Ω–µ–π", value=30)
    ])
    async def blacklist_add_command(
        self,
        interaction: discord.Interaction,
        –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å: discord.Member,
        —Å—Ä–æ–∫: int,
        –ø—Ä–∏—á–∏–Ω–∞: str,
        –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: str = None
    ):
        """Add user to blacklist"""
        
        # Check if disabled
        if await self._check_disabled(interaction):
            return
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Defer response
        await interaction.response.defer(ephemeral=True)
        
        try:
            # Import audit logger
            from utils.audit_logger import audit_logger
            
            # Add to blacklist
            success, message = await audit_logger.add_to_blacklist_manual(
                guild=interaction.guild,
                target_user=–Ω–∞—Ä—É—à–∏—Ç–µ–ª—å,
                moderator=interaction.user,
                reason=–ø—Ä–∏—á–∏–Ω–∞,
                duration_days=—Å—Ä–æ–∫,
                evidence_url=–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞,
                config=config
            )
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
                    description=message,
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                    description=message,
                    color=discord.Color.red()
                )
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in blacklist_add_command: {e}")
            import traceback
            traceback.print_exc()
            
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
    
    @app_commands.command(name="—á—Å-—É–¥–∞–ª–∏—Ç—å", description="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    @app_commands.describe(
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )
    async def blacklist_remove_command(
        self,
        interaction: discord.Interaction,
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: discord.Member
    ):
        """Remove user from blacklist"""
        
        # Check if disabled
        if await self._check_disabled(interaction):
            return
        
        # Check permissions
        config = load_config()
        if not is_administrator(interaction.user, config):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Defer response
        await interaction.response.defer(ephemeral=True)
        
        try:
            # Import audit logger
            from utils.audit_logger import audit_logger
            
            # Remove from blacklist
            success, message = await audit_logger.remove_from_blacklist(
                –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.id,
                interaction.user
            )
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ –£–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                    description=message,
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                    description=message,
                    color=discord.Color.red()
                )
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in blacklist_remove_command: {e}")
            import traceback
            traceback.print_exc()
            
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)


async def setup(bot):
    await bot.add_cog(PersonnelCommands(bot))