"""
Rank synchronization commands
"""
import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional
from utils.config_manager import load_config, is_moderator_or_admin
from utils.rank_sync import sync_ranks_for_guild, sync_ranks_for_member, rank_sync_manager


class RankSyncCog(commands.Cog):
    """Commands for rank synchronization system"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="rank-sync", description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤–∞–Ω–∏—è —Å –∏–≥—Ä–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é")
    @app_commands.describe(
        target="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö)",
        force="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à)"
    )
    async def rank_sync(
        self, 
        interaction: discord.Interaction, 
        target: Optional[discord.Member] = None,
        force: bool = False
    ):
        """Sync ranks based on Discord activity"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            await interaction.response.send_message(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer(ephemeral=True)
        
        try:
            if target:
                # Sync specific member
                embed = discord.Embed(
                    title="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–≤–∞–Ω–∏—è",
                    description=f"–ü—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target.mention}...",
                    color=discord.Color.blue(),
                    timestamp=discord.utils.utcnow()
                )
                
                await interaction.followup.send(embed=embed, ephemeral=True)
                
                success = await sync_ranks_for_member(target)
                
                if success:
                    embed.description = f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è {target.mention} –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    embed.color = discord.Color.green()
                else:
                    embed.description = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–≤–∞–Ω–∏–µ –¥–ª—è {target.mention}"
                    embed.color = discord.Color.orange()
                
            else:
                # Sync all members
                embed = discord.Embed(
                    title="üîÑ –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–≤–∞–Ω–∏–π",
                    description="–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞...",
                    color=discord.Color.blue(),
                    timestamp=discord.utils.utcnow()
                )
                
                await interaction.followup.send(embed=embed, ephemeral=True)
                
                # Use optimized sync if available
                try:
                    from utils.optimized_rank_sync import optimized_rank_sync
                    if optimized_rank_sync:
                        synced_count, checked_count = await optimized_rank_sync.manual_sync_all()
                    else:
                        synced_count, checked_count = await sync_ranks_for_guild(interaction.guild)
                except ImportError:
                    synced_count, checked_count = await sync_ranks_for_guild(interaction.guild)
                
                embed = discord.Embed(
                    title="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    color=discord.Color.green(),
                    timestamp=discord.utils.utcnow()
                )
                
                embed.add_field(
                    name="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
                    value=(
                        f"**–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {checked_count}\n"
                        f"**–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {synced_count}\n"
                        f"**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** {(synced_count/checked_count*100):.1f}%" if checked_count > 0 else "**–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:** 0%"
                    ),
                    inline=False
                )
                
                if synced_count > 0:
                    embed.add_field(
                        name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                        value="–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ –∞—É–¥–∏—Ç–∞.",
                        inline=False
                    )
            
            await interaction.edit_original_response(embed=embed)
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–≤–∞–Ω–∏–π: {e}",
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )
            
            await interaction.edit_original_response(embed=error_embed)
            print(f"‚ùå Error in rank sync command: {e}")
    
    @app_commands.command(name="rank-test", description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    @app_commands.describe(
        activity_text="–¢–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1553-326 | –ö–∞–ø–∏—Ç–∞–Ω (1153 –∏–∑ 5000)')"
    )
    async def rank_test(self, interaction: discord.Interaction, activity_text: str):
        """Test rank detection from activity text"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            await interaction.response.send_message(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )
            return
        
        embed = discord.Embed(
            title="üß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç:",
            value=f"```{activity_text}```",
            inline=False
        )
        
        if not rank_sync_manager:
            embed.add_field(
                name="‚ùå –û—à–∏–±–∫–∞:",
                value="–°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                inline=False
            )
            embed.color = discord.Color.red()
        else:
            # Test server detection
            is_rmrp = rank_sync_manager.is_rmrp_arbat_server(activity_text)
            embed.add_field(
                name="üéÆ –°–µ—Ä–≤–µ—Ä RMRP –ê—Ä–±–∞—Ç:",
                value="‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω" if is_rmrp else "‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω",
                inline=True
            )
            
            # Test rank extraction
            detected_rank = rank_sync_manager.extract_rank_from_activity(activity_text)
            
            if detected_rank:
                embed.add_field(
                    name="üéñÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –∑–≤–∞–Ω–∏–µ:",
                    value=f"`{detected_rank}`",
                    inline=True
                )
                
                # Check if rank has corresponding role
                config = load_config()
                rank_roles = config.get('rank_roles', {})
                
                if detected_rank in rank_roles:
                    role_id = rank_roles[detected_rank]
                    role = interaction.guild.get_role(role_id)
                    
                    embed.add_field(
                        name="üè∑Ô∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å:",
                        value=role.mention if role else f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {role_id})",
                        inline=True
                    )
                    
                    embed.color = discord.Color.green()
                else:
                    embed.add_field(
                        name="‚ö†Ô∏è –†–æ–ª—å:",
                        value="–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                        inline=True
                    )
                    embed.color = discord.Color.orange()
            else:
                embed.add_field(
                    name="‚ùå –ó–≤–∞–Ω–∏–µ:",
                    value="–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ",
                    inline=True
                )
                embed.color = discord.Color.red()
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @app_commands.command(name="rank-status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–≤–∞–Ω–∏–π")
    async def rank_status(self, interaction: discord.Interaction):
        """Show rank synchronization system status"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            await interaction.response.send_message(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )
            return
        
        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–≤–∞–Ω–∏–π",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # System status
        if rank_sync_manager:
            embed.add_field(
                name="ü§ñ –°–∏—Å—Ç–µ–º–∞:",
                value="‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
                inline=True
            )
        else:
            embed.add_field(
                name="ü§ñ –°–∏—Å—Ç–µ–º–∞:",
                value="‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                inline=True
            )
        
        # Configured ranks count
        rank_roles = config.get('rank_roles', {})
        embed.add_field(
            name="üéñÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∑–≤–∞–Ω–∏–π:",
            value=str(len(rank_roles)),
            inline=True
        )
        
        # Supported server patterns
        if rank_sync_manager:
            server_patterns = rank_sync_manager.server_patterns
            embed.add_field(
                name="üéÆ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:",
                value="\n".join([f"‚Ä¢ `{pattern}`" for pattern in server_patterns[:3]]),
                inline=False
            )
            
            # Sample rank variations
            sample_ranks = ["–∫–∞–ø–∏—Ç–∞–Ω", "–º–ª. –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç", "—Å—Ç. —Å–µ—Ä–∂–∞–Ω—Ç"]
            variations_text = []
            
            for rank in sample_ranks:
                if rank in rank_sync_manager.rank_variations:
                    variations = rank_sync_manager.rank_variations[rank][:3]  # First 3
                    variations_text.append(f"**{rank}**: {', '.join(variations)}")
            
            if variations_text:
                embed.add_field(
                    name="üî§ –ü—Ä–∏–º–µ—Ä—ã –≤–∞—Ä–∏–∞—Ü–∏–π –∑–≤–∞–Ω–∏–π:",
                    value="\n".join(variations_text),
                    inline=False
                )
        
        embed.add_field(
            name="üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
            value=(
                "‚Ä¢ `/rank-sync` - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é\n"
                "‚Ä¢ `/rank-test` - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è\n"
                "‚Ä¢ `/rank-status` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å\n"
                "‚Ä¢ `/rank-stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"
            ),
            inline=False
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @app_commands.command(name="rank-stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    async def rank_stats(self, interaction: discord.Interaction):
        """Show optimized rank sync statistics"""
        
        # Check permissions
        config = load_config()
        if not is_moderator_or_admin(interaction.user, config):
            await interaction.response.send_message(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                ephemeral=True
            )
            return
        
        try:
            from utils.optimized_rank_sync import optimized_rank_sync
            
            if not optimized_rank_sync:
                await interaction.response.send_message(
                    "‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                    ephemeral=True
                )
                return
            
            stats = await optimized_rank_sync.get_sync_stats()
            
            embed = discord.Embed(
                title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            # Server stats
            embed.add_field(
                name="üèõÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:",
                value=(
                    f"**–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {stats.get('total_members', 'N/A')}\n"
                    f"**–° –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª—å—é:** {stats.get('key_role_members', 'N/A')}\n"
                    f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ RMRP:** {stats.get('active_rmrp_players', 'N/A')}\n"
                    f"**–í –∫—ç—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:** {stats.get('cached_activities', 'N/A')}\n"
                    f"**–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {stats.get('synced_members', 'N/A')}"
                ),
                inline=False
            )
            
            # Key role info
            key_role_name = stats.get('key_role_name')
            key_role_configured = stats.get('key_role_configured', False)
            
            if key_role_configured and key_role_name:
                embed.add_field(
                    name="üîë –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                    value=f"‚úÖ **{key_role_name}** ({stats.get('key_role_members', 0)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)",
                    inline=False
                )
            elif key_role_configured:
                embed.add_field(
                    name="üîë –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                    value="‚ùå **–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞** (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ö†Ô∏è –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                    value="**–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞** - –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                    inline=False
                )
            
            # System settings
            mode_status = []
            if stats.get('realtime_enabled'):
                mode_status.append("üî¥ **Real-time** (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)")
            if stats.get('periodic_enabled'):
                mode_status.append("üü¢ **Periodic** (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)")
            if not mode_status:
                mode_status.append("üü° **Manual only**")
            
            embed.add_field(
                name="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
                value=(
                    f"**–†–µ–∂–∏–º—ã:** {', '.join(mode_status)}\n"
                    f"**–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:** {stats.get('batch_size', 'N/A')}\n"
                    f"**–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏:** {stats.get('check_interval', 'N/A')}—Å\n"
                    f"**–û—á–µ—Ä–µ–¥—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:** {stats.get('queue_size', 'N/A')}"
                ),
                inline=False
            )
            
            # Performance recommendations
            active_players = stats.get('active_rmrp_players', 0)
            total_members = stats.get('total_members', 0)
            key_role_members = stats.get('key_role_members', 0)
            key_role_configured = stats.get('key_role_configured', False)
            
            if total_members > 1000:
                if not key_role_configured:
                    embed.add_field(
                        name="‚ö†Ô∏è –í–∞–∂–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:",
                        value=(
                            "**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å!**\n"
                            f"‚Ä¢ –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–æ {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –¥–ª—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö\n"
                            "‚Ä¢ –≠—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑—ã\n"
                            "‚Ä¢ `/settings` ‚Üí `–†–æ–ª–∏ –∑–≤–∞–Ω–∏–π` ‚Üí `üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å`"
                        ),
                        inline=False
                    )
                elif stats.get('realtime_enabled'):
                    embed.add_field(
                        name="‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
                        value=(
                            "**Real-time —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –Ω–∞ –±–æ–ª—å—à–æ–º —Å–µ—Ä–≤–µ—Ä–µ!**\n"
                            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å real-time —Ä–µ–∂–∏–º\n"
                            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ periodic —Ä–µ–∂–∏–º (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)\n"
                            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {active_players} –∏–∑ {key_role_members} –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö"
                        ),
                        inline=False
                    )
                else:
                    embed.add_field(
                        name="‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:",
                        value=(
                            "–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.\n"
                            f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ {active_players} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ {key_role_members} –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö."
                        ),
                        inline=False
                    )
            else:
                embed.add_field(
                    name="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å:",
                    value=f"–°–µ—Ä–≤–µ—Ä —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è {active_players} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.",
                    inline=False
                )
            
            embed.add_field(
                name="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏:",
                value="–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            error_embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=error_embed, ephemeral=True)


async def setup(bot):
    """Setup function for the cog"""
    await bot.add_cog(RankSyncCog(bot))
