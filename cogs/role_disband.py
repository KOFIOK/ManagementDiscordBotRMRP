"""
Role Disband System
Slash command for administrators to mass remove roles from users
"""

import discord
from discord.ext import commands
from discord import app_commands
from typing import List
import asyncio
from utils.config_manager import load_config, is_moderator_or_admin


class RoleDisbandView(discord.ui.View):
    """View with confirmation button for role disbanding"""
    
    def __init__(self, roles_to_disband: List[discord.Role] = None, admin_user: discord.Member = None, affected_users: List[discord.Member] = None, timeout: int = 300):
        super().__init__(timeout=timeout)
        self.roles_to_disband = roles_to_disband or []
        self.admin_user = admin_user
        self.affected_users = affected_users or []
    
    @discord.ui.button(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", style=discord.ButtonStyle.danger, custom_id="confirm_disband")
    async def confirm_disband(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Handle confirmation of role disbanding"""
        try:
            # Check if the user who clicked is the same admin who initiated the command
            if interaction.user.id != self.admin_user.id:
                await interaction.response.send_message(
                    "‚ùå –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                    ephemeral=True
                )
                return
            
            # Disable the button and update the message
            button.disabled = True
            button.label = "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
            button.style = discord.ButtonStyle.secondary
            
            await interaction.response.edit_message(view=self)
            
            # Start the disbanding process
            await self._execute_disband(interaction)
            
        except Exception as e:
            print(f"Error in role disband confirmation: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
                ephemeral=True
            )
    
    async def _execute_disband(self, interaction: discord.Interaction):
        """Execute the role disbanding process"""
        try:
            total_users = len(self.affected_users)
            processed_users = 0
            failed_users = []
            
            # Create progress embed
            progress_embed = discord.Embed(
                title="üîÑ –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π",
                description=f"–û–±—Ä–∞–±–æ—Ç–∫–∞: 0/{total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                color=discord.Color.orange()
            )
            
            await interaction.edit_original_response(embed=progress_embed, view=None)
            
            # Process users in batches to avoid rate limits
            batch_size = 10
            for i in range(0, len(self.affected_users), batch_size):
                batch = self.affected_users[i:i + batch_size]
                batch_tasks = []
                
                for user in batch:
                    batch_tasks.append(self._remove_roles_from_user(user, failed_users))
                
                # Execute batch
                await asyncio.gather(*batch_tasks, return_exceptions=True)
                
                processed_users += len(batch)
                
                # Update progress every batch
                progress_embed.description = f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {processed_users}/{total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
                await interaction.edit_original_response(embed=progress_embed)
                
                # Small delay to avoid rate limits
                await asyncio.sleep(0.5)
            
            # Create final result embed
            result_embed = discord.Embed(
                title="‚úÖ –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                color=discord.Color.green()
            )
            
            role_names = [role.mention for role in self.roles_to_disband]
            result_embed.add_field(
                name="–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏",
                value=", ".join(role_names),
                inline=False
            )
            
            result_embed.add_field(
                name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                value=f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {processed_users}\n**–£—Å–ø–µ—à–Ω–æ:** {processed_users - len(failed_users)}\n**–û—à–∏–±–æ–∫:** {len(failed_users)}",
                inline=False
            )
            
            if failed_users:
                failed_mentions = [f"<@{user_id}>" for user_id in failed_users[:10]]  # Show max 10
                if len(failed_users) > 10:
                    failed_mentions.append(f"... –∏ –µ—â—ë {len(failed_users) - 10}")
                
                result_embed.add_field(
                    name="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å",
                    value=", ".join(failed_mentions),
                    inline=False
                )
            
            result_embed.set_footer(text=f"–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª: {self.admin_user.display_name}")
            result_embed.timestamp = discord.utils.utcnow()
            
            await interaction.edit_original_response(embed=result_embed)
            
            # Send audit log
            await self._send_audit_log(interaction.guild, processed_users - len(failed_users))
            
        except Exception as e:
            print(f"Error executing role disband: {e}")
            error_embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ–ª–µ–π.",
                color=discord.Color.red()
            )
            await interaction.edit_original_response(embed=error_embed, view=None)
    
    async def _remove_roles_from_user(self, user: discord.Member, failed_users: List[int]):
        """Remove roles from a single user"""
        try:
            roles_to_remove = []
            for role in self.roles_to_disband:
                if role in user.roles:
                    roles_to_remove.append(role)
            
            if roles_to_remove:
                await user.remove_roles(*roles_to_remove, reason=f"–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {self.admin_user}")
                print(f"‚úÖ Removed {len(roles_to_remove)} roles from {user.display_name}")
            
        except Exception as e:
            print(f"‚ùå Failed to remove roles from {user.display_name}: {e}")
            failed_users.append(user.id)
    
    async def _send_audit_log(self, guild: discord.Guild, successful_count: int):
        """Send audit log message"""
        try:
            config = load_config()
            audit_channel_id = config.get('audit_channel')
            
            if not audit_channel_id:
                print("No audit channel configured")
                return
            
            audit_channel = guild.get_channel(audit_channel_id)
            if not audit_channel:
                print(f"Audit channel not found: {audit_channel_id}")
                return
            
            # Create audit embed
            audit_embed = discord.Embed(
                title="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                description=f"{self.admin_user.mention} —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª —Ä–æ–ª–∏",
                color=discord.Color.blue()
            )
            
            role_names = [role.mention for role in self.roles_to_disband]
            audit_embed.add_field(
                name="–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏",
                value=", ".join(role_names),
                inline=False
            )
            
            audit_embed.add_field(
                name="–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                value=str(successful_count),
                inline=True
            )
            
            audit_embed.set_footer(text=f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.admin_user.id}")
            audit_embed.timestamp = discord.utils.utcnow()
            
            await audit_channel.send(embed=audit_embed)
            print(f"‚úÖ Sent audit log for role disband by {self.admin_user.display_name}")
            
        except Exception as e:
            print(f"‚ùå Error sending audit log: {e}")
    
    @discord.ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary, custom_id="cancel_disband")
    async def cancel_disband(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Handle cancellation of role disbanding"""
        try:
            # Check if the user who clicked is the same admin who initiated the command
            if interaction.user.id != self.admin_user.id:
                await interaction.response.send_message(
                    "‚ùå –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                    ephemeral=True
                )
                return
            
            # Create cancellation embed
            embed = discord.Embed(
                title="‚ùå –†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                description="–û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                color=discord.Color.red()
            )
            embed.set_footer(text=f"–û—Ç–º–µ–Ω–∏–ª: {self.admin_user.display_name}")
            
            await interaction.response.edit_message(embed=embed, view=None)
            
        except Exception as e:
            print(f"Error in role disband cancellation: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
                ephemeral=True
            )
    
    async def on_timeout(self):
        """Handle view timeout"""
        try:
            embed = discord.Embed(
                title="‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ",
                description="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                color=discord.Color.orange()
            )
            
            # Disable all buttons
            for item in self.children:
                item.disabled = True
            
            # Note: We can't edit the message here because we don't have interaction context
            # The timeout will just disable the buttons
            
        except Exception as e:
            print(f"Error handling role disband timeout: {e}")

    # ...existing code...
  
class RoleDisband(commands.Cog):
    """Cog for role disbanding functionality"""
    
    def __init__(self, bot):
        self.bot = bot
        print("üîß RoleDisband cog initialized")
    
    @app_commands.command(name="—Ä–∞—Å—Ñ–æ—Ä–º", description="–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ (—É–±—Ä–∞—Ç—å —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
    @app_commands.describe(
        —Ä–æ–ª—å1="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        —Ä–æ–ª—å2="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å3="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å4="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å5="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å6="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å7="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å8="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å9="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        —Ä–æ–ª—å10="–†–æ–ª—å –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )
    async def disband_roles(
        self, 
        interaction: discord.Interaction,
        —Ä–æ–ª—å1: discord.Role,
        —Ä–æ–ª—å2: discord.Role = None,
        —Ä–æ–ª—å3: discord.Role = None,
        —Ä–æ–ª—å4: discord.Role = None,
        —Ä–æ–ª—å5: discord.Role = None,
        —Ä–æ–ª—å6: discord.Role = None,
        —Ä–æ–ª—å7: discord.Role = None,
        —Ä–æ–ª—å8: discord.Role = None,
        —Ä–æ–ª—å9: discord.Role = None,
        —Ä–æ–ª—å10: discord.Role = None
    ):
        """Disband specified roles from all users"""
        print(f"üîß /—Ä–∞—Å—Ñ–æ—Ä–º command called by {interaction.user}")
        try:
            # Check admin permissions
            config = load_config()
            if not is_moderator_or_admin(interaction.user, config):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Collect all non-None roles
            all_roles = [—Ä–æ–ª—å1, —Ä–æ–ª—å2, —Ä–æ–ª—å3, —Ä–æ–ª—å4, —Ä–æ–ª—å5, —Ä–æ–ª—å6, —Ä–æ–ª—å7, —Ä–æ–ª—å8, —Ä–æ–ª—å9, —Ä–æ–ª—å10]
            roles_to_disband = [role for role in all_roles if role is not None]
            
            # Remove duplicates while preserving order
            seen = set()
            unique_roles = []
            for role in roles_to_disband:
                if role.id not in seen:
                    seen.add(role.id)
                    unique_roles.append(role)
            
            roles_to_disband = unique_roles
            
            print(f"üîß Roles to disband: {[role.name for role in roles_to_disband]}")
            
            if not roles_to_disband:
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Filter out protected roles
            protected_roles, allowed_roles = self._filter_protected_roles(roles_to_disband, interaction.guild.me, config)
            
            if not allowed_roles:
                embed = discord.Embed(
                    title="‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å",
                    description="–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    color=discord.Color.red()
                )
                
                if protected_roles:
                    protected_names = [role.mention for role in protected_roles]
                    embed.add_field(
                        name="–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏",
                        value=", ".join(protected_names),
                        inline=False
                    )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Find all users with these roles
            affected_users = self._find_affected_users(allowed_roles, interaction.guild)
            
            # Create confirmation embed
            embed = discord.Embed(
                title="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                description="**–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
                color=discord.Color.orange()
            )
            
            role_names = [role.mention for role in allowed_roles]
            embed.add_field(
                name="–†–æ–ª–∏ –¥–ª—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                value=", ".join(role_names),
                inline=False
            )
            
            embed.add_field(
                name="–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                value=str(len(affected_users)),
                inline=True
            )
            
            if protected_roles:
                protected_names = [role.mention for role in protected_roles]
                embed.add_field(
                    name="‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ) —Ä–æ–ª–∏",
                    value=", ".join(protected_names),
                    inline=False
                )
            
            embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # Create view with confirmation button
            view = RoleDisbandView(allowed_roles, interaction.user, affected_users)
            
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except Exception as e:
            print(f"Error in disband_roles command: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.",
                ephemeral=True
            )
    
    def _filter_protected_roles(self, roles: List[discord.Role], bot_member: discord.Member, config: dict) -> tuple[List[discord.Role], List[discord.Role]]:
        """Filter out protected roles that cannot be disbanded"""
        protected_roles = []
        allowed_roles = []
        
        bot_top_role = bot_member.top_role
        
        for role in roles:
            is_protected = False
            
            # Check if role is higher than bot's role
            if role.position >= bot_top_role.position:
                is_protected = True
            
            # Check if role has administrator permissions
            elif role.permissions.administrator:
                is_protected = True
            
            # Check if role is in moderator roles (bot admin roles)
            elif role.id in config.get('moderator_roles', []):
                is_protected = True
            
            # Check if it's @everyone
            elif role.is_default():
                is_protected = True
            
            if is_protected:
                protected_roles.append(role)
            else:
                allowed_roles.append(role)
        
        return protected_roles, allowed_roles
    
    def _find_affected_users(self, roles: List[discord.Role], guild: discord.Guild) -> List[discord.Member]:
        """Find all users who have any of the specified roles"""
        affected_users = set()
        
        for role in roles:
            for member in role.members:
                if not member.bot:  # Skip bots
                    affected_users.add(member)
        
        return list(affected_users)


async def setup(bot):
    """Setup function for the cog"""
    # Add the cog first
    await bot.add_cog(RoleDisband(bot))
    print("Loaded role disband cog successfully")
