#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from utils.user_cache import get_cache_statistics, get_cached_user_info
from utils.user_database import UserDatabase

async def final_cache_test():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
      # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    initial_stats = get_cache_statistics()
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print(f"   –†–∞–∑–º–µ—Ä: {initial_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   Hit Rate: {initial_stats['hit_rate_percent']:.1f}%")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã...")
    test_user_id = "123456789"
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (miss)
    start_time = asyncio.get_event_loop().time()
    result1 = await get_cached_user_info(test_user_id)
    time1 = asyncio.get_event_loop().time() - start_time
    
    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (hit)
    start_time = asyncio.get_event_loop().time()
    result2 = await get_cached_user_info(test_user_id)
    time2 = asyncio.get_event_loop().time() - start_time
    
    print(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {time1:.3f}—Å (cache miss)")
    print(f"   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {time2:.3f}—Å (cache hit)")
    if time1 > 0:
        speedup = time1 / time2 if time2 > 0 else float('inf')
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
      # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    final_stats = get_cache_statistics()
    print(f"\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print(f"   –†–∞–∑–º–µ—Ä: {final_stats['cache_size']} –∑–∞–ø–∏—Å–µ–π")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {final_stats['total_requests']}")
    print(f"   –ü–æ–ø–∞–¥–∞–Ω–∏—è: {final_stats['hits']}")
    print(f"   –ü—Ä–æ–º–∞—Ö–∏: {final_stats['misses']}")
    print(f"   Hit Rate: {final_stats['hit_rate_percent']:.1f}%")
    
    print(f"\n‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    return final_stats

async def main():
    try:
        await final_cache_test()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
