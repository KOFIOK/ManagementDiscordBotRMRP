"""
Department Application Forms - Modal forms for department applications
"""
import discord
from discord import ui
from typing import Dict, Any
import logging
from datetime import datetime

from utils.user_database import UserDatabase
from utils.ping_manager import ping_manager

logger = logging.getLogger(__name__)

class DepartmentApplicationModal(ui.Modal):
    """Modal for department applications with auto-filled IC data"""
    
    def __init__(self, department_code: str, application_type: str, user_ic_data: Dict[str, Any]):
        self.department_code = department_code
        self.application_type = application_type  # 'join' or 'transfer'
        self.user_ic_data = user_ic_data
        
        title = f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {department_code}"
        if application_type == 'transfer':
            title += " (–ü–µ—Ä–µ–≤–æ–¥)"
        
        super().__init__(title=title, timeout=300)
        
        # Pre-fill IC data
        self._setup_fields()
    
    def _setup_fields(self):
        """Setup form fields with auto-filled IC data"""
        
        # IC Fields (auto-filled, read-only style)
        ic_name = self.user_ic_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ic_rank = self.user_ic_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ic_position = self.user_ic_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ic_department = self.user_ic_data.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # Combine IC info into one field to save space
        ic_info = f"–§–ò–û: {ic_name}\n–ó–≤–∞–Ω–∏–µ: {ic_rank}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {ic_position}"
        if self.application_type == 'transfer':
            ic_info += f"\n–¢–µ–∫—É—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {ic_department}"
        
        self.ic_data_field = ui.TextInput(
            label="IC –î–∞–Ω–Ω—ã–µ (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)",
            default=ic_info,
            style=discord.TextStyle.paragraph,
            max_length=500,
            required=True
        )
        self.add_item(self.ic_data_field)
        
        # OOC Fields
        self.ooc_name = ui.TextInput(
            label="OOC –ò–º—è",
            placeholder="–í–∞—à–µ –∏–º—è –≤ Discord",
            max_length=100,
            required=True
        )
        self.add_item(self.ooc_name)
        
        self.ooc_age = ui.TextInput(
            label="–í–æ–∑—Ä–∞—Å—Ç (OOC)",
            placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç",
            max_length=3,
            required=True
        )
        self.add_item(self.ooc_age)
        
        self.motivation = ui.TextInput(
            label="–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ?",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=True
        )
        self.add_item(self.motivation)
        
        self.additional_info = ui.TextInput(
            label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            style=discord.TextStyle.paragraph,
            max_length=500,
            required=False
        )
        self.add_item(self.additional_info)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle form submission"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Parse IC data from the field
            ic_lines = self.ic_data_field.value.split('\n')
            ic_data = {}
            for line in ic_lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    ic_data[key.strip()] = value.strip()
            
            # Create application data
            application_data = {
                'user_id': interaction.user.id,
                'department_code': self.department_code,
                'application_type': self.application_type,
                'ic_data': ic_data,
                'ooc_data': {
                    'name': self.ooc_name.value,
                    'age': self.ooc_age.value,
                    'motivation': self.motivation.value,
                    'additional_info': self.additional_info.value
                },
                'timestamp': datetime.utcnow().isoformat(),
                'status': 'pending'
            }
            
            # Get department channel
            channel_id = ping_manager.get_department_channel_id(self.department_code)
            if not channel_id:
                await interaction.followup.send(
                    "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            channel = interaction.guild.get_channel(channel_id)
            if not channel:
                await interaction.followup.send(
                    "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create application embed
            embed = self._create_application_embed(application_data, interaction.user)
            
            # Create application view with moderation buttons
            from .views import DepartmentApplicationView
            view = DepartmentApplicationView(application_data)
            
            # Send application to department channel
            message = await channel.send(embed=embed, view=view)
            
            # Store application data with message ID
            application_data['message_id'] = message.id
            application_data['channel_id'] = channel.id
            
            # Store in config/database (you might want to use a proper database)
            await self._store_application(application_data)
            
            # Get ping roles and send notification
            ping_roles = ping_manager.get_ping_roles_for_context(
                self.department_code, 
                'applications', 
                interaction.guild
            )
            
            if ping_roles:
                ping_mentions = [role.mention for role in ping_roles]
                ping_message = f"üìã –ù–æ–≤–∞—è –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ **{self.department_code}**\n"
                ping_message += f"–ü–∏–Ω–≥–∏: {' '.join(ping_mentions)}"
                
                await channel.send(ping_message, delete_after=30)
            
            # Confirm to user
            await interaction.followup.send(
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ **{self.department_code}** –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
                f"–û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error submitting department application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    def _create_application_embed(self, application_data: Dict, user: discord.Member) -> discord.Embed:
        """Create embed for the application"""
        
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if application_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"{app_type_text} –≤ {application_data['department_code']}",
            color=discord.Color.blue(),
            timestamp=datetime.fromisoformat(application_data['timestamp'])
        )
        
        # User info
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        # IC Data
        ic_info = ""
        for key, value in application_data['ic_data'].items():
            ic_info += f"**{key}:** {value}\n"
        
        embed.add_field(
            name="üìã IC –î–∞–Ω–Ω—ã–µ",
            value=ic_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            inline=False
        )
        
        # OOC Data
        ooc_data = application_data['ooc_data']
        ooc_info = f"**OOC –ò–º—è:** {ooc_data['name']}\n"
        ooc_info += f"**–í–æ–∑—Ä–∞—Å—Ç:** {ooc_data['age']}\n"
        
        embed.add_field(
            name="üë§ OOC –î–∞–Ω–Ω—ã–µ",
            value=ooc_info,
            inline=False
        )
        
        # Motivation
        embed.add_field(
            name="üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            value=ooc_data['motivation'],
            inline=False
        )
        
        # Additional info
        if ooc_data.get('additional_info'):
            embed.add_field(
                name="‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value=ooc_data['additional_info'],
                inline=False
            )
        
        # Status
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value="üîÑ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
            inline=True
        )
        
        embed.set_footer(text=f"ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {application_data['user_id']}")
        
        return embed
    
    async def _store_application(self, application_data: Dict):
        """Store application data (implement proper storage)"""
        # This is a placeholder - you might want to use a proper database
        # For now, we could store in a JSON file or extend the config system
        pass

class DepartmentApplicationSelectModal(ui.Modal):
    """Simple modal for selecting join/transfer option"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        super().__init__(title=f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {department_code}", timeout=300)
        
        self.selection = ui.TextInput(
            label="–¢–∏–ø –∑–∞—è–≤–ª–µ–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ '–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ' –∏–ª–∏ '–ø–µ—Ä–µ–≤–æ–¥'",
            max_length=20,
            required=True
        )
        self.add_item(self.selection)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle selection and proceed to main form"""
        try:
            selection = self.selection.value.lower().strip()
            
            if selection in ['–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ', 'join']:
                app_type = 'join'
            elif selection in ['–ø–µ—Ä–µ–≤–æ–¥', 'transfer']:
                app_type = 'transfer'
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ '–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ' –∏–ª–∏ '–ø–µ—Ä–µ–≤–æ–¥'.",
                    ephemeral=True
                )
                return
            
            # Get user IC data
            user_data = await UserDatabase.get_user_info(interaction.user.id)
            if not user_data:
                await interaction.response.send_message(
                    "‚ùå –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create and send main application modal
            modal = DepartmentApplicationModal(self.department_code, app_type, user_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            logger.error(f"Error in department application select: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
