"""
Department Application Forms - Two-stage modal forms for department applications
"""
import discord
from discord import ui
import re
import asyncio
from typing import Dict, Any
import logging
from datetime import datetime, timezone, timedelta

from utils.user_database import UserDatabase
from utils.ping_manager import ping_manager

logger = logging.getLogger(__name__)


class DepartmentApplicationStage1Modal(ui.Modal):
    """Stage 1: IC Information modal for department applications"""
    
    def __init__(self, department_code: str, application_type: str, user_ic_data: Dict[str, Any]):
        self.department_code = department_code
        self.application_type = application_type  # 'join' or 'transfer'
        self.user_ic_data = user_ic_data
        
        title = f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {department_code} - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        if application_type == 'transfer':
            title += " (–ü–µ—Ä–µ–≤–æ–¥)"
        
        super().__init__(title=title, timeout=300)
        
        # Pre-fill IC data from Google Sheets
        self._setup_fields()
    
    def _setup_fields(self):
        """Setup form fields with auto-filled IC data"""
        
        # Auto-fill from user database
        ic_first_name = self.user_ic_data.get('first_name', '')
        ic_last_name = self.user_ic_data.get('last_name', '')
        ic_static = self.user_ic_data.get('static', '')
        
        # Full name field
        full_name = f"{ic_first_name} {ic_last_name}".strip()
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            default=full_name,
            max_length=100,
            required=True
        )
        self.add_item(self.name_input)
        
        # Static field with auto-formatting
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123456 –∏–ª–∏ 123-456",
            default=ic_static,
            max_length=10,
            required=True
        )
        self.add_item(self.static_input)
        
        # Document copy (link to image)
        self.document_input = ui.TextInput(
            label="–ö—Å–µ—Ä–æ–∫–æ–ø–∏—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            style=discord.TextStyle.short,
            max_length=500,
            required=True
        )
        self.add_item(self.document_input)
        
        # Reason for department choice
        self.reason_input = ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            placeholder="–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=True
        )
        self.add_item(self.reason_input)
    
    def format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle Stage 1 submission"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Validate static
            formatted_static = self.format_static(self.static_input.value)
            if not formatted_static:
                await interaction.followup.send(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏–∫–∞**\n"
                    "–°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:** `123456` ‚Üí `123-456`, `12345` ‚Üí `12-345`",
                    ephemeral=True
                )
                return
            
            # Validate document link
            document_url = self.document_input.value.strip()
            if not self._validate_url(document_url):
                await interaction.followup.send(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏**\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    ephemeral=True
                )
                return
            
            # Store Stage 1 data
            stage1_data = {
                'name': self.name_input.value.strip(),
                'static': formatted_static,
                'document_url': document_url,
                'reason': self.reason_input.value.strip(),
                'department_code': self.department_code,
                'application_type': self.application_type
            }
            
            # Create draft embed
            draft_embed = self._create_draft_embed(stage1_data, interaction.user)
            
            # Create view with continue/cancel buttons
            view = Stage1ReviewView(stage1_data)
            
            await interaction.followup.send(
                "üìã **–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–ª–µ–Ω–∏—è - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                embed=draft_embed,
                view=view,
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error in Stage 1 application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    def _validate_url(self, url: str) -> bool:
        """Validate if URL is a valid link"""
        if not url:
            return False
        
        # Basic URL validation
        url_lower = url.lower()
        return (
            url.startswith(('http://', 'https://')) or
            url.startswith('https://cdn.discordapp.com/') or
            url.startswith('https://media.discordapp.net/')
        )
    
    def _create_draft_embed(self, stage1_data: Dict, user: discord.Member) -> discord.Embed:
        """Create draft embed for Stage 1 data"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if stage1_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"üìã –ß–µ—Ä–Ω–æ–≤–∏–∫: {app_type_text} –≤ {stage1_data['department_code']}",
            description="**–≠—Ç–∞–ø 1: IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**",
            color=discord.Color.orange(),
            timestamp=datetime.now(timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        embed.add_field(
            name="üë§ –ò–º—è –§–∞–º–∏–ª–∏—è",
            value=stage1_data['name'],
            inline=True
        )
        
        embed.add_field(
            name="üè∑Ô∏è –°—Ç–∞—Ç–∏–∫",
            value=stage1_data['static'],
            inline=True
        )
        
        embed.add_field(
            name="üìÑ –î–æ–∫—É–º–µ–Ω—Ç",
            value=f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç]({stage1_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=stage1_data['reason'],
            inline=False
        )
        
        embed.set_footer(text="–≠—Ç–∞–ø 1/2 - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        
        return embed


class Stage1ReviewView(ui.View):
    """View for reviewing Stage 1 data with continue/cancel options"""
    
    def __init__(self, stage1_data: Dict):
        super().__init__(timeout=300)
        self.stage1_data = stage1_data
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        """Cancel the application"""
        await interaction.response.edit_message(
            content="‚ùå **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
                   "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
                   "*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...*",
            embed=None,
            view=None
        )
        
        # Delete the ephemeral message after a short delay
        await asyncio.sleep(5)
        try:
            await interaction.delete_original_response()
        except discord.NotFound:
            pass  # Message already deleted
    
    @ui.button(label="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", style=discord.ButtonStyle.green)
    async def continue_button(self, interaction: discord.Interaction, button: ui.Button):
        """Continue to Stage 2"""
        try:
            # Create Stage 2 modal
            modal = DepartmentApplicationStage2Modal(self.stage1_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            logger.error(f"Error proceeding to Stage 2: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.",
                ephemeral=True
            )


class DepartmentApplicationStage2Modal(ui.Modal):
    """Stage 2: OOC Information modal for department applications"""
    
    def __init__(self, stage1_data: Dict):
        self.stage1_data = stage1_data
        
        super().__init__(
            title=f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {stage1_data['department_code']} - OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            timeout=300
        )
        
        self._setup_fields()
    
    def _setup_fields(self):
        """Setup OOC fields"""
        
        self.real_name_input = ui.TextInput(
            label="–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è",
            placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ",
            max_length=50,
            required=True
        )
        self.add_item(self.real_name_input)
        
        self.age_input = ui.TextInput(
            label="–í–æ–∑—Ä–∞—Å—Ç",
            placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)",
            max_length=20,
            required=True
        )
        self.add_item(self.age_input)
        
        self.timezone_input = ui.TextInput(
            label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            placeholder="UTC+3 (–ú–°–ö), UTC+5, UTC+7 –∏ —Ç.–¥.",
            max_length=20,
            required=True
        )
        self.add_item(self.timezone_input)
        
        self.online_hours_input = ui.TextInput(
            label="–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å",
            placeholder="–ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ",
            max_length=50,
            required=True
        )
        self.add_item(self.online_hours_input)
        
        self.prime_time_input = ui.TextInput(
            label="–ü—Ä–∞–π–º-—Ç–∞–π–º",
            placeholder="–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –æ–±—ã—á–Ω–æ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã",
            max_length=100,
            required=True
        )
        self.add_item(self.prime_time_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle Stage 2 submission and create final application"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Get age value (no validation)
            age_value = self.age_input.value.strip()
            
            # Combine all data
            complete_application_data = {
                **self.stage1_data,
                'ooc_data': {
                    'real_name': self.real_name_input.value.strip(),
                    'age': age_value,
                    'timezone': self.timezone_input.value.strip(),
                    'online_hours': self.online_hours_input.value.strip(),
                    'prime_time': self.prime_time_input.value.strip()
                },
                'user_id': interaction.user.id,
                'timestamp': datetime.now(timezone(timedelta(hours=3))).isoformat(),
                'status': 'pending'
            }
            
            # Create final draft embed
            final_embed = self._create_final_draft_embed(complete_application_data, interaction.user)
            
            # Create final review view
            view = FinalReviewView(complete_application_data)
            
            await interaction.followup.send(
                "üìã **–§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–ª–µ–Ω–∏—è**\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:",
                embed=final_embed,
                view=view,
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error in Stage 2 application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    def _create_final_draft_embed(self, application_data: Dict, user: discord.Member) -> discord.Embed:
        """Create final draft embed with all data"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if application_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"üìã {app_type_text} –≤ {application_data['department_code']}",
            description="**–§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ - –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ**",
            color=discord.Color.blue(),
            timestamp=datetime.fromisoformat(application_data['timestamp']).replace(tzinfo=timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        # IC Data
        embed.add_field(
            name="üìã IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {application_data['name']}\n"
                  f"**–°—Ç–∞—Ç–∏–∫:** {application_data['static']}\n"
                  f"**–î–æ–∫—É–º–µ–Ω—Ç:** [–°—Å—ã–ª–∫–∞]({application_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=application_data['reason'],
            inline=False
        )
        
        # OOC Data
        ooc_data = application_data['ooc_data']
        embed.add_field(
            name="üë§ OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {ooc_data['real_name']}\n"
                  f"**–í–æ–∑—Ä–∞—Å—Ç:** {ooc_data['age']}\n"
                  f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {ooc_data['timezone']}\n"
                  f"**–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å:** {ooc_data['online_hours']}\n"
                  f"**–ü—Ä–∞–π–º-—Ç–∞–π–º:** {ooc_data['prime_time']}",
            inline=False
        )
        
        embed.set_footer(text="–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        
        return embed


class FinalReviewView(ui.View):
    """Final review view with send/cancel options"""
    
    def __init__(self, application_data: Dict):
        super().__init__(timeout=300)
        self.application_data = application_data
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        """Cancel the application"""
        await interaction.response.edit_message(
            content="‚ùå **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
                   "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
                   "*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...*",
            embed=None,
            view=None
        )
        
        # Delete the ephemeral message after a short delay
        await asyncio.sleep(5)
        try:
            await interaction.delete_original_response()
        except discord.NotFound:
            pass  # Message already deleted
    
    @ui.button(label="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.green)
    async def send_button(self, interaction: discord.Interaction, button: ui.Button):
        """Send the final application"""
        try:
            await interaction.response.defer()
            
            # Check for duplicate applications before sending
            from .views import check_user_active_applications
            active_check = await check_user_active_applications(
                interaction.guild, 
                interaction.user.id
            )
            
            if active_check['has_active']:
                departments_list = ", ".join(active_check['departments'])
                await interaction.edit_original_response(
                    content=f"‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**\n\n"
                            f"üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: **{departments_list}**\n"
                            f"‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –Ω–æ–≤–æ–≥–æ.\n\n"
                            f"üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.",
                    embed=None,
                    view=None
                )
                return
            
            # Get department channel
            channel_id = ping_manager.get_department_channel_id(self.application_data['department_code'])
            if not channel_id:
                await interaction.edit_original_response(
                    content="‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    embed=None,
                    view=None
                )
                return
            
            channel = interaction.guild.get_channel(channel_id)
            if not channel:
                await interaction.edit_original_response(
                    content="‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    embed=None,
                    view=None
                )
                return
            
            # Create application embed for moderation
            embed = self._create_moderation_embed(self.application_data, interaction.user)
            
            # Create moderation view
            from .views import DepartmentApplicationView
            view = DepartmentApplicationView(self.application_data)
            
            # Prepare content with pings for target department
            content = self._create_application_content(interaction.user, interaction.guild)
            
            # Send to department channel
            message = await channel.send(content=content, embed=embed, view=view)
            
            # Store application data
            self.application_data['message_id'] = message.id
            self.application_data['channel_id'] = channel.id
            
            # Confirm to user and delete the ephemeral message
            await interaction.edit_original_response(
                content=f"‚úÖ **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n"
                        f"–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ **{self.application_data['department_code']}** "
                        f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
                        f"üìç –ö–∞–Ω–∞–ª: {channel.mention}\n"
                        f"‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–±—ã—á–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤\n\n"
                        f"*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...*",
                embed=None,
                view=None
            )
            
            # Delete the ephemeral message after a short delay
            await asyncio.sleep(10)
            try:
                await interaction.delete_original_response()
            except discord.NotFound:
                pass  # Message already deleted
            
        except Exception as e:
            logger.error(f"Error sending application: {e}")
            await interaction.edit_original_response(
                content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                embed=None,
                view=None
            )
    
    def _create_moderation_embed(self, application_data: Dict, user: discord.Member) -> discord.Embed:
        """Create embed for moderation"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if application_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"{app_type_text} –≤ {application_data['department_code']}",
            color=discord.Color.blue(),
            timestamp=datetime.fromisoformat(application_data['timestamp']).replace(tzinfo=timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        # IC Information
        embed.add_field(
            name="üìã IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è –§–∞–º–∏–ª–∏—è:** {application_data['name']}\n"
                  f"**–°—Ç–∞—Ç–∏–∫:** {application_data['static']}\n"
                  f"**–î–æ–∫—É–º–µ–Ω—Ç:** [–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç]({application_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=application_data['reason'],
            inline=False
        )
        
        # OOC Information
        ooc_data = application_data['ooc_data']
        embed.add_field(
            name="üë§ OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {ooc_data['real_name']}\n"
                  f"**–í–æ–∑—Ä–∞—Å—Ç:** {ooc_data['age']}\n"
                  f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {ooc_data['timezone']}\n"
                  f"**–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å:** {ooc_data['online_hours']}\n"
                  f"**–ü—Ä–∞–π–º-—Ç–∞–π–º:** {ooc_data['prime_time']}",
            inline=False
        )
        
        # Status
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value="üîÑ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
            inline=True
        )
        
        embed.set_footer(text=f"ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {application_data['user_id']}")
        
        return embed
    
    def _create_application_content(self, user: discord.Member, guild: discord.Guild) -> str:
        """
        Create content with pings for the application message
        
        For new applications: ping roles for target department  
        For transfers: ping roles for target department + current department
        """
        from utils.ping_manager import PingManager
        ping_manager = PingManager()
        
        content_lines = []
        
        # Get ping roles for target department (where application is being submitted)
        target_ping_roles = ping_manager.get_ping_roles_for_context(
            self.application_data['department_code'], 
            'applications', 
            guild
        )
        
        if target_ping_roles:
            target_mentions = [role.mention for role in target_ping_roles]
            content_lines.append(' '.join(target_mentions))
        
        # Check if this is a transfer (user has current department)
        current_department = ping_manager.get_user_department_code(user)
        if current_department and current_department != self.application_data['department_code']:
            # This is a transfer - add pings for current department on second line
            current_ping_roles = ping_manager.get_ping_roles_for_context(
                current_department,
                'applications',  # –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'general'
                guild
            )
            
            if current_ping_roles:
                current_mentions = [role.mention for role in current_ping_roles]
                content_lines.append(' '.join(current_mentions))
        
        return '\n'.join(content_lines) if content_lines else ""
