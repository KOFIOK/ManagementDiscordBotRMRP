"""
Department Application Forms - Two-stage modal forms for department applications
"""
import discord
from discord import ui
import re
import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime, timezone, timedelta

from utils.database_manager import personnel_manager
from utils.ping_manager import ping_manager

logger = logging.getLogger(__name__)


class DepartmentApplicationStage1Modal(ui.Modal):
    """Stage 1: IC Information modal for department applications"""
    
    def __init__(self, department_code: str, application_type: str, user_id: int, skip_data_loading: bool = False):
        self.department_code = department_code
        self.application_type = application_type  # 'join' or 'transfer'
        self.user_id = user_id
        self.user_ic_data = None  # –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.skip_data_loading = skip_data_loading
        
        title = f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {department_code} - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        if application_type == 'transfer':
            title += " (–ü–µ—Ä–µ–≤–æ–¥)"
        
        super().__init__(title=title, timeout=300)
        
        if not skip_data_loading:
            # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
            self._try_load_user_data_sync()
        else:
            # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –í–°–ï–ì–î–ê –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            # –ö—ç—à –±—ã—Å—Ç—Ä—ã–π (–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π), –Ω–µ –∑–∞–º–µ–¥–ª–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            logger.info(f"‚ö° Fast initialization for user {user_id} - loading from cache only")
            self._try_load_from_cache_only()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å) –∏–ª–∏ –ø—É—Å—Ç—ã–µ
        self._setup_fields_with_data()
    
    def _try_load_from_cache_only(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –∏–∑ –∫—ç—à–∞ - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API –∫—ç—à–∞
            cache_data = self._try_load_from_cache_public()
            if cache_data:
                self.user_ic_data = cache_data
                logger.info(f"‚ö° User data loaded from cache for {self.user_id} - form will be autofilled")
            else:
                logger.info(f"‚ÑπÔ∏è  No cached data for {self.user_id} - form will be empty (can load async later)")
                self.user_ic_data = None
                
        except Exception as e:
            logger.error(f"üí• Error in cache-only loading for {self.user_id}: {e}")
            self.user_ic_data = None

    def _try_load_user_data_sync(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –∑–∞—Ç–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑ –±–∞–∑—ã"""
        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–±—ã—Å—Ç—Ä–æ)
            cache_data = self._try_load_from_cache()
            if cache_data:
                self.user_ic_data = cache_data
                logger.info(f"‚úÖ User data loaded from cache for {self.user_id} - form will be autofilled")
                return
            
            # –®–∞–≥ 2: –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã
            try:
                loop = asyncio.get_running_loop()
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω - –Ω–µ –º–æ–∂–µ–º –¥–µ–ª–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ –±–∞–∑—ã
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏—Ç –≤—Ä—É—á–Ω—É—é
                logger.info(f"‚ÑπÔ∏è  No cached data for {self.user_id}, event loop running - form will be empty")
                self.user_ic_data = None
                return
            except RuntimeError:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ loop - –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã
                logger.info(f"‚ÑπÔ∏è  No cached data for {self.user_id}, trying database load...")
                self._try_load_from_database_sync()
                
        except Exception as e:
            logger.error(f"üí• Critical error in sync data loading for {self.user_id}: {e}")
            self.user_ic_data = None
    
    def _try_load_from_cache_public(self) -> Optional[Dict[str, Any]]:
        """–ü—É–±–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—ç—à–∞ —á–µ—Ä–µ–∑ API"""
        try:
            from utils.user_cache import get_cached_user_info_sync
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API –∫—ç—à–∞
            cached_data = get_cached_user_info_sync(self.user_id)
            if cached_data:
                logger.info(f"‚úÖ Cache data found for user {self.user_id}")
                return cached_data
            else:
                logger.info(f"‚ÑπÔ∏è  No cached data for user {self.user_id}")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå Error accessing cache for {self.user_id}: {e}")
            # Fallback –∫ –ø—Ä—è–º–æ–º—É –¥–æ—Å—Ç—É–ø—É
            return self._try_load_from_cache_direct()
    
    def _try_load_from_cache(self) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        return self._try_load_from_cache_direct()
    
    def _try_load_from_cache_direct(self) -> Optional[Dict[str, Any]]:
        """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫—ç—à—É"""
        try:
            from utils.user_cache import _global_cache
            
            # –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫—ç—à—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            if hasattr(_global_cache, '_cache') and self.user_id in _global_cache._cache:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫—ç—à
                if hasattr(_global_cache, '_expiry') and self.user_id in _global_cache._expiry:
                    if _global_cache._expiry[self.user_id] > datetime.now():
                        cached_data = _global_cache._cache[self.user_id]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–∞—Ä–∫–µ—Ä "NOT_FOUND"
                        if cached_data and cached_data != "NOT_FOUND":
                            return cached_data
                        else:
                            logger.info(f"‚ÑπÔ∏è  User {self.user_id} marked as NOT_FOUND in cache")
                            return None
                    else:
                        logger.info(f"‚ÑπÔ∏è  Cached data for {self.user_id} expired")
                        return None
                else:
                    # –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ - —Å—á–∏—Ç–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
                    return None
            else:
                logger.info(f"‚ÑπÔ∏è  No cached data for user {self.user_id}")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå Error accessing cache for {self.user_id}: {e}")
            return None
    
    def _try_load_from_database_sync(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç event loop)"""
        try:
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            try:
                task = asyncio.create_task(self._load_user_data_fast())
                start_time = loop.time()
                self.user_ic_data = loop.run_until_complete(asyncio.wait_for(task, timeout=3.0))
                load_time = loop.time() - start_time
                
                if self.user_ic_data:
                    logger.info(f"‚úÖ User data loaded from database for {self.user_id} in {load_time:.3f}s - form will be autofilled")
                else:
                    logger.info(f"‚ÑπÔ∏è  User {self.user_id} not found in database in {load_time:.3f}s - form will be empty")
                    
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ Timeout (>3s) loading user data from database for {self.user_id} - form will be empty")
                self.user_ic_data = None
            except Exception as e:
                logger.warning(f"‚ùå Error loading user data from database for {self.user_id}: {e} - form will be empty")
                self.user_ic_data = None
                
        except Exception as e:
            logger.error(f"üí• Critical error in database sync loading for {self.user_id}: {e}")
            self.user_ic_data = None
    
    async def _load_user_data_fast(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å –∫—ç—à–µ–º"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            from utils.user_cache import get_cached_user_info
            cached_data = await get_cached_user_info(self.user_id)
            
            if cached_data:
                logger.info(f"‚úÖ User data loaded from cache for {self.user_id}")
                return cached_data
            
            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
            from utils.database_manager import PersonnelManager
            pm = PersonnelManager()
            user_data = await pm.get_personnel_summary(self.user_id)
            if user_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –∫—ç—à–µ–º)
                formatted_data = {
                    'full_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                    'static': user_data.get('static', ''),
                    'first_name': user_data.get('first_name', ''),  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'last_name': user_data.get('last_name', ''),   # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),  # –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
                    'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),     # –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
                    'department': user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')  # –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
                }
                logger.info(f"‚úÖ User data loaded from database for {self.user_id}")
                return formatted_data
                
        except Exception as e:
            logger.error(f"‚ùå Error loading user data for {self.user_id}: {e}")
        
        return None
    
    def _setup_fields_with_data(self):
        """Setup form fields with loaded data or empty if not available"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        default_name = ""
        default_static = ""
        
        if self.user_ic_data:
            # –î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ/–∫—ç—à–µ - –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ full_name, —Ç–∞–∫ –∏ first_name/last_name)
            full_name = ""
            if 'full_name' in self.user_ic_data:
                # –î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                full_name = self.user_ic_data.get('full_name', '')
            else:
                # –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                ic_first_name = self.user_ic_data.get('first_name', '')
                ic_last_name = self.user_ic_data.get('last_name', '')
                full_name = f"{ic_first_name} {ic_last_name}".strip()
            
            ic_static = self.user_ic_data.get('static', '')
            
            if full_name:
                default_name = full_name
                name_placeholder = f"‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {full_name}"
                logger.info(f"‚ö° Autofilled name for {self.user_id}: {full_name}")
            else:
                name_placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –§–∞–º–∏–ª–∏—è"
            
            if ic_static:
                default_static = ic_static
                static_placeholder = f"‚úÖ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–æ: {ic_static}"
                logger.info(f"‚ö° Autofilled static for {self.user_id}: {ic_static}")
            else:
                static_placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏–∫ (123-456)"
        elif self.skip_data_loading:
            # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–∑–∂–µ
            name_placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤"
            static_placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456"
            logger.info(f"‚ÑπÔ∏è  Fast modal for {self.user_id} - autofill available on submit")
        else:
            # –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
            name_placeholder = "–Ω–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤"
            static_placeholder = "–Ω–∞–ø—Ä–∏–º–µ—Ä: 123-456"

        # Full name field
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder=name_placeholder,
            default=default_name,
            max_length=100,
            required=True
        )
        self.add_item(self.name_input)
        
        # Static field
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder=static_placeholder,
            default=default_static,
            max_length=10,
            required=True
        )
        self.add_item(self.static_input)
        
        # Document copy (link to image)
        self.document_input = ui.TextInput(
            label="–ö—Å–µ—Ä–æ–∫–æ–ø–∏—è —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            style=discord.TextStyle.short,
            max_length=500,
            required=True
        )
        self.add_item(self.document_input)
        
        # Reason for department choice
        self.reason_input = ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            placeholder="–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=True
        )
        self.add_item(self.reason_input)
    
    async def _load_user_data_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from utils.database_manager import PersonnelManager
            pm = PersonnelManager()
            user_data = await pm.get_personnel_summary(self.user_id)
            if user_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                self.user_ic_data = {
                    'full_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                    'static': user_data.get('static', ''),
                    'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'department': user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
                }
            
            if self.user_ic_data:
                # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã
                ic_first_name = self.user_ic_data.get('first_name', '')
                ic_last_name = self.user_ic_data.get('last_name', '')
                ic_static = self.user_ic_data.get('static', '')
                
                full_name = f"{ic_first_name} {ic_last_name}".strip()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å)
                if full_name and full_name.strip():
                    self.name_input.default = full_name
                    self.name_input.placeholder = "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –±–∞–∑—ã"
                
                if ic_static:
                    self.static_input.default = ic_static
                    self.static_input.placeholder = "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–∑ –±–∞–∑—ã"
                
                logger.info(f"Successfully loaded user data for {self.user_id}: {full_name}, {ic_static}")
            else:
                logger.warning(f"User {self.user_id} not found in personnel database - form will be empty")
                self.name_input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –§–∞–º–∏–ª–∏—è (–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ)"
                self.static_input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏–∫ (–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ)"
                
        except Exception as e:
            logger.error(f"Error loading user data for {self.user_id}: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø—É—Å—Ç—ã–º–∏
            self.name_input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –§–∞–º–∏–ª–∏—è (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)"
            self.static_input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏–∫ (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)"
    
    def format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle Stage 1 submission"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ó–ê–Ø–í–õ–ï–ù–ò–ô –í –ü–ï–†–í–£–Æ –û–ß–ï–†–ï–î–¨
            # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–µ—Å—å
            from .views import check_user_active_applications
            active_check = await check_user_active_applications(
                interaction.guild, 
                interaction.user.id
            )
            
            if active_check['has_active']:
                departments_list = ", ".join(active_check['departments'])
                await interaction.followup.send(
                    f"‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**\n\n"
                    f"üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: **{departments_list}**\n"
                    f"‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –Ω–æ–≤–æ–≥–æ.\n\n"
                    f"üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.",
                    ephemeral=True
                )
                return
            
            # –£–ú–ù–û–ï –ê–í–¢–û–ó–ê–ü–û–õ–ù–ï–ù–ò–ï - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ
            name_value = self.name_input.value.strip()
            static_value = self.static_input.value.strip()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∑–∞–ø–æ–ª–Ω–∏–ª –ø–æ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã
            if (not name_value or not static_value) and self.user_ic_data is None:
                logger.info(f"üîÑ User {self.user_id} has empty fields, trying to load from database...")
                await self._load_user_data_async()
                
                # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
                if self.user_ic_data:
                    ic_first_name = self.user_ic_data.get('first_name', '')
                    ic_last_name = self.user_ic_data.get('last_name', '')
                    ic_static = self.user_ic_data.get('static', '')
                    
                    full_name = f"{ic_first_name} {ic_last_name}".strip()
                    
                    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
                    if not name_value and full_name:
                        name_value = full_name
                        logger.info(f"‚úÖ Auto-filled name for {self.user_id}: {full_name}")
                    
                    if not static_value and ic_static:
                        static_value = ic_static  
                        logger.info(f"‚úÖ Auto-filled static for {self.user_id}: {ic_static}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
            if self.user_ic_data is None:
                await self._load_user_data_async()
            
            # Validate static - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            formatted_static = self.format_static(static_value)
            if not formatted_static:
                await interaction.followup.send(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏–∫–∞**\n"
                    "–°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:** `123456` ‚Üí `123-456`, `12345` ‚Üí `12-345`",
                    ephemeral=True
                )
                return
            
            # Validate document link
            document_url = self.document_input.value.strip()
            if not self._validate_url(document_url):
                await interaction.followup.send(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏**\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    ephemeral=True
                )
                return
            
            # Store Stage 1 data - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            stage1_data = {
                'name': name_value,
                'static': formatted_static,
                'document_url': document_url,
                'reason': self.reason_input.value.strip(),
                'department_code': self.department_code,
                'application_type': self.application_type
            }
            
            # Create draft embed
            draft_embed = self._create_draft_embed(stage1_data, interaction.user)
            
            # Create view with continue/cancel buttons
            view = Stage1ReviewView(stage1_data)
            
            await interaction.followup.send(
                "üìã **–ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–ª–µ–Ω–∏—è - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                embed=draft_embed,
                view=view,
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error in Stage 1 application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    def _validate_url(self, url: str) -> bool:
        """Validate if URL is a valid link"""
        if not url:
            return False
        
        # Basic URL validation
        url_lower = url.lower()
        return (
            url.startswith(('http://', 'https://')) or
            url.startswith('https://cdn.discordapp.com/') or
            url.startswith('https://media.discordapp.net/')
        )
    
    def _create_draft_embed(self, stage1_data: Dict, user: discord.Member) -> discord.Embed:
        """Create draft embed for Stage 1 data"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if stage1_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"üìã –ß–µ—Ä–Ω–æ–≤–∏–∫: {app_type_text} –≤ {stage1_data['department_code']}",
            description="**–≠—Ç–∞–ø 1: IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**",
            color=discord.Color.orange(),
            timestamp=datetime.now(timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        embed.add_field(
            name="üë§ –ò–º—è –§–∞–º–∏–ª–∏—è",
            value=stage1_data['name'],
            inline=True
        )
        
        embed.add_field(
            name="üè∑Ô∏è –°—Ç–∞—Ç–∏–∫",
            value=stage1_data['static'],
            inline=True
        )
        
        embed.add_field(
            name="üìÑ –î–æ–∫—É–º–µ–Ω—Ç",
            value=f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç]({stage1_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=stage1_data['reason'],
            inline=False
        )
        
        embed.set_footer(text="–≠—Ç–∞–ø 1/2 - IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        
        return embed


class Stage1ReviewView(ui.View):
    """View for reviewing Stage 1 data with continue/cancel options"""
    
    def __init__(self, stage1_data: Dict):
        super().__init__(timeout=300)
        self.stage1_data = stage1_data
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        """Cancel the application"""
        await interaction.response.edit_message(
            content="‚ùå **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
                   "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
                   "*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...*",
            embed=None,
            view=None
        )
        
        # Delete the ephemeral message after a short delay
        await asyncio.sleep(5)
        try:
            await interaction.delete_original_response()
        except discord.NotFound:
            pass  # Message already deleted
    
    @ui.button(label="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", style=discord.ButtonStyle.green)
    async def continue_button(self, interaction: discord.Interaction, button: ui.Button):
        """Continue to Stage 2"""
        try:
            # Create Stage 2 modal
            modal = DepartmentApplicationStage2Modal(self.stage1_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            logger.error(f"Error proceeding to Stage 2: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.",
                ephemeral=True
            )


class DepartmentApplicationStage2Modal(ui.Modal):
    """Stage 2: OOC Information modal for department applications"""
    
    def __init__(self, stage1_data: Dict):
        self.stage1_data = stage1_data
        
        super().__init__(
            title=f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ {stage1_data['department_code']} - OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            timeout=300
        )
        
        self._setup_fields()
    
    def _setup_fields(self):
        """Setup OOC fields"""
        
        self.real_name_input = ui.TextInput(
            label="–†–µ–∞–ª—å–Ω–æ–µ –∏–º—è",
            placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ",
            max_length=50,
            required=True
        )
        self.add_item(self.real_name_input)
        
        self.age_input = ui.TextInput(
            label="–í–æ–∑—Ä–∞—Å—Ç",
            placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)",
            max_length=20,
            required=True
        )
        self.add_item(self.age_input)
        
        self.timezone_input = ui.TextInput(
            label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            placeholder="–ú–°–ö, –ú–°–ö+3, –ú–°–ö-1 –∏ —Ç.–¥.",
            max_length=20,
            required=True
        )
        self.add_item(self.timezone_input)
        
        self.online_hours_input = ui.TextInput(
            label="–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å",
            placeholder="–ü—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ",
            max_length=50,
            required=True
        )
        self.add_item(self.online_hours_input)
        
        self.prime_time_input = ui.TextInput(
            label="–ü—Ä–∞–π–º-—Ç–∞–π–º",
            placeholder="–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –æ–±—ã—á–Ω–æ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã",
            max_length=100,
            required=True
        )
        self.add_item(self.prime_time_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle Stage 2 submission and create final application"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Get age value (no validation)
            age_value = self.age_input.value.strip()
            
            # Combine all data
            complete_application_data = {
                **self.stage1_data,
                'ooc_data': {
                    'real_name': self.real_name_input.value.strip(),
                    'age': age_value,
                    'timezone': self.timezone_input.value.strip(),
                    'online_hours': self.online_hours_input.value.strip(),
                    'prime_time': self.prime_time_input.value.strip()
                },
                'user_id': interaction.user.id,
                'timestamp': datetime.now(timezone(timedelta(hours=3))).isoformat(),
                'status': 'pending'
            }
            
            # Create final draft embed
            final_embed = self._create_final_draft_embed(complete_application_data, interaction.user)
            
            # Create final review view
            view = FinalReviewView(complete_application_data)
            
            await interaction.followup.send(
                "üìã **–§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–ª–µ–Ω–∏—è**\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:",
                embed=final_embed,
                view=view,
                ephemeral=True
            )
            
        except Exception as e:
            logger.error(f"Error in Stage 2 application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    def _create_final_draft_embed(self, application_data: Dict, user: discord.Member) -> discord.Embed:
        """Create final draft embed with all data"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if application_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            title=f"üìã {app_type_text} –≤ {application_data['department_code']}",
            description="**–§–∏–Ω–∞–ª—å–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ - –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ**",
            color=discord.Color.blue(),
            timestamp=datetime.fromisoformat(application_data['timestamp']).replace(tzinfo=timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        # IC Data
        embed.add_field(
            name="üìã IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {application_data['name']}\n"
                  f"**–°—Ç–∞—Ç–∏–∫:** {application_data['static']}\n"
                  f"**–î–æ–∫—É–º–µ–Ω—Ç:** [–°—Å—ã–ª–∫–∞]({application_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=application_data['reason'],
            inline=False
        )
        
        # OOC Data
        ooc_data = application_data['ooc_data']
        embed.add_field(
            name="üë§ OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {ooc_data['real_name']}\n"
                  f"**–í–æ–∑—Ä–∞—Å—Ç:** {ooc_data['age']}\n"
                  f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {ooc_data['timezone']}\n"
                  f"**–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å:** {ooc_data['online_hours']}\n"
                  f"**–ü—Ä–∞–π–º-—Ç–∞–π–º:** {ooc_data['prime_time']}",
            inline=False
        )
        
        embed.set_footer(text="–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        
        return embed


class FinalReviewView(ui.View):
    """Final review view with send/cancel options"""
    
    def __init__(self, application_data: Dict):
        super().__init__(timeout=300)
        self.application_data = application_data
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        """Cancel the application"""
        await interaction.response.edit_message(
            content="‚ùå **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n"
                   "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
                   "*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...*",
            embed=None,
            view=None
        )
        
        # Delete the ephemeral message after a short delay
        await asyncio.sleep(5)
        try:
            await interaction.delete_original_response()
        except discord.NotFound:
            pass  # Message already deleted
    
    @ui.button(label="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.green)
    async def send_button(self, interaction: discord.Interaction, button: ui.Button):
        """Send the final application"""
        try:
            await interaction.response.defer()
            
            # Check for duplicate applications before sending
            from .views import check_user_active_applications
            active_check = await check_user_active_applications(
                interaction.guild, 
                interaction.user.id
            )
            
            if active_check['has_active']:
                departments_list = ", ".join(active_check['departments'])
                await interaction.edit_original_response(
                    content=f"‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏**\n\n"
                            f"üìã –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: **{departments_list}**\n"
                            f"‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –Ω–æ–≤–æ–≥–æ.\n\n"
                            f"üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª–∞—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π.",
                    embed=None,
                    view=None
                )
                return
            
            # Get department channel
            channel_id = ping_manager.get_department_channel_id(self.application_data['department_code'])
            if not channel_id:
                await interaction.edit_original_response(
                    content="‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    embed=None,
                    view=None
                )
                return
            
            channel = interaction.guild.get_channel(channel_id)
            if not channel:
                await interaction.edit_original_response(
                    content="‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    embed=None,
                    view=None
                )
                return
            
            # Create application embed for moderation
            embed = self._create_moderation_embed(self.application_data, interaction.user)
            
            # Create moderation view
            from .views import DepartmentApplicationView
            view = DepartmentApplicationView(self.application_data)
            view.setup_buttons()
            
            # Prepare content with pings for target department
            content = self._create_application_content(interaction.user, interaction.guild)
            
            # Send to department channel
            message = await channel.send(content=content, embed=embed, view=view)
            
            # Clear user's cache since they now have an active application
            from .views import _clear_user_cache
            _clear_user_cache(interaction.user.id)
            
            # Store application data
            self.application_data['message_id'] = message.id
            self.application_data['channel_id'] = channel.id
            
            # Confirm to user and delete the ephemeral message
            await interaction.edit_original_response(
                content=f"‚úÖ **–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n"
                        f"–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ **{self.application_data['department_code']}** "
                        f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
                        f"üìç –ö–∞–Ω–∞–ª: {channel.mention}\n"
                        f"‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –æ–±—ã—á–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤\n\n"
                        f"*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...*",
                embed=None,
                view=None
            )
            
            # Delete the ephemeral message after a short delay
            await asyncio.sleep(10)
            try:
                await interaction.delete_original_response()
            except discord.NotFound:
                pass  # Message already deleted
            
        except Exception as e:
            logger.error(f"Error sending application: {e}")
            await interaction.edit_original_response(
                content="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                embed=None,
                view=None
            )
    
    def _create_moderation_embed(self, application_data: Dict, user: discord.Member) -> discord.Embed:
        """Create embed for moderation"""
        app_type_text = "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" if application_data['application_type'] == 'join' else "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥"
        
        embed = discord.Embed(
            description=f"## {app_type_text} –≤ {application_data['department_code']} –æ—Ç {user.mention}",
            color=discord.Color.blue(),
            timestamp=datetime.fromisoformat(application_data['timestamp']).replace(tzinfo=timezone(timedelta(hours=3)))
        )
        
        embed.set_author(
            name=f"{user.display_name} ({user.name})",
            icon_url=user.display_avatar.url
        )
        
        # IC Information
        embed.add_field(
            name="üìã IC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è –§–∞–º–∏–ª–∏—è:** {application_data['name']}\n"
                  f"**–°—Ç–∞—Ç–∏–∫:** {application_data['static']}\n"
                  f"**–î–æ–∫—É–º–µ–Ω—Ç:** [–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç]({application_data['document_url']})",
            inline=False
        )
        
        embed.add_field(
            name="üí≠ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            value=application_data['reason'],
            inline=False
        )
        
        # OOC Information
        ooc_data = application_data['ooc_data']
        embed.add_field(
            name="üë§ OOC –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"**–ò–º—è:** {ooc_data['real_name']}\n"
                  f"**–í–æ–∑—Ä–∞—Å—Ç:** {ooc_data['age']}\n"
                  f"**–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:** {ooc_data['timezone']}\n"
                  f"**–û–Ω–ª–∞–π–Ω –≤ –¥–µ–Ω—å:** {ooc_data['online_hours']}\n"
                  f"**–ü—Ä–∞–π–º-—Ç–∞–π–º:** {ooc_data['prime_time']}",
            inline=False
        )
        
        # Status
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value="üîÑ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
            inline=True
        )
        
        embed.set_footer(text=f"ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {application_data['user_id']}")
        
        return embed
    
    def _create_application_content(self, user: discord.Member, guild: discord.Guild) -> str:
        """
        Create content with pings for the application message
        
        For new applications: ping roles for target department  
        For transfers: ping roles for target department + current department
        """
        from utils.ping_manager import PingManager
        ping_manager = PingManager()
        
        content_lines = []
        
        # Get ping roles for target department (where application is being submitted)
        target_ping_roles = ping_manager.get_ping_roles_for_context(
            self.application_data['department_code'], 
            'applications', 
            guild
        )
        
        if target_ping_roles:
            target_mentions = [role.mention for role in target_ping_roles]
            content_lines.append(' '.join(target_mentions))
        
        # Check if this is a transfer (user has current department)
        current_department = ping_manager.get_user_department_code(user)
        if current_department and current_department != self.application_data['department_code']:
            # This is a transfer - add pings for current department on second line
            current_ping_roles = ping_manager.get_ping_roles_for_context(
                current_department,
                'applications',  # –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'general'
                guild
            )
            
            if current_ping_roles:
                current_mentions = [role.mention for role in current_ping_roles]
                content_lines.append(' '.join(current_mentions))
        
        return '\n'.join(content_lines) if content_lines else ""
