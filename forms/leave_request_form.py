"""
Leave request system main file
"""
import discord
from forms.leave_requests.views import LeaveRequestButton, LeaveRequestApprovalView


async def send_leave_request_button_message(channel: discord.TextChannel):
    """Send leave request button message, avoiding duplicates using pinned messages."""
    
    # Check pinned messages first for leave request message
    try:
        pinned_messages = await channel.pins()
        for message in pinned_messages:
            if (message.author == channel.guild.me and 
                message.embeds and
                message.embeds[0].title and
                "–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª—ã" in message.embeds[0].title):
                
                # Found pinned leave request message, restore the view
                view = LeaveRequestButton()
                try:
                    await message.edit(view=view)
                    print(f"‚úÖ Updated existing pinned leave request message {message.id}")
                    return message
                except Exception as e:
                    print(f"‚ùå Error updating pinned leave request message: {e}")
                    # If update fails, unpin and delete old message, create new one
                    try:
                        await message.unpin()
                        await message.delete()
                        print(f"üóëÔ∏è Removed old pinned leave request message {message.id}")
                    except:
                        pass
                    break
    except Exception as e:
        print(f"‚ùå Error checking pinned messages for leave requests: {e}")
        
    # Create new message if none exists or old one couldn't be updated
    try:
        embed = discord.Embed(
            title="üèñÔ∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª—ã",
            description=(
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–≥—É–ª –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
                "**‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
                "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≥—É–ª–∞: **1 —á–∞—Å**\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ **—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å**\n"
                "‚Ä¢ –û—Ç–≥—É–ª —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –≤ **—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è**\n"
                "‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å **—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –≤ –¥–µ–Ω—å**\n"
                "‚Ä¢ –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å **–≤ –±—É–¥—É—â–µ–º** –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞\n\n"
                "**üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:**\n"
                "‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è\n"
                "‚Ä¢ –°—Ç–∞—Ç–∏–∫ (123-456)\n"
                "‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –æ—Ç–≥—É–ª–∞ (—Ñ–æ—Ä–º–∞—Ç HH:MM)\n"
                "‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –≤–∑—è—Ç–∏—è –æ—Ç–≥—É–ª–∞\n\n"
                "**üîç –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫:**\n"
                "‚Ä¢ –ó–∞—è–≤–∫–∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç –∫–æ–º–∞–Ω–¥–∏—Ä—ã –≤–∞—à–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–∏–¥–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –¥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n"
                "‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å"
            ),
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
        
        view = LeaveRequestButton()
        message = await channel.send(embed=embed, view=view)
        
        # Pin the new message for easy access
        try:
            await message.pin()
            print(f"üìå Pinned new leave request message {message.id}")
        except Exception as e:
            print(f"‚ùå Error pinning leave request message: {e}")
        
        print(f"‚úÖ Leave request button message sent to #{channel.name}")
        return message
        
    except Exception as e:
        print(f"‚ùå Error sending leave request button message: {e}")
        return None


async def restore_leave_request_views(bot):
    """Restore leave request views on bot startup"""
    try:
        print("üîÑ Restoring leave request views...")
        
        # First restore button view for pinned message
        from utils.config_manager import load_config
        config = load_config()
        channel_id = config.get('leave_requests_channel')
        
        if channel_id:
            channel = bot.get_channel(channel_id)
            if channel:
                # Check and update pinned message
                try:
                    pinned_messages = await channel.pins()
                    for message in pinned_messages:
                        if (message.author == channel.guild.me and 
                            message.embeds and
                            message.embeds[0].title and
                            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª—ã" in message.embeds[0].title):
                            
                            # Found pinned leave request message, restore the view
                            view = LeaveRequestButton()
                            try:
                                await message.edit(view=view)
                                print(f"‚úÖ Restored leave request button view for pinned message {message.id}")
                            except Exception as e:
                                print(f"‚ùå Error restoring pinned message view: {e}")
                            break
                except Exception as e:
                    print(f"‚ùå Error checking pinned messages: {e}")
                
                # Restore approval views for pending requests
                await restore_leave_request_approval_views(bot, channel)
        
        # Get all pending requests and add persistent views
        from utils.leave_request_storage import LeaveRequestStorage
        all_requests = LeaveRequestStorage.get_all_requests_today()
        pending_requests = [req for req in all_requests if req["status"] == "pending"]
        
        # Add views for pending requests
        for request in pending_requests:
            view = LeaveRequestApprovalView(request["id"])
            bot.add_view(view)
        
        print(f"‚úÖ Leave request views restored: {len(pending_requests)} approval views")
        
    except Exception as e:
        print(f"‚ùå Error restoring leave request views: {e}")


async def restore_leave_request_approval_views(bot, channel):
    """Restore approval views for existing leave request messages."""
    try:
        approval_views_restored = 0
        
        async for message in channel.history(limit=100):
            # Check if message is from bot and has leave request embed
            if (message.author == bot.user and 
                message.embeds and
                message.embeds[0].title and
                "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–≥—É–ª" in message.embeds[0].title):
                
                embed = message.embeds[0]
                
                # Check if request is still pending (not approved/rejected)
                status_pending = True
                for field in embed.fields:
                    if field.name in ["‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ", "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"]:
                        status_pending = False
                        break
                
                if status_pending:
                    # Extract request ID from embed if possible
                    request_id = None
                    for field in embed.fields:
                        if field.name == "üÜî ID –∑–∞—è–≤–∫–∏":
                            request_id = field.value
                            break
                    
                    if request_id:
                        # Restore the approval view
                        view = LeaveRequestApprovalView(request_id)
                        try:
                            await message.edit(view=view)
                            approval_views_restored += 1
                            print(f"‚úÖ Restored approval view for leave request {request_id}")
                        except discord.NotFound:
                            continue
                        except Exception as e:
                            print(f"‚ùå Error restoring view for message {message.id}: {e}")
        
        print(f"üîÑ Restoring {approval_views_restored} leave request approval views...")
        
    except Exception as e:
        print(f"‚ùå Error restoring leave request approval views: {e}")


# Export main components
__all__ = [
    'send_leave_request_button_message',
    'restore_leave_request_views',
    'restore_leave_request_approval_views',
    'LeaveRequestButton',
    'LeaveRequestApprovalView'
]
