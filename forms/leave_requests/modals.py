"""
Modals for leave request system
"""
import discord
from discord import ui
from discord.ext import commands
from utils.moderator_auth import is_moderator, is_administrator
from utils.leave_request_storage import LeaveRequestStorage
from utils.user_database import UserDatabase
from .utils import LeaveRequestValidator, LeaveRequestDepartmentDetector


class LeaveRequestModal(ui.Modal):
    """Modal for submitting leave requests"""
    
    def __init__(self, user_id=None, user_data=None):
        super().__init__(title="üèñÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–≥—É–ª")
        
        # Pre-fill name and static if user data is available
        name_value = ""
        static_value = ""
        name_placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤"
        static_placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456"
        
        if user_data:
            name_value = user_data.get('full_name', '')
            static_value = user_data.get('static', '')
            if name_value:
                name_placeholder = f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {name_value}"
            if static_value:
                static_placeholder = f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞: {static_value}"
        
        self.name_input = ui.TextInput(
          label="–ò–º—è –§–∞–º–∏–ª–∏—è",
          placeholder=name_placeholder,
          default=name_value,
          max_length=100,
          required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
          label="–°—Ç–∞—Ç–∏–∫",
          placeholder=static_placeholder,
          default=static_value,
          max_length=20,
          required=True
        )
        self.add_item(self.static_input)
        
        self.start_time_input = ui.TextInput(
          label="–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≥—É–ª–∞ (HH:MM)",
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 14:00",
          max_length=5,
          required=True
        )
        self.add_item(self.start_time_input)
        
        self.end_time_input = ui.TextInput(
          label="–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –æ—Ç–≥—É–ª–∞ (HH:MM)",
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 15:00",
          max_length=5,
          required=True
        )
        self.add_item(self.end_time_input)
        
        self.reason_input = ui.TextInput(
          label="–ü—Ä–∏—á–∏–Ω–∞ –≤–∑—è—Ç–∏—è –æ—Ç–≥—É–ª–∞",
          placeholder="–£–∫–∞–∂–∏—Ç–µ IC –ø—Ä–∏—á–∏–Ω—É, –Ω–µ –ø–∏—à–∏—Ç–µ OOC –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (\"–≤ —Ü–µ–ª—è—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ë–ü\" –ø–∏—Å–∞—Ç—å –Ω–µ —Å—Ç–æ–∏—Ç)",
          style=discord.TextStyle.paragraph,
          max_length=500,
          required=True
        )
        self.add_item(self.reason_input)
    
    @classmethod
    async def create_with_user_data(cls, user_id):
        """
        Create LeaveRequestModal with auto-filled user data from database
        
        Args:
            user_id: Discord user ID
            
        Returns:
            LeaveRequestModal: Modal instance with pre-filled data
        """
        try:
            # Try to get user data from personnel database
            user_data = await UserDatabase.get_user_info(user_id)
            return cls(user_id=user_id, user_data=user_data)
        except Exception as e:
            print(f"‚ùå Error loading user data for modal: {e}")
            # Return modal without pre-filled data if error occurs
            return cls(user_id=user_id, user_data=None)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
          # Get input values
          name = self.name_input.value.strip()
          static_raw = self.static_input.value.strip()
          start_time = self.start_time_input.value.strip()
          end_time = self.end_time_input.value.strip()
          reason = self.reason_input.value.strip()
          
          # Format static
          static = LeaveRequestValidator.format_static(static_raw)
            # Validate request (without daily limit check as it's done in button handler)
          validation = LeaveRequestValidator.validate_request_form_only(start_time, end_time)
          
          if not validation["valid"]:
              embed = discord.Embed(
                  title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏",
                  description=validation["error"],
                  color=discord.Color.red(),
                  timestamp=discord.utils.utcnow()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              return
          
          # Detect department
          department = LeaveRequestDepartmentDetector.detect_department(interaction.user.roles)
          
          # Save request
          request_id = LeaveRequestStorage.add_request(
              user_id=interaction.user.id,
              name=name,
              static=static,
              start_time=start_time,
              end_time=end_time,
              reason=reason,
              department=department,
              guild_id=interaction.guild.id
          )
            # Send confirmation to user
          duration_text = f"{validation['duration_minutes']} –º–∏–Ω"
          if validation['duration_minutes'] >= 60:
              hours = validation['duration_minutes'] // 60
              minutes = validation['duration_minutes'] % 60
              duration_text = f"{hours} —á" + (f" {minutes} –º–∏–Ω" if minutes > 0 else "")
          
          # Send request to channel without user notification
          await interaction.response.defer(ephemeral=True)
          
          # Send request to channel
          await self._send_request_to_channel(interaction, request_id, name, static,
                                            start_time, end_time, reason, department, 
                                            duration_text)
          
        except Exception as e:
          embed = discord.Embed(
              title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
              description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É: {str(e)}",
              color=discord.Color.red()
          )
          await interaction.response.send_message(embed=embed, ephemeral=True)
    
    async def _send_request_to_channel(self, interaction, request_id, name, static, 
                                   start_time, end_time, reason, department, duration_text):
        """Send request message to leave requests channel"""
        from utils.config_manager import load_config
        
        config = load_config()
        channel_id = config.get('leave_requests_channel')
        
        if not channel_id:
          return
        
        channel = interaction.guild.get_channel(channel_id)
        if not channel:
          return
          # Get ping roles based on user's roles
        ping_roles = LeaveRequestDepartmentDetector.get_ping_roles_from_user(
            interaction.user.roles, interaction.guild
        )
        ping_text = " ".join([role.mention for role in ping_roles]) if ping_roles else ""
        
        # Department names
        dept_names = {
          '–≤–∞': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
          '–≤–∫': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
          '—É–≤–ø': '–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)',
          '—Å—Å–æ': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)',
          '–º—Ä': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
          '—Ä–æ–∏–æ': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)',
          'unknown': '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        }
        
        dept_display = dept_names.get(department, department.upper())
        
        embed = discord.Embed(
          title="üèñÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–≥—É–ª",
          color=discord.Color.blue(),
          timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
          name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å:",
          value=f"{name} ({interaction.user.mention})",
          inline=True
        )
        
        embed.add_field(
          name="üè∑Ô∏è –°—Ç–∞—Ç–∏–∫:",
          value=static,
          inline=True
        )
        
        embed.add_field(
          name="üìÖ –î–∞—Ç–∞:",
          value=discord.utils.format_dt(discord.utils.utcnow(), 'd'),
          inline=True
        )
        
        embed.add_field(
          name="‚è∞ –í—Ä–µ–º—è:",
          value=f"{start_time} - {end_time} ({duration_text})",
          inline=False
        )
        embed.add_field(
          name="üìù –ü—Ä–∏—á–∏–Ω–∞:",
          value=reason,
          inline=False
        )
        
        embed.add_field(
          name="üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:",
          value=dept_display,
          inline=True
        )
        
        embed.add_field(
          name="üì¢ –°—Ç–∞—Ç—É—Å:",
          value="‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
          inline=True
        )
        
        # Create view with approval buttons
        from .views import LeaveRequestApprovalView
        view = LeaveRequestApprovalView(request_id)
        
        # Send message with pings
        content = ping_text if ping_text else None
        await channel.send(content=content, embed=embed, view=view)


class RejectReasonModal(ui.Modal):
    """Modal for entering rejection reason"""
    
    def __init__(self, request_id: str):
        super().__init__(title="‚ùå –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        self.request_id = request_id
        
        self.reason_input = ui.TextInput(
          label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏",
          placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...",
          style=discord.TextStyle.paragraph,
          max_length=500,
          required=True
        )
        self.add_item(self.reason_input)
    
    @classmethod
    async def create_with_user_data(cls, user_id):
        """
        Create LeaveRequestModal with auto-filled user data from database
        
        Args:
            user_id: Discord user ID
            
        Returns:
            LeaveRequestModal: Modal instance with pre-filled data
        """
        try:
            # Try to get user data from personnel database
            user_data = await UserDatabase.get_user_info(user_id)
            return cls(user_id=user_id, user_data=user_data)
        except Exception as e:
            print(f"‚ùå Error loading user data for modal: {e}")
            # Return modal without pre-filled data if error occurs
            return cls(user_id=user_id, user_data=None)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
          reason = self.reason_input.value.strip()
            # Check permissions
          is_admin = interaction.user.guild_permissions.administrator
          is_mod = await is_moderator(interaction.user.id)
          
          if not (is_admin or is_mod):
              embed = discord.Embed(
                  title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                  description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              return
          
          # Get request
          request = LeaveRequestStorage.get_request_by_id(self.request_id)
          if not request:
              embed = discord.Embed(
                  title="‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                  description="–ó–∞—è–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              return
          
          if request["status"] != "pending":
              embed = discord.Embed(
                  title="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                  description="–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              return
            # Check if trying to reject own request (moderators can't, but admins can)
          if (request["user_id"] == interaction.user.id and 
              is_mod and not is_admin):
              embed = discord.Embed(
                  title="‚ùå –ù–µ–ª—å–∑—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É",
                  description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              return
          
          # Update request status
          success = LeaveRequestStorage.update_request_status(
              self.request_id, "rejected", interaction.user.id, 
              str(interaction.user), reason
          )
          
          if success:
              # Update embed
              await self._update_request_embed(interaction, request, reason)
              
              # Send DM to user
              await self._send_dm_notification(interaction, request, reason)
              
              embed = discord.Embed(
                  title="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                  description=f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['name']} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
          else:
              embed = discord.Embed(
                  title="‚ùå –û—à–∏–±–∫–∞",
                  description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.",
                  color=discord.Color.red()
              )
              await interaction.response.send_message(embed=embed, ephemeral=True)
              
        except Exception as e:
          embed = discord.Embed(
              title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
              description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
              color=discord.Color.red()
          )
          await interaction.response.send_message(embed=embed, ephemeral=True)
    
    async def _update_request_embed(self, interaction, request, reason):
        """Update the original request embed with rejection info"""
        try:
          # Get updated request
          updated_request = LeaveRequestStorage.get_request_by_id(self.request_id)
          
          # Update embed
          embed = interaction.message.embeds[0]
          
          # Update status field
          for i, field in enumerate(embed.fields):
              if field.name == "üì¢ –°—Ç–∞—Ç—É—Å:":
                  embed.set_field_at(
                      i, 
                      name="üì¢ –°—Ç–∞—Ç—É—Å:",
                      value=f"‚ùå –û–¢–ö–õ–û–ù–ï–ù–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.mention}\n‚è∞ {discord.utils.format_dt(discord.utils.utcnow(), 'f')}",
                      inline=True
                  )
                  break
          
          # Add rejection reason field
          embed.add_field(
              name="üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
              value=reason,
              inline=False
          )
          
          embed.color = discord.Color.red()
          
          # Remove buttons
          await interaction.message.edit(embed=embed, view=None)
          
        except Exception as e:
          print(f"Error updating request embed: {e}")
    
    async def _send_dm_notification(self, interaction, request, reason):
        """Send DM notification to user about rejection"""
        try:
          user = interaction.guild.get_member(request["user_id"])
          if not user:
              return
          
          embed = discord.Embed(
              title="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–≥—É–ª –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
              color=discord.Color.red(),
              timestamp=discord.utils.utcnow()
          )
          
          embed.add_field(
              name="üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:",
              value=(
                  f"**–í—Ä–µ–º—è:** {request['start_time']} - {request['end_time']}\n"
                  f"**–î–∞—Ç–∞:** {discord.utils.format_dt(discord.utils.utcnow(), 'd')}\n"
                  f"**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–≥—É–ª–∞:** {request['reason']}"
              ),
              inline=False
          )
          
          embed.add_field(
              name="üë§ –û—Ç–∫–ª–æ–Ω–∏–ª:",
              value=interaction.user.mention,
              inline=True
          )
          
          embed.add_field(
              name="üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
              value=reason,
              inline=False
          )
          
          embed.add_field(
              name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
              value="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–≥—É–ª –≤ —Ç–æ–º –∂–µ –¥–Ω–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
              inline=False
          )
          
          await user.send(embed=embed)
          
        except Exception as e:
          print(f"Error sending DM notification: {e}")
