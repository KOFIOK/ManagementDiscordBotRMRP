"""
Views for leave request system
"""
import discord
from discord import ui
from utils.moderator_auth import is_moderator, is_administrator
from utils.leave_request_storage import LeaveRequestStorage


class LeaveRequestButton(ui.View):
    """Persistent button for submitting leave requests"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @ui.button(
        label="üèñÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–≥—É–ª",
        style=discord.ButtonStyle.green,
        custom_id="leave_request_submit"
    )
    async def submit_request(self, interaction: discord.Interaction, button: ui.Button):
        # Check if user already has a request today
        from .utils import LeaveRequestValidator
        
        daily_check = LeaveRequestValidator.check_daily_limit(interaction.user.id)
        if not daily_check["can_request"]:
            embed = discord.Embed(
                title="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞",
                description=daily_check["reason"],
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )
            embed.set_footer(text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –∑–∞–≤—Ç—Ä–∞")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # If no existing request, show modal
        from .modals import LeaveRequestModal
        modal = LeaveRequestModal()
        await interaction.response.send_modal(modal)


class LeaveRequestApprovalView(ui.View):
    """View with approval/rejection buttons for leave requests"""
    
    def __init__(self, request_id: str):
        super().__init__(timeout=None)
        self.request_id = request_id    
    @ui.button(
        label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å",
        style=discord.ButtonStyle.green,
        custom_id="leave_request_approve"
    )
    async def approve_request(self, interaction: discord.Interaction, button: ui.Button):
        try:
            # Check permissions
            is_admin = interaction.user.guild_permissions.administrator
            is_mod = await is_moderator(interaction.user.id)
            
            if not (is_admin or is_mod):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Get request
            request = LeaveRequestStorage.get_request_by_id(self.request_id)
            if not request:
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description="–ó–∞—è–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            if request["status"] != "pending":
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description="–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Check if trying to approve own request (moderators can't)
            if (request["user_id"] == interaction.user.id and 
                not interaction.user.guild_permissions.administrator):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–ª—å–∑—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É",
                    description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Update request status
            success = LeaveRequestStorage.update_request_status(
                self.request_id, "approved", interaction.user.id, str(interaction.user)
            )
            
            if success:
                # Update embed
                await self._update_request_embed(interaction)
                
                # Send DM to user
                await self._send_dm_notification(interaction, request)
                
                embed = discord.Embed(
                    title="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                    description=f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['name']} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.",
                    color=discord.Color.green()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @ui.button(
        label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        style=discord.ButtonStyle.red,
        custom_id="leave_request_reject"
    )
    async def reject_request(self, interaction: discord.Interaction, button: ui.Button):
        try:
            # Check permissions
            is_admin = interaction.user.guild_permissions.administrator
            is_mod = await is_moderator(interaction.user.id)
            
            if not (is_admin or is_mod):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Get request
            request = LeaveRequestStorage.get_request_by_id(self.request_id)
            if not request:
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description="–ó–∞—è–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            if request["status"] != "pending":
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description="–≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Check if trying to reject own request (moderators can't)
            if (request["user_id"] == interaction.user.id and 
                not interaction.user.guild_permissions.administrator):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–ª—å–∑—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É",
                    description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Show rejection reason modal
            from .modals import RejectReasonModal
            modal = RejectReasonModal(self.request_id)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @ui.button(
        label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        style=discord.ButtonStyle.secondary,
        custom_id="leave_request_delete"
    )
    async def delete_request(self, interaction: discord.Interaction, button: ui.Button):
        try:
            # Get request
            request = LeaveRequestStorage.get_request_by_id(self.request_id)
            if not request:
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description="–ó–∞—è–≤–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Check permissions
            is_admin = interaction.user.guild_permissions.administrator
            is_mod = await is_moderator(interaction.user.id)
            is_request_owner = request["user_id"] == interaction.user.id
            
            # Admin/mod can delete any request, user can only delete own pending requests
            if not (is_admin or is_mod or is_request_owner):
                embed = discord.Embed(
                    title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                    description="–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # User can only delete pending requests, admin/mod can delete any
            if is_request_owner and not (is_admin or is_mod) and request["status"] != "pending":
                status_text = {
                    "approved": "–æ–¥–æ–±—Ä–µ–Ω–∞",
                    "rejected": "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                }.get(request["status"], request["status"])
                
                embed = discord.Embed(
                    title="‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É",
                    description=f"–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ ({status_text}). –£–¥–∞–ª–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Delete request completely
            success = LeaveRequestStorage.delete_request(
                self.request_id, 
                interaction.user.id,
                is_admin=(is_admin or is_mod)
            )
            
            if success:
                # Delete the message completely
                await interaction.response.defer()
                await interaction.delete_original_response()
            else:
                embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

    async def _update_request_embed(self, interaction):
        """Update the original request embed with approval info"""
        try:
            # Get updated request
            updated_request = LeaveRequestStorage.get_request_by_id(self.request_id)
            
            # Update embed
            embed = interaction.message.embeds[0]
            
            # Update status field
            for i, field in enumerate(embed.fields):
                if field.name == "üì¢ –°—Ç–∞—Ç—É—Å:":
                    embed.set_field_at(
                        i, 
                        name="üì¢ –°—Ç–∞—Ç—É—Å:",
                        value=f"‚úÖ –û–î–û–ë–†–ï–ù–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {interaction.user.mention}\n‚è∞ {discord.utils.format_dt(discord.utils.utcnow(), 'f')}",
                        inline=True
                    )
                    break
            
            embed.color = discord.Color.green()
            
            # Remove buttons
            await interaction.message.edit(embed=embed, view=None)
            
        except Exception as e:
            print(f"Error updating request embed: {e}")
    
    async def _send_dm_notification(self, interaction, request):
        """Send DM notification to user about approval"""
        try:
            user = interaction.guild.get_member(request["user_id"])
            if not user:
                return
            
            embed = discord.Embed(
                title="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–≥—É–ª –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="üìã –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:",
                value=(
                    f"**–í—Ä–µ–º—è:** {request['start_time']} - {request['end_time']}\n"
                    f"**–î–∞—Ç–∞:** {discord.utils.format_dt(discord.utils.utcnow(), 'd')}\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** {request['reason']}"
                ),
                inline=False
            )
            
            embed.add_field(
                name="üë§ –û–¥–æ–±—Ä–∏–ª:",
                value=str(interaction.user),
                inline=True
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è –í–∞–∂–Ω–æ:",
                value="–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—Ç–≥—É–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º.",
                inline=False
            )
            
            await user.send(embed=embed)
            
        except Exception as e:
            print(f"Error sending DM notification: {e}")
