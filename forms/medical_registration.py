"""
Medical Registration Forms for Discord bot
Handles medical appointments and registration forms
"""

import discord
from discord.ui import Button, View, Modal, TextInput
from datetime import datetime, timezone, timedelta
from utils.config_manager import load_config
from utils.user_cache import get_cached_user_info


class BaseMedicalView(View):
    """Base view with common autofill functionality"""
    
    async def get_autofill_data(self, user_id: str) -> str:
        """Get autofill data for user"""
        try:
            user_info = await get_cached_user_info(user_id)
            if user_info and user_info.get('full_name') and user_info.get('static'):
                return f"{user_info['full_name']} | {user_info['static']}"
        except Exception as e:
            print(f"Error getting autofill data: {e}")
        return ""


class MedicalRegistrationView(BaseMedicalView):
    """View with buttons for medical services"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –í–í–ö", style=discord.ButtonStyle.primary, custom_id="vvk_button", emoji="ü©∫")
    async def vvk_button(self, interaction: discord.Interaction, button: Button):
        """–í–í–ö - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Ä–æ–ª–∏"""
        config = load_config()
        allowed_roles = config.get('medical_vvk_allowed_roles', [])
        
        if allowed_roles and not any(role.id in allowed_roles for role in interaction.user.roles):
            embed = discord.Embed(
                title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤",
                description="–ó–∞–ø–∏—Å—å –Ω–∞ –í–í–ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–æ–ª—è–º.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        autofill_data = await self.get_autofill_data(str(interaction.user.id))
        await interaction.response.send_modal(VVKModal(autofill_data))
    
    @discord.ui.button(label="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", style=discord.ButtonStyle.success, custom_id="docs_button", emoji="üìÑ")
    async def docs_button(self, interaction: discord.Interaction, button: Button):
        """–î–æ–∫—É–º–µ–Ω—Ç—ã - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
        autofill_data = await self.get_autofill_data(str(interaction.user.id))
        await interaction.response.send_modal(DocumentsModal(autofill_data))
    
    @discord.ui.button(label="–ü—Ä–∏—ë–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞", style=discord.ButtonStyle.danger, custom_id="psych_button", emoji="üß†")
    async def psych_button(self, interaction: discord.Interaction, button: Button):
        """–ü—Å–∏—Ö–æ–ª–æ–≥ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º"""
        autofill_data = await self.get_autofill_data(str(interaction.user.id))
        await interaction.response.send_modal(PsychologistModal(autofill_data))


class BaseMedicalModal(Modal):
    """Base class for medical modals with common functionality"""
    
    def __init__(self, title: str):
        super().__init__(title=title)
    
    async def send_to_channel(self, interaction: discord.Interaction, embed: discord.Embed):
        """Send medical request to configured channel"""
        try:
            config = load_config()
            channel_id = config.get('medical_registration_channel')
            medic_role_id = config.get('medical_role_id')
            
            if not channel_id:
                embed_error = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                    description="–ö–∞–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed_error, ephemeral=True)
                return
            
            channel = interaction.guild.get_channel(channel_id)
            if not channel:
                embed_error = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ö–∞–Ω–∞–ª –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed_error, ephemeral=True)
                return
            
            # Prepare mention text
            mention_text = f"{interaction.user.mention} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É"
            if medic_role_id:
                role = interaction.guild.get_role(medic_role_id)
                if role:
                    mention_text += f" {role.mention}"
            
            # Send to channel
            await channel.send(content=mention_text, embed=embed)
            
            # Confirm to user
            await interaction.response.send_message("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", ephemeral=True)
            
        except Exception as e:
            print(f"Error sending medical request: {e}")
            embed_error = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed_error, ephemeral=True)


class VVKModal(BaseMedicalModal):
    """Modal for VVK (Military Medical Commission) registration"""
    
    def __init__(self, autofill_data=""):
        super().__init__(title="–ó–∞–ø–∏—Å—å –Ω–∞ –í–í–ö")
        
        self.name = TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫",
            placeholder="–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ | 000-000",
            default=autofill_data,
            max_length=100,
            required=True
        )
        self.time = TextInput(
            label="–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            placeholder="–ü—Ä–∏–º–µ—Ä—ã: 18:00, –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏, –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            max_length=200,
            required=True
        )
        
        self.add_item(self.name)
        self.add_item(self.time)

    async def on_submit(self, interaction: discord.Interaction):
        # Moscow timezone
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        embed = discord.Embed(
            title="ü©∫ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –í–í–ö",
            description="–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ-–≤—Ä–∞—á–µ–±–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏",
            color=discord.Color.blue(),
            timestamp=now
        )
        
        embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìù –ò–º—è –∏ —Å—Ç–∞—Ç–∏–∫", value=self.name.value, inline=True)
        embed.add_field(name="‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", value=self.time.value, inline=False)
        
        embed.set_footer(
            text=f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚Ä¢ {now.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
            icon_url=interaction.user.display_avatar.url
        )
        
        await self.send_to_channel(interaction, embed)

class DocumentsModal(BaseMedicalModal):
    """Modal for medical documents update"""
    def __init__(self, autofill_data=""):
        super().__init__(title="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        self.name = TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫",
            placeholder="–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ | 000-000",
            default=autofill_data,
            max_length=100,
            required=True
        )
        self.docs = TextInput(
            label="–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å?",
            placeholder="–ü—Ä–∏–º–µ—Ä: –í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, —Å–ø—Ä–∞–≤–∫–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è",
            style=discord.TextStyle.long,
            max_length=500,
            required=True
        )
        self.time = TextInput(
            label="–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            placeholder="–ü—Ä–∏–º–µ—Ä—ã: 18:00, –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏, –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            max_length=200,
            required=True
        )
        
        self.add_item(self.name)
        self.add_item(self.docs)
        self.add_item(self.time)

    async def on_submit(self, interaction: discord.Interaction):
        # Moscow timezone
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        embed = discord.Embed(
            title="üìÑ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            description="–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            color=discord.Color.orange(),
            timestamp=now
        )
        
        embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìù –ò–º—è –∏ —Å—Ç–∞—Ç–∏–∫", value=self.name.value, inline=True)
        embed.add_field(name="üìã –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", value=self.docs.value, inline=False)
        embed.add_field(name="‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", value=self.time.value, inline=False)
        
        embed.set_footer(
            text=f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚Ä¢ {now.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
            icon_url=interaction.user.display_avatar.url
        )
        
        await self.send_to_channel(interaction, embed)


class PsychologistModal(BaseMedicalModal):
    """Modal for psychologist appointment"""
    def __init__(self, autofill_data=""):
        super().__init__(title="–ó–∞–ø–∏—Å—å –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É")
        
        self.name = TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫",
            placeholder="–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ | 000-000",
            default=autofill_data,
            max_length=100,
            required=True
        )
        self.reason = TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è (–ø–æ–¥—Ä–æ–±–Ω–æ)",
            style=discord.TextStyle.long,
            placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ",
            max_length=1000,
            required=True
        )
        self.time = TextInput(
            label="–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            placeholder="–ü—Ä–∏–º–µ—Ä—ã: 18:00, –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏, –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
            max_length=200,
            required=True
        )
        
        self.add_item(self.name)
        self.add_item(self.reason)
        self.add_item(self.time)

    async def on_submit(self, interaction: discord.Interaction):
        # Moscow timezone
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        
        embed = discord.Embed(
            title="üß† –ó–∞—è–≤–∫–∞ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É",
            description="–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É",
            color=discord.Color.purple(),
            timestamp=now
        )
        
        embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìù –ò–º—è –∏ —Å—Ç–∞—Ç–∏–∫", value=self.name.value, inline=True)
        embed.add_field(name="üìÑ –ü—Ä–∏—á–∏–Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è", value=self.reason.value, inline=False)
        embed.add_field(name="‚è∞ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", value=self.time.value, inline=False)
        
        embed.set_footer(
            text=f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚Ä¢ {now.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö",
            icon_url=interaction.user.display_avatar.url
        )
        
        await self.send_to_channel(interaction, embed)


async def send_medical_registration_message(channel):
    """Send medical registration message with buttons to channel (called from settings)"""
    try:
        print(f"[DEBUG] Attempting to send medical registration message to channel: {channel.name} (ID: {channel.id})")
          # Check if pinned message already exists
        pinned_messages = await channel.pins()
        existing_message = None
        
        print(f"[DEBUG] Found {len(pinned_messages)} pinned messages")
        
        for message in pinned_messages:
            if (message.author == channel.guild.me and 
                message.embeds and 
                len(message.embeds) > 0 and
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ä–æ—Ç–∞ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞" in message.embeds[0].title):
                existing_message = message
                print(f"[DEBUG] Found existing medical registration message (ID: {message.id})")
                break
        
        if existing_message:
            print(f"[DEBUG] Medical registration message already exists (ID: {existing_message.id}), skipping creation")
            return  # Message already exists and is pinned
        
        print(f"[DEBUG] Creating new medical registration message")
        
        # Create and send new message
        embed = discord.Embed(
            title="üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ä–æ—Ç–∞ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
            description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —É—Å–ª—É–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            color=discord.Color.blue(),
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.add_field(
            name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:",
            value=(
                "**–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –í–í–ö** - –í–æ–µ–Ω–Ω–æ-–≤—Ä–∞—á–µ–±–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è\n"
                "**–õ–µ–∫—Ü–∏—è –ø–æ –º–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ** - –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
                "**–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤** - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n"
                "**–ü—Ä–∏—ë–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞** - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
            ),
            inline=False
        )
        
        embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏")
        
        view = MedicalRegistrationView()
        message = await channel.send(embed=embed, view=view)
        
        print(f"[DEBUG] Medical registration message sent (ID: {message.id})")
        
        # Pin the message
        try:
            await message.pin()
            print(f"[DEBUG] Medical registration message pinned successfully")
        except Exception as pin_error:
            print(f"[DEBUG] Failed to pin medical registration message: {pin_error}")
            pass  # Ignore pin errors
            
    except Exception as e:
        print(f"Error sending medical registration message: {e}")
        import traceback
        traceback.print_exc()
