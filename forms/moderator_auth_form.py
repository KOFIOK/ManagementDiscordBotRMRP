import discord
from discord import ui
import re

class ModeratorAuthModal(ui.Modal, title="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"):
    """Modal for moderator registration when not found in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet."""
    
    email = ui.TextInput(
        label="Email (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–¥—Ä–æ–≤–æ–º—É)",
        placeholder="example@gmail.com",
        min_length=5,
        max_length=100,
        required=True
    )
    
    name = ui.TextInput(
        label="–ò–º—è –§–∞–º–∏–ª–∏—è",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª",
        min_length=3,
        max_length=50,
        required=True
    )
    
    static = ui.TextInput(
        label="–°—Ç–∞—Ç–∏–∫ (123-456)",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç–∏–∫ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ",
        min_length=5,
        max_length=7,
        required=True
    )
    
    position = ui.TextInput(
        label="–î–æ–ª–∂–Ω–æ—Å—Ç—å",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–º–∏—Å—Å–∞—Ä. –ï—Å–ª–∏ –±–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ - —É–∫–∞–∂–∏—Ç–µ –∑–≤–∞–Ω–∏–µ",
        min_length=2,
        max_length=50,
        required=True
    )
    
    def __init__(self, callback_func, *args, **kwargs):
        """
        Initialize the modal with a callback function.
        
        Args:
            callback_func: Function to call with the result data
        """
        super().__init__()
        self.callback_func = callback_func
        self.callback_args = args
        self.callback_kwargs = kwargs
    
    def format_static(self, static_input: str) -> str:
        """
        Auto-format static number to standard format (XXX-XXX or XX-XXX).
        Accepts various input formats: 123456, 123 456, 123-456, etc.
        Returns formatted static or empty string if invalid.
        """
        # Remove all non-digit characters
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        # Check if we have exactly 5 or 6 digits
        if len(digits_only) == 5:
            # Format as XX-XXX (2-3)
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            # Format as XXX-XXX (3-3)
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            # Invalid length
            return ""
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle form submission with validation and registration."""
        try:
            # Validate email format
            email_value = self.email.value.strip()
            if "@" not in email_value or "." not in email_value:
                await interaction.response.send_message(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email**\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `example@gmail.com`", 
                    ephemeral=True
                )
                return
            
            # Validate name format (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å–ª–æ–≤–∞)
            name_parts = self.name.value.strip().split()
            if len(name_parts) != 2:
                await interaction.response.send_message(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏**\n"
                    "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`", 
                    ephemeral=True
                )
                return
            
            # Auto-format and validate static
            formatted_static = self.format_static(self.static.value)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏–∫–∞**\n"
                    "–°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:**\n"
                    "‚Ä¢ `123456` ‚Üí `123-456`\n"
                    "‚Ä¢ `123-456` ‚Üí `123-456`\n"
                    "‚Ä¢ `123 456` ‚Üí `123-456`\n"
                    "‚Ä¢ `12345` ‚Üí `12-345`\n"
                    "‚Ä¢ `12-345` ‚Üí `12-345`",
                    ephemeral=True
                )
                return
            
            # Validate position
            position_value = self.position.value.strip()
            if len(position_value) < 2:
                await interaction.response.send_message(
                    "‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏**\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –∑–≤–∞–Ω–∏–µ.\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:** `–ö–æ–º–∏—Å—Å–∞—Ä`, `–ö–∞–ø–∏—Ç–∞–Ω`, `–ú–∞–π–æ—Ä`",
                    ephemeral=True
                )
                return
            
            # Send processing message
            await interaction.response.send_message(
                "‚è≥ **–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ...**\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                ephemeral=True
            )
            
            # Register moderator in Google Sheets
            from utils.google_sheets import sheets_manager
            
            registration_success = await sheets_manager.register_moderator(
                email=email_value,
                name=self.name.value.strip(),
                static=formatted_static,
                position=position_value
            )
            
            if registration_success:
                # Create moderator info for callback
                moderator_data = {
                    "email": email_value,
                    "name": self.name.value.strip(),
                    "static": formatted_static,
                    "position": position_value,
                    "full_info": f"{self.name.value.strip()} | {formatted_static}"
                }                # Send success confirmation
                await interaction.followup.send(
                    f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!**\n"
                    f"üìß Email: `{email_value}`\n"
                    f"üë§ –ò–º—è: `{moderator_data['name']}`\n"
                    f"üî¢ –°—Ç–∞—Ç–∏–∫: `{formatted_static}`\n"
                    f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: `{position_value}`\n\n"
                    f"üîÑ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞—è–≤–∫–∏...",
                    ephemeral=True
                )
                
                # Call the callback function with the moderator data
                if self.callback_func:
                    await self.callback_func(interaction, moderator_data, *self.callback_args, **self.callback_kwargs)
            else:
                await interaction.followup.send(
                    "‚ùå **–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏**\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                
        except Exception as e:
            print(f"Error in ModeratorAuthModal.on_submit: {e}")
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö**\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        ephemeral=True
                    )
                else:
                    await interaction.followup.send(
                        "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö**\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        ephemeral=True
                    )
            except:
                print(f"Could not send error message to user: {e}")
