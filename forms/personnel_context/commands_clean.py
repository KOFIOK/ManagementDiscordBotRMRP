"""
Personnel Context Menu Commands with PersonnelManager integration
"""

import discord
from discord import app_commands
from discord.ext import commands
import functools
import traceback

from utils.config_manager import load_config, is_moderator_or_admin, is_administrator, can_moderate_user
from utils.database_manager import PersonnelManager
from utils.database_manager.position_manager import position_manager
from utils.nickname_manager import nickname_manager
from discord import ui
import re


async def get_user_rank_from_db(user_discord_id: int) -> str:
    """Get user's current rank from database instead of Discord roles"""
    try:
        from utils.postgresql_pool import get_db_cursor
        
        with get_db_cursor() as cursor:
            cursor.execute("""
                SELECT r.name 
                FROM employees e
                JOIN personnel p ON e.personnel_id = p.id
                JOIN ranks r ON e.rank_id = r.id
                WHERE p.discord_id = %s AND p.is_dismissal = false;
            """, (user_discord_id,))
            
            result = cursor.fetchone()
            return result['name'] if result else None
            
    except Exception as e:
        print(f"Error getting rank from database: {e}")
        return None


def handle_context_errors(func):
    """Decorator to handle errors in context menu commands"""
    @functools.wraps(func)
    async def wrapper(interaction: discord.Interaction, user: discord.Member):
        try:
            print(f"üìã Context menu '{func.__name__}' called by {interaction.user.display_name} for {user.display_name}")
            return await func(interaction, user)
        except Exception as e:
            print(f"‚ùå Error in {func.__name__}: {e}")
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
                        ephemeral=True
                    )
                else:
                    await interaction.followup.send(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.",
                        ephemeral=True
                    )
            except:
                pass
    return wrapper


class RecruitmentModal(ui.Modal, title="–ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞ —Å–ª—É–∂–±—É"):
    """Modal for recruiting new personnel using PersonnelManager"""
    
    def __init__(self, target_user: discord.Member):
        super().__init__()
        self.target_user = target_user
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        # Rank is always "–†—è–¥–æ–≤–æ–π" for new recruits, no need for input field
        
        self.recruitment_type_input = ui.TextInput(
            label="–ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞",
            placeholder="–≠–∫—Å–∫—É—Ä—Å–∏—è –∏–ª–∏ –ü—Ä–∏–∑—ã–≤",
            min_length=1,
            max_length=20,
            required=True
        )
        self.add_item(self.recruitment_type_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Process recruitment submission using PersonnelManager"""
        try:
            # Check permissions first
            config = load_config()
            if not is_moderator_or_admin(interaction.user, config):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    ephemeral=True
                )
                return
            
            # Validate and format static
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # Validate recruitment type
            recruitment_type = self.recruitment_type_input.value.strip().lower()
            if recruitment_type not in ["—ç–∫—Å–∫—É—Ä—Å–∏—è", "–ø—Ä–∏–∑—ã–≤"]:
                await interaction.response.send_message(
                    "‚ùå –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: '–≠–∫—Å–∫—É—Ä—Å–∏—è' –∏–ª–∏ '–ü—Ä–∏–∑—ã–≤'.",
                    ephemeral=True
                )
                return
            
            # All validation passed, defer for processing
            await interaction.response.defer(ephemeral=True)
            
            # Process recruitment using PersonnelManager
            success = await self._process_recruitment_with_personnel_manager(
                interaction,
                self.name_input.value.strip(),
                formatted_static,
                "–†—è–¥–æ–≤–æ–π",  # Always set rank as "–†—è–¥–æ–≤–æ–π" for new recruits
                recruitment_type
            )
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ –£—Å–ø–µ—à–Ω–æ",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.target_user.mention} –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É!",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="üìã –î–µ—Ç–∞–ª–∏:",
                    value=(
                        f"**–§–ò–û:** {self.name_input.value.strip()}\n"
                        f"**–°—Ç–∞—Ç–∏–∫:** {formatted_static}\n"
                        f"**–ó–≤–∞–Ω–∏–µ:** –†—è–¥–æ–≤–æ–π\n"
                        f"**–ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞:** {recruitment_type}"
                    ),
                    inline=False
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–∞ —Å–ª—É–∂–±—É.",
                    ephemeral=True
                )
                
        except Exception as e:
            print(f"‚ùå RECRUITMENT ERROR: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                        ephemeral=True
                    )
                else:
                    await interaction.followup.send(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                        ephemeral=True
                    )
            except:
                print(f"Failed to send error response: {e}")
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def _process_recruitment_with_personnel_manager(self, interaction: discord.Interaction, full_name: str, static: str, rank: str, recruitment_type: str) -> bool:
        """Process recruitment using PersonnelManager"""
        try:
            print(f"üîÑ RECRUITMENT: Starting recruitment via PersonnelManager for {self.target_user.id}")
            print(f"üîÑ RECRUITMENT: Data - Name: '{full_name}', Static: '{static}', Rank: '{rank}', Type: '{recruitment_type}'")
            
            # Prepare application data for PersonnelManager
            application_data = {
                'user_id': self.target_user.id,
                'username': self.target_user.display_name,
                'name': full_name,
                'static': static,
                'type': 'military',
                'recruitment_type': recruitment_type.lower(),
                'rank': rank,
                'subdivision': '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è',
                'position': None,
                'reason': f"–ù–∞–±–æ—Ä: {recruitment_type}"
            }
            
            # Use PersonnelManager for recruitment
            pm = PersonnelManager()
            
            success, message = await pm.process_role_application_approval(
                application_data,
                self.target_user.id,
                interaction.user.id,
                interaction.user.display_name
            )
            
            if success:
                print(f"‚úÖ RECRUITMENT: PersonnelManager processed successfully: {message}")
                
                # Send audit notification using centralized logger
                try:
                    from utils.audit_logger import audit_logger, AuditAction
                    config = load_config()
                    
                    personnel_data = {
                        'name': full_name,
                        'static': static,
                        'rank': rank,
                        'department': '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è',
                        'reason': recruitment_type.capitalize()
                    }
                    
                    await audit_logger.send_personnel_audit(
                        guild=interaction.guild,
                        action=await AuditAction.HIRING(),
                        target_user=self.target_user,
                        moderator=interaction.user,
                        personnel_data=personnel_data,
                        config=config
                    )
                    print(f"‚úÖ RECRUITMENT: Audit notification sent")
                except Exception as audit_error:
                    print(f"‚ö†Ô∏è RECRUITMENT: Failed to send audit notification: {audit_error}")
                
                # Send DM to recruited user
                try:
                    dm_embed = discord.Embed(
                        title="‚úÖ –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–ª—É–∂–±—É!",
                        description=(
                            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Å–ª—É–∂–±—É –≤ –í–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–µ –°–∏–ª—ã –†–§.\n\n"
                            "üìã **–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
                            "> ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞–Ω–∞–ª–æ–º –æ–±—â–µ–Ω–∏—è –∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏\n"
                            "> ‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –ø—Ä–∏–∫–∞–∑—ã –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è\n"
                            "> ‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —É—á–µ–±–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è\n\n"
                            "üéñÔ∏è –£–¥–∞—á–∏ –≤ —Å–ª—É–∂–±–µ!"
                        ),
                        color=discord.Color.green()
                    )
                    dm_embed.add_field(name="–§–ò–û", value=full_name, inline=True)
                    dm_embed.add_field(name="–°—Ç–∞—Ç–∏–∫", value=static, inline=True)
                    dm_embed.add_field(name="–ó–≤–∞–Ω–∏–µ", value="–†—è–¥–æ–≤–æ–π", inline=True)
                    dm_embed.add_field(name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", value="–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è", inline=False)
                    
                    await self.target_user.send(embed=dm_embed)
                    print(f"‚úÖ RECRUITMENT: DM sent to {self.target_user.display_name}")
                except discord.Forbidden:
                    print(f"‚ö†Ô∏è RECRUITMENT: Could not send DM to {self.target_user.display_name} (DMs disabled)")
                except Exception as dm_error:
                    print(f"‚ö†Ô∏è RECRUITMENT: Failed to send DM: {dm_error}")
                
                # Step: Assign Discord roles and set nickname (like button approval does)
                try:
                    config = load_config()
                    await self._assign_military_roles(interaction.guild, config)
                    print(f"‚úÖ RECRUITMENT: Role assignment process completed")
                except Exception as role_error:
                    print(f"‚ö†Ô∏è RECRUITMENT: Failed to assign roles: {role_error}")
                    # Continue even if role assignment fails
            else:
                print(f"‚ùå RECRUITMENT: PersonnelManager failed: {message}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå RECRUITMENT: Error processing recruitment: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def _assign_military_roles(self, guild, config):
        """Assign military roles and set nickname (same as button approval)"""
        try:
            # Get military roles from config
            role_ids = config.get('military_roles', [])
            
            # Assign roles
            for role_id in role_ids:
                role = guild.get_role(role_id)
                if role and role not in self.target_user.roles:
                    try:
                        await self.target_user.add_roles(role, reason="–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É —á–µ—Ä–µ–∑ –ü–ö–ú")
                    except discord.Forbidden:
                        print(f"‚ö†Ô∏è RECRUITMENT: No permission to assign role {role.name}")
                    except Exception as e:
                        print(f"‚ùå RECRUITMENT: Error assigning role {role.name}: {e}")
            
            # Set military nickname
            await self._set_military_nickname()
            
        except Exception as e:
            print(f"‚ùå RECRUITMENT: Error in _assign_military_roles: {e}")
            raise
    
    async def _set_military_nickname(self):
        """Set nickname for military recruit using nickname_manager"""
        try:
            full_name = self.name_input.value.strip()
            static = self.static_input.value.strip()
            
            # Extract first and last name
            name_parts = full_name.split()
            first_name = name_parts[0] if name_parts else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            last_name = name_parts[-1] if len(name_parts) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # Use nickname_manager for consistent formatting
            new_nickname = await nickname_manager.handle_hiring(
                member=self.target_user,
                rank_name="–†—è–¥–æ–≤–æ–π",  # Default rank for new recruits
                first_name=first_name,
                last_name=last_name,
                static=static
            )
            
            if new_nickname:
                print(f"‚úÖ RECRUITMENT: Set nickname using nickname_manager: {self.target_user.display_name} -> {new_nickname}")
            else:
                # Fallback to old logic if nickname_manager fails
                full_nickname = f"–í–ê | {full_name}"
                if len(full_nickname) <= 32:
                    new_nickname = full_nickname
                else:
                    first_initial = first_name[0] if first_name else "–ò"
                    new_nickname = f"–í–ê | {first_initial}. {last_name}"
                
                await self.target_user.edit(nick=new_nickname, reason="–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É —á–µ—Ä–µ–∑ –ü–ö–ú (fallback)")
                print(f"‚úÖ RECRUITMENT: Fallback nickname set: {new_nickname}")
            
        except discord.Forbidden:
            print(f"‚ö†Ô∏è RECRUITMENT: No permission to change nickname for {self.target_user.display_name} to \"{new_nickname}\"")
        except Exception as e:
            print(f"‚ùå RECRUITMENT: Error setting nickname: {e}")


@app_commands.context_menu(name='–ü—Ä–∏–Ω—è—Ç—å –Ω–∞ —Å–ª—É–∂–±—É')
@handle_context_errors
async def recruit_user(interaction: discord.Interaction, user: discord.Member):
    """Context menu command to recruit user using PersonnelManager"""
    # Check permissions
    config = load_config()
    if not is_moderator_or_admin(interaction.user, config):
        await interaction.response.send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            ephemeral=True
        )
        return
    
    # Check if moderator can moderate this user (hierarchy check)
    if not can_moderate_user(interaction.user, user, config):
        await interaction.response.send_message(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.",
            ephemeral=True
        )
        return
    
    # Check if user has active blacklist entry
    from utils.audit_logger import audit_logger
    
    blacklist_info = await audit_logger.check_active_blacklist(user.id)
    
    if blacklist_info:
        # User is blacklisted, deny recruitment
        start_date_str = blacklist_info['start_date'].strftime('%d.%m.%Y')
        end_date_str = blacklist_info['end_date'].strftime('%d.%m.%Y') if blacklist_info['end_date'] else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'
        
        await interaction.response.send_message(
            f"‚ùå **–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–µ—â–µ–Ω –ø—Ä–∏—ë–º –Ω–∞ —Å–ª—É–∂–±—É**\n\n"
            f"üìã **{blacklist_info['full_name']} | {blacklist_info['static']} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –í–° –†–§**\n"
            f"> **–ü—Ä–∏—á–∏–Ω–∞:** {blacklist_info['reason']}\n"
            f"> **–ü–µ—Ä–∏–æ–¥:** {start_date_str} - {end_date_str}\n\n"
            f"*–î–ª—è —Å–Ω—è—Ç–∏—è —Å —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –±—Ä–∏–≥–∞–¥—ã.*",
            ephemeral=True
        )
        return
            
    # Check if user is already on service (has a record in employees table)
    from utils.postgresql_pool import get_db_cursor
    with get_db_cursor() as cursor:
        cursor.execute("""
            SELECT CONCAT(p.first_name, ' ', p.last_name) as full_name, p.static, e.subdivision_id
            FROM personnel p
            JOIN employees e ON p.id = e.personnel_id
            WHERE p.discord_id = %s AND p.is_dismissal = false
        """, (user.id,))
        existing_service = cursor.fetchone()
        
        if existing_service:
            # User is already in service - send warning
            await interaction.response.send_message(
                f"‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —Å–ª—É–∂–±–µ!**\n\n"
                f"**–§–ò–û:** {existing_service['full_name']}\n"
                f"**–°—Ç–∞—Ç–∏–∫:** {existing_service['static']}\n"
                f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                ephemeral=True
            )
            return
    
    # No blacklist, proceed with recruitment
    modal = RecruitmentModal(user)
    await interaction.response.send_modal(modal)
    print(f"‚úÖ Recruitment modal sent for {user.display_name}")


class DismissalModal(ui.Modal, title="–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ"):
    """Modal for dismissing personnel using PersonnelManager"""
    
    def __init__(self, target_user: discord.Member):
        super().__init__()
        self.target_user = target_user
        
        self.reason_input = ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
            placeholder="–ü–°–ñ, –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å—Ç–∞–≤–∞, –∏ —Ç.–¥.",
            min_length=2,
            max_length=100,
            required=True
        )
        self.add_item(self.reason_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Process dismissal submission using PersonnelManager"""
        try:
            # Check permissions first
            config = load_config()
            if not is_moderator_or_admin(interaction.user, config):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    ephemeral=True
                )
                return
            
            # All validation passed, defer for processing
            await interaction.response.defer(ephemeral=True)
            
            # Process dismissal using PersonnelManager
            success = await self._process_dismissal_with_personnel_manager(
                interaction,
                self.reason_input.value.strip()
            )
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ –£—Å–ø–µ—à–Ω–æ",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.target_user.mention} —É–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã!",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="üìã –î–µ—Ç–∞–ª–∏:",
                    value=f"**–ü—Ä–∏—á–∏–Ω–∞:** {self.reason_input.value.strip()}",
                    inline=False
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
            else:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è.",
                    ephemeral=True
                )
                
        except Exception as e:
            print(f"‚ùå DISMISSAL ERROR: {e}")
            import traceback
            traceback.print_exc()
            try:
                if not interaction.response.is_done():
                    await interaction.response.send_message(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                        ephemeral=True
                    )
                else:
                    await interaction.followup.send(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
                        ephemeral=True
                    )
            except:
                print(f"Failed to send error response: {e}")
    
    async def _process_dismissal_with_personnel_manager(self, interaction: discord.Interaction, reason: str) -> bool:
        """Process dismissal directly (same as dismissal reports)"""
        try:
            print(f"üîÑ DISMISSAL: Starting dismissal for {self.target_user.id}")
            print(f"üîÑ DISMISSAL: Reason: '{reason}'")
            
            # Get personnel data first
            pm = PersonnelManager()
            personnel_data_summary = await pm.get_personnel_summary(self.target_user.id)
            
            if not personnel_data_summary:
                print(f"‚ùå DISMISSAL: User not found in personnel database")
                await interaction.followup.send(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.",
                    ephemeral=True
                )
                return False
            
            # Process dismissal directly (same as in dismissal reports)
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone
            import json
            
            try:
                with get_db_cursor() as cursor:
                    # Get personnel and employee data
                    cursor.execute("""
                        SELECT 
                            p.id, p.first_name, p.last_name, p.static,
                            e.id as employee_id,
                            r.name as current_rank,
                            pos.name as current_position,
                            sub.name as current_subdivision
                        FROM personnel p
                        LEFT JOIN employees e ON p.id = e.personnel_id
                        LEFT JOIN ranks r ON e.rank_id = r.id
                        LEFT JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                        LEFT JOIN positions pos ON ps.position_id = pos.id
                        LEFT JOIN subdivisions sub ON e.subdivision_id = sub.id
                        WHERE p.discord_id = %s AND p.is_dismissal = false
                    """, (self.target_user.id,))
                    
                    personnel_record = cursor.fetchone()
                    if not personnel_record:
                        print(f"‚ùå DISMISSAL: User not found or already dismissed")
                        await interaction.followup.send(
                            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —É–∂–µ —É–≤–æ–ª–µ–Ω.",
                            ephemeral=True
                        )
                        return False
                    
                    personnel_id = personnel_record['id']
                    employee_id = personnel_record['employee_id']
                    current_time = datetime.now(timezone.utc)
                    
                    # Step 1: Remove from employees table if exists
                    if employee_id:
                        cursor.execute("DELETE FROM employees WHERE id = %s", (employee_id,))
                        print(f"‚úÖ DISMISSAL: Removed employee record {employee_id}")
                    
                    # Step 2: Mark personnel as dismissed
                    cursor.execute("""
                        UPDATE personnel 
                        SET is_dismissal = true, 
                            dismissal_date = %s, 
                            last_updated = %s
                        WHERE id = %s
                    """, (current_time.date(), current_time, personnel_id))
                    print(f"‚úÖ DISMISSAL: Marked personnel {personnel_id} as dismissed")
                    
                    # Step 3: Get moderator's personnel ID
                    cursor.execute("""
                        SELECT id FROM personnel WHERE discord_id = %s
                    """, (interaction.user.id,))
                    
                    moderator_record = cursor.fetchone()
                    moderator_personnel_id = moderator_record['id'] if moderator_record else None
                    
                    # Step 4: Add history entry
                    changes_data = {
                        "rank": {
                            "new": None,
                            "previous": personnel_record.get('current_rank')
                        },
                        "position": {
                            "new": None,
                            "previous": personnel_record.get('current_position')
                        },
                        "subdivision": {
                            "new": None,
                            "previous": personnel_record.get('current_subdivision')
                        },
                        "dismissal_info": {
                            "reason": reason,
                            "static": personnel_record.get('static', ''),
                            "moderator_info": interaction.user.display_name,
                            "dismissed_at": current_time.isoformat()
                        }
                    }
                    
                    cursor.execute("""
                        INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """, (
                        personnel_id,
                        3,  # Action ID for "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã"
                        moderator_personnel_id,  # Can be NULL if moderator not in personnel
                        reason,
                        json.dumps(changes_data, ensure_ascii=False),
                        current_time
                    ))
                    print(f"‚úÖ DISMISSAL: Added history entry for dismissal")
                
                success = True
                message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–≤–æ–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                print(f"‚úÖ DISMISSAL: {message}")
                
            except Exception as db_error:
                print(f"‚ùå DISMISSAL: Database error: {db_error}")
                import traceback
                traceback.print_exc()
                success = False
                message = f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(db_error)}"
            
            if success:
                print(f"‚úÖ DISMISSAL: PersonnelManager processed successfully: {message}")
                
                # Send audit notification using centralized logger
                audit_message_url = None
                try:
                    from utils.audit_logger import audit_logger, AuditAction
                    from utils.postgresql_pool import get_db_cursor
                    config = load_config()
                    
                    audit_personnel_data = {
                        'name': personnel_data_summary.get('full_name', self.target_user.display_name),
                        'static': personnel_data_summary.get('static', ''),
                        'rank': personnel_data_summary.get('rank', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'department': personnel_data_summary.get('department', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'position': personnel_data_summary.get('position', ''),
                        'reason': reason
                    }
                    
                    # Send audit and get message URL for evidence
                    audit_message_url = await audit_logger.send_personnel_audit(
                        guild=interaction.guild,
                        action=await AuditAction.DISMISSAL(),
                        target_user=self.target_user,
                        moderator=interaction.user,
                        personnel_data=audit_personnel_data,
                        config=config
                    )
                    print(f"‚úÖ DISMISSAL: Audit notification sent")
                    
                    # Get personnel_id for auto-blacklist check
                    try:
                        with get_db_cursor() as cursor:
                            cursor.execute(
                                "SELECT id FROM personnel WHERE discord_id = %s;",
                                (self.target_user.id,)
                            )
                            result = cursor.fetchone()
                            
                            if result:
                                personnel_id = result['id']
                                
                                # Check and send auto-blacklist if needed
                                was_blacklisted = await audit_logger.check_and_send_auto_blacklist(
                                    guild=interaction.guild,
                                    target_user=self.target_user,
                                    moderator=interaction.user,
                                    personnel_id=personnel_id,
                                    personnel_data=audit_personnel_data,
                                    audit_message_url=audit_message_url,
                                    config=config
                                )
                                
                                if was_blacklisted:
                                    print(f"‚úÖ DISMISSAL: Auto-blacklist triggered for {audit_personnel_data.get('name')}")
                            else:
                                print(f"‚ö†Ô∏è DISMISSAL: Personnel not found in DB for auto-blacklist check: {self.target_user.id}")
                                
                    except Exception as blacklist_error:
                        print(f"‚ö†Ô∏è DISMISSAL: Error in auto-blacklist check: {blacklist_error}")
                        # Don't fail the whole dismissal if blacklist check fails
                        
                except Exception as audit_error:
                    print(f"‚ö†Ô∏è DISMISSAL: Failed to send audit notification: {audit_error}")
                
                # Send DM to dismissed user
                try:
                    dm_embed = discord.Embed(
                        title="üìã –í—ã —É–≤–æ–ª–µ–Ω—ã —Å–æ —Å–ª—É–∂–±—ã",
                        description=(
                            "–í—ã –±—ã–ª–∏ —É–≤–æ–ª–µ–Ω—ã –∏–∑ –í–æ–æ—Ä—É–∂–µ–Ω–Ω—ã—Ö –°–∏–ª –†–§.\n\n"
                            "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–ª—É–∂–±—É!"
                        ),
                        color=discord.Color.orange()
                    )
                    dm_embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è", value=reason, inline=False)
                    dm_embed.add_field(name="–£–≤–æ–ª–∏–ª", value=interaction.user.display_name, inline=False)
                    
                    await self.target_user.send(embed=dm_embed)
                    print(f"‚úÖ DISMISSAL: DM sent to {self.target_user.display_name}")
                except discord.Forbidden:
                    print(f"‚ö†Ô∏è DISMISSAL: Could not send DM to {self.target_user.display_name} (DMs disabled)")
                except Exception as dm_error:
                    print(f"‚ö†Ô∏è DISMISSAL: Failed to send DM: {dm_error}")
                
                # Step: Remove Discord roles and reset nickname (like button dismissal does)
                try:
                    config = load_config()
                    await self._remove_military_roles_and_reset_nickname(interaction.guild, config)
                    print(f"‚úÖ DISMISSAL: Role removal process completed")
                except Exception as role_error:
                    print(f"‚ö†Ô∏è DISMISSAL: Failed to remove roles: {role_error}")
                    # Continue even if role removal fails
            else:
                print(f"‚ùå DISMISSAL: PersonnelManager failed: {message}")
            
            return success
            
        except Exception as e:
            print(f"‚ùå DISMISSAL: Error processing dismissal: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def _remove_military_roles_and_reset_nickname(self, guild, config):
        """Remove all roles except excluded ones, then set dismissal nickname using nickname_manager"""
        try:
            # Step 1: Remove ALL roles except excluded ones
            excluded_role_ids = set(config.get('excluded_roles', []))
            roles_to_remove = []
            
            for role in self.target_user.roles:
                # Skip @everyone and excluded roles
                if role.is_default() or role.id in excluded_role_ids:
                    continue
                roles_to_remove.append(role)
            
            # Remove all roles at once for better performance
            if roles_to_remove:
                try:
                    await self.target_user.remove_roles(*roles_to_remove, reason="–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã —á–µ—Ä–µ–∑ –ü–ö–ú")
                    print(f"‚úÖ DISMISSAL: Removed {len(roles_to_remove)} roles from {self.target_user.display_name}")
                except discord.Forbidden:
                    print(f"‚ö†Ô∏è DISMISSAL: No permission to remove roles")
                except Exception as e:
                    print(f"‚ùå DISMISSAL: Error removing roles: {e}")
            else:
                print(f"‚ÑπÔ∏è DISMISSAL: No roles to remove for {self.target_user.display_name}")
            
            # Step 2: Set dismissal nickname using nickname_manager
            try:
                dismissal_nickname = await nickname_manager.handle_dismissal(
                    member=self.target_user,
                    reason=self.reason_input.value if hasattr(self, 'reason_input') else "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ü–ö–ú"
                )
                if dismissal_nickname:
                    print(f"‚úÖ DISMISSAL: Set dismissal nickname: {self.target_user.display_name} -> {dismissal_nickname}")
                else:
                    print(f"‚ö†Ô∏è DISMISSAL: Failed to set dismissal nickname, keeping current")
            except Exception as nickname_error:
                print(f"‚ùå DISMISSAL: Error setting dismissal nickname: {nickname_error}")
                # Continue even if nickname change fails
            
        except Exception as e:
            print(f"‚ùå DISMISSAL: Error in _remove_military_roles_and_reset_nickname: {e}")
            raise

@app_commands.context_menu(name='–£–≤–æ–ª–∏—Ç—å')
@handle_context_errors
async def dismiss_user(interaction: discord.Interaction, user: discord.User):
    """Context menu command to dismiss user using PersonnelManager"""
    # Check permissions
    config = load_config()
    if not is_moderator_or_admin(interaction.user, config):
        await interaction.response.send_message(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            ephemeral=True
        )
        return
    
    # Get member object if user is on server, or create mock user
    if isinstance(user, discord.Member):
        target_user = user
    else:
        # Try to get member object from guild
        target_user = interaction.guild.get_member(user.id)
        if not target_user:
            # Create mock user object for users who left the server
            class MockUser:
                def __init__(self, user_obj):
                    self.id = user_obj.id
                    self.display_name = user_obj.display_name
                    self.mention = user_obj.mention
                    self.name = user_obj.name
                    self._is_mock = True
                    # Add required attributes for moderation checks
                    self.roles = []  # Empty roles list
                    self.guild_permissions = discord.Permissions.none()  # No permissions
            
            target_user = MockUser(user)
    
    # Check if moderator can moderate this user (hierarchy check)
    if not can_moderate_user(interaction.user, target_user, config):
        await interaction.response.send_message(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.",
            ephemeral=True
        )
        return
    
    # Open dismissal modal
    modal = DismissalModal(target_user)
    await interaction.response.send_modal(modal)
    print(f"‚úÖ Dismissal modal sent for {target_user.display_name}")


class DepartmentActionView(ui.View):
    """View for choosing department action type (join/transfer)"""
    
    def __init__(self, target_user: discord.Member):
        super().__init__(timeout=300)
        self.target_user = target_user
    
    @ui.button(label="–ü—Ä–∏–Ω—è—Ç—å –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.green, emoji="‚ûï")
    async def join_department(self, interaction: discord.Interaction, button: ui.Button):
        """Handle department join action"""
        view = DepartmentSelectView(self.target_user, action_type="join")
        await interaction.response.send_message(
            f"üè¢ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è {self.target_user.display_name}:**",
            view=view,
            ephemeral=True
        )
    
    @ui.button(label="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", style=discord.ButtonStyle.blurple, emoji="üîÑ")
    async def transfer_department(self, interaction: discord.Interaction, button: ui.Button):
        """Handle department transfer action"""
        view = DepartmentSelectView(self.target_user, action_type="transfer")
        await interaction.response.send_message(
            f"üîÑ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ {self.target_user.display_name}:**",
            view=view,
            ephemeral=True
        )


class DepartmentSelectView(ui.View):
    """View for selecting department from config"""
    
    def __init__(self, target_user: discord.Member, action_type: str):
        super().__init__(timeout=300)
        self.target_user = target_user
        self.action_type = action_type  # "join" or "transfer"
        
        # Add department select menu
        self.add_item(DepartmentSelect(target_user, action_type))


class DepartmentSelect(ui.Select):
    """Select menu for choosing department"""
    
    def __init__(self, target_user: discord.Member, action_type: str):
        self.target_user = target_user
        self.action_type = action_type
        
        # Load departments from config
        from utils.config_manager import load_config
        config = load_config()
        departments = config.get('departments', {})
        
        # Create options from config departments
        options = []
        for dept_key, dept_config in departments.items():
            name = dept_config.get('name', dept_key)
            abbreviation = dept_config.get('abbreviation', '')
            emoji = dept_config.get('emoji', 'üè¢')
            
            display_name = f"{name}"
            if abbreviation:
                display_name += f" ({abbreviation})"
            
            options.append(discord.SelectOption(
                label=display_name,
                value=dept_key,
                emoji=emoji,
                description=f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ {name}"
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
            options=options[:25],  # Discord limit
            min_values=1,
            max_values=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Handle department selection"""
        selected_dept = self.values[0]
        
        # Load config to get department name
        from utils.config_manager import load_config
        config = load_config()
        dept_config = config.get('departments', {}).get(selected_dept, {})
        dept_name = dept_config.get('name', selected_dept)
        
        # Show position selection
        view = PositionSelectView(self.target_user, self.action_type, selected_dept, dept_name)
        
        action_text = "–ø—Ä–∏–Ω—è—Ç–∏—è –≤" if self.action_type == "join" else "–ø–µ—Ä–µ–≤–æ–¥–∞ –≤"
        await interaction.response.send_message(
            f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è {action_text} {dept_name}:**",
            view=view,
            ephemeral=True
        )


class PositionSelectView(ui.View):
    """View for selecting position within department"""
    
    def __init__(self, target_user: discord.Member, action_type: str, dept_key: str, dept_name: str):
        super().__init__(timeout=300)
        self.target_user = target_user
        self.action_type = action_type
        self.dept_key = dept_key
        self.dept_name = dept_name
        
        # Add position select menu
        self.add_item(PositionSelect(target_user, action_type, dept_key, dept_name))


class PositionSelect(ui.Select):
    """Select menu for choosing position within department"""
    
    def __init__(self, target_user: discord.Member, action_type: str, dept_key: str, dept_name: str):
        self.target_user = target_user
        self.action_type = action_type
        self.dept_key = dept_key
        self.dept_name = dept_name
        
        # Get positions for this department from database
        options = []
        
        # Add "–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" option first
        options.append(discord.SelectOption(
            label="–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            value="no_position",
            description="–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å",
            emoji="üì§"
        ))
        
        try:
            from utils.postgresql_pool import get_db_cursor
            
            with get_db_cursor() as cursor:
                # Get subdivision ID by name
                cursor.execute("""
                    SELECT id FROM subdivisions 
                    WHERE name = %s OR abbreviation = %s
                    LIMIT 1;
                """, (dept_name, dept_key))
                
                subdivision_result = cursor.fetchone()
                if subdivision_result:
                    subdivision_id = subdivision_result['id']
                    
                    # Get positions for this subdivision
                    cursor.execute("""
                        SELECT DISTINCT p.id, p.name 
                        FROM positions p
                        JOIN position_subdivision ps ON p.id = ps.position_id
                        WHERE ps.subdivision_id = %s
                        ORDER BY p.name;
                    """, (subdivision_id,))
                    
                    positions = cursor.fetchall()
                    
                    for pos in positions:
                        options.append(discord.SelectOption(
                            label=pos['name'],
                            value=str(pos['id']),
                            description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ {dept_name}"
                        ))
                        
        except Exception as e:
            print(f"Error loading positions: {e}")
            # Fallback: if no positions found, add a generic option
            if len(options) == 1:  # Only "–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" option
                options.append(discord.SelectOption(
                    label="–°—Ç–∞–∂—ë—Ä",
                    value="default",
                    description="–î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
            options=options[:25],  # Discord limit
            min_values=1,
            max_values=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Handle position selection and execute department change"""
        selected_position_id = self.values[0]
        position_name = None  # Will be None for "no_position"
        
        # Handle different position selections
        if selected_position_id == "no_position":
            position_name = None  # No position assigned
        elif selected_position_id == "default":
            position_name = "–°—Ç–∞–∂—ë—Ä"  # Default fallback
        else:
            # Get position name from database
            try:
                from utils.postgresql_pool import get_db_cursor
                with get_db_cursor() as cursor:
                    cursor.execute("SELECT name FROM positions WHERE id = %s;", (selected_position_id,))
                    result = cursor.fetchone()
                    if result:
                        position_name = result['name']
                    else:
                        position_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
            except Exception as e:
                print(f"Error getting position name: {e}")
                position_name = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"
        
        # Execute department change with optional position
        await self._execute_department_change(interaction, position_name, selected_position_id)
    
    async def _assign_position_in_db(self, user_discord_id: int, position_id: str, position_name: str, moderator_discord_id: int) -> bool:
        """Assign position to user in database and create history record"""
        try:
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone, timedelta
            
            # Get old position ID and name for role updates and history
            old_position_id = None
            old_position_name = None
            user_member = None
            try:
                # Get user as member for role updates
                for guild in self.bot.guilds if hasattr(self, 'bot') else []:
                    user_member = guild.get_member(user_discord_id)
                    if user_member:
                        break
                
                if not user_member and hasattr(self, 'target_user'):
                    user_member = self.target_user
                
                # Get old position
                with get_db_cursor() as cursor:
                    cursor.execute("""
                        SELECT ps.position_id, pos.name as position_name
                        FROM personnel p
                        JOIN employees e ON p.id = e.personnel_id
                        LEFT JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                        LEFT JOIN positions pos ON ps.position_id = pos.id
                        WHERE p.discord_id = %s AND p.is_dismissal = false
                    """, (user_discord_id,))
                    old_pos_result = cursor.fetchone()
                    if old_pos_result and old_pos_result['position_id']:
                        old_position_id = old_pos_result['position_id']
                        old_position_name = old_pos_result['position_name']
            except Exception as e:
                print(f"Warning: Could not get old position for role update: {e}")
            
            with get_db_cursor() as cursor:
                # Get personnel ID
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s AND is_dismissal = false;", (user_discord_id,))
                personnel_result = cursor.fetchone()
                if not personnel_result:
                    return False
                personnel_id = personnel_result['id']
                
                # Get position_subdivision_id for the current user's subdivision
                if position_id == "default":
                    # Handle default case - find –°—Ç–∞–∂—ë—Ä position
                    cursor.execute("""
                        SELECT ps.id FROM position_subdivision ps
                        JOIN positions p ON ps.position_id = p.id
                        JOIN employees e ON ps.subdivision_id = e.subdivision_id
                        WHERE e.personnel_id = %s AND p.name = '–°—Ç–∞–∂—ë—Ä'
                        LIMIT 1;
                    """, (personnel_id,))
                else:
                    # Normal case - find position_subdivision_id
                    cursor.execute("""
                        SELECT ps.id FROM position_subdivision ps
                        JOIN employees e ON ps.subdivision_id = e.subdivision_id
                        WHERE e.personnel_id = %s AND ps.position_id = %s
                        LIMIT 1;
                    """, (personnel_id, position_id))
                
                ps_result = cursor.fetchone()
                if not ps_result:
                    return False
                position_subdivision_id = ps_result['id']
                
                # Update employee with new position
                cursor.execute("""
                    UPDATE employees 
                    SET position_subdivision_id = %s
                    WHERE personnel_id = %s;
                """, (position_subdivision_id, personnel_id))
                
                # Get moderator personnel ID for history
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s;", (moderator_discord_id,))
                moderator_result = cursor.fetchone()
                if not moderator_result:
                    return False
                moderator_personnel_id = moderator_result['id']
                
                # Create history record for position assignment (action_id = 5)
                import json
                changes = {
                    "rank": {
                        "new": None,
                        "previous": None
                    },
                    "position": {
                        "new": position_name,
                        "previous": old_position_name  # Now tracking previous position
                    },
                    "subdivision": {
                        "new": None,
                        "previous": None
                    }
                }
                
                cursor.execute("""
                    INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                    VALUES (%s, %s, %s, %s, %s, %s);
                """, (
                    personnel_id,
                    5,  # Position assignment action_id
                    moderator_personnel_id,
                    None,  # details = NULL
                    json.dumps(changes, ensure_ascii=False),
                    datetime.now(timezone(timedelta(hours=3)))  # Moscow time
                ))
                
                # Update Discord roles for position change
                if user_member:
                    try:
                        new_position_id = int(position_id) if position_id.isdigit() else None
                        await position_manager.smart_update_user_position_roles(
                            user_member.guild,
                            user_member,
                            new_position_id
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error updating position roles: {e}")
                
                return True
                
        except Exception as e:
            print(f"Error in _assign_position_in_db: {e}")
            return False
    
    async def _execute_department_change(self, interaction: discord.Interaction, position_name: str, position_id: str):
        """Execute the department change (same as approving department application)"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Import necessary modules
            from utils.database_manager import PersonnelManager, personnel_manager
            from utils.audit_logger import audit_logger, AuditAction
            from utils.config_manager import load_config
            from utils.ping_manager import ping_manager
            
            # Initialize managers
            pm = PersonnelManager()
            config = load_config()
            
            # Step 1: Process department change in database
            application_data = {
                'target_department': self.dept_name,
                'reason': None,  # details = NULL
                'application_type': self.action_type
            }
            
            moderator_info = f"{interaction.user.display_name} ({interaction.user.id})"
            
            if self.action_type == "transfer":
                success, db_message = await pm.process_department_transfer(
                    application_data=application_data,
                    user_discord_id=self.target_user.id,
                    moderator_discord_id=interaction.user.id,
                    moderator_info=moderator_info
                )
            else:
                success, db_message = await pm.process_department_join(
                    application_data=application_data,
                    user_discord_id=self.target_user.id,
                    moderator_discord_id=interaction.user.id,
                    moderator_info=moderator_info
                )
            
            if not success:
                await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞ –ë–î (–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ):** {db_message}", ephemeral=True)
                return
            
            # Step 2: Process position assignment in database (only if position selected)
            position_had_no_position_before = False  # Track if user had no position before
            
            if position_name is not None and position_id != "no_position":
                position_success = await self._assign_position_in_db(
                    self.target_user.id, 
                    position_id, 
                    position_name, 
                    interaction.user.id
                )
                
                if not position_success:
                    await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞ –ë–î (–¥–æ–ª–∂–Ω–æ—Å—Ç—å):** –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", ephemeral=True)
                    return
            elif position_id == "no_position":
                # User selected "–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" - check if they had a position before and remove it
                try:
                    # Get current position before removal
                    current_position = await self._get_current_user_position(self.target_user.id)
                    
                    if current_position and current_position.strip():
                        # User had a position, remove it from database
                        position_removal_success = await self._remove_position_from_db(
                            self.target_user.id,
                            current_position,
                            interaction.user.id
                        )
                        
                        if not position_removal_success:
                            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞ –ë–î (—Å–Ω—è—Ç–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏):** –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", ephemeral=True)
                            return
                        
                        # Set position_name to None to trigger demotion audit
                        position_name = None
                        print(f"‚úÖ Position removed from database: {current_position} for user {self.target_user.id}")
                    else:
                        # User had no position to remove, skip position audit
                        position_name = "skip_audit"
                        position_had_no_position_before = True
                        print(f"‚ÑπÔ∏è User {self.target_user.id} had no position to remove - skipping position audit")
                        
                except Exception as e:
                    print(f"‚ùå Error checking/removing current position: {e}")
                    await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω—è—Ç–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", ephemeral=True)
                    return
            else:
                # Handle "no position" case - check if user had a position before
                current_position = await self._get_current_user_position(self.target_user.id)
                if current_position:
                    # User had a position, so we're demoting them
                    position_success = await self._remove_position_from_db(
                        self.target_user.id,
                        current_position,
                        interaction.user.id
                    )
                    if not position_success:
                        await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞ –ë–î (—Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–µ):** –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏", ephemeral=True)
                        return
                    position_name = None  # Will trigger position demotion audit
                else:
                    # User had no position before, so no position audit needed
                    position_name = "skip_audit"  # Special marker to skip position audit
            
            # Step 3: Update Discord roles
            dept_role_id = ping_manager.get_department_role_id(self.dept_key)
            if dept_role_id:
                dept_role = interaction.guild.get_role(dept_role_id)
                if dept_role:
                    # Remove all department roles
                    all_dept_role_ids = ping_manager.get_all_department_role_ids()
                    for role_id in all_dept_role_ids:
                        role = interaction.guild.get_role(role_id)
                        if role and role in self.target_user.roles:
                            try:
                                await self.target_user.remove_roles(role, reason="Department change via context menu")
                            except:
                                pass
                    
                    # Add new department role
                    await self.target_user.add_roles(dept_role, reason=f"Department change by {interaction.user}")
            
            # Step 3.5: Update position roles after department change
            # Since department transfer clears all positions, we need to remove old position roles
            try:
                from utils.database_manager.position_manager import position_manager
                await position_manager.smart_update_user_position_roles(
                    self.target_user.guild,
                    self.target_user,
                    None  # No position after department transfer
                )
                print(f"‚úÖ Position roles cleared after department transfer for {self.target_user.display_name}")
            except Exception as position_role_error:
                print(f"‚ö†Ô∏è Warning: Failed to clear position roles after department transfer: {position_role_error}")
            
            # Step 4: Update nickname using nickname_manager
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è –∑–≤–∞–Ω–∏–µ –∏–∑ employees)
                personnel_data_for_nick = await pm.get_personnel_summary(self.target_user.id)
                current_rank = personnel_data_for_nick.get('rank', '–†—è–¥–æ–≤–æ–π') if personnel_data_for_nick else '–†—è–¥–æ–≤–æ–π'
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º nickname_manager –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–Ω —Å–∞–º –ø–æ–ª—É—á–∏—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ë–î)
                new_nickname = await nickname_manager.handle_transfer(
                    member=self.target_user,
                    subdivision_key=self.dept_key,  # –ü—Ä—è–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    rank_name=current_rank
                )
                
                if new_nickname:
                    print(f"‚úÖ DEPT TRANSFER: –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ nickname_manager: {self.target_user.display_name} -> {new_nickname}")
                else:
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
                    expected_nickname = nickname_manager.preview_nickname_change(
                        current_nickname=self.target_user.display_name,
                        operation='transfer',
                        subdivision_abbr=config.get('departments', {}).get(self.dept_key, {}).get('abbreviation', self.dept_key),
                        rank_abbr=current_rank,
                        first_name=personnel_data_for_nick.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if personnel_data_for_nick else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        last_name=personnel_data_for_nick.get('last_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if personnel_data_for_nick else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    )
                    print(f"‚ùå DEPT TRANSFER ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ nickname_manager. –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º: {expected_nickname}")
                    
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                    dept_config = config.get('departments', {}).get(self.dept_key, {})
                    abbreviation = dept_config.get('abbreviation', '')
                    if abbreviation:
                        fallback_nick = f"{abbreviation} | {self.target_user.name}"
                        await self.target_user.edit(nick=fallback_nick[:32], reason="Department transfer fallback")
                        print(f"‚ö†Ô∏è DEPT TRANSFER FALLBACK: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –Ω–∏–∫–Ω–µ–π–º: {fallback_nick[:32]}")
                    
            except Exception as e:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
                try:
                    personnel_data_for_error = await pm.get_personnel_summary(self.target_user.id)
                    expected_nickname = nickname_manager.preview_nickname_change(
                        current_nickname=self.target_user.display_name,
                        operation='transfer',
                        subdivision_abbr=config.get('departments', {}).get(self.dept_key, {}).get('abbreviation', self.dept_key),
                        rank_abbr=personnel_data_for_error.get('rank', '–†—è–¥–æ–≤–æ–π') if personnel_data_for_error else '–†—è–¥–æ–≤–æ–π',
                        first_name=personnel_data_for_error.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if personnel_data_for_error else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        last_name=personnel_data_for_error.get('last_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if personnel_data_for_error else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    )
                    print(f"‚ùå DEPT TRANSFER EXCEPTION: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞: {e}. –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º: {expected_nickname}")
                except Exception as preview_error:
                    print(f"‚ùå DEPT TRANSFER EXCEPTION: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ \"{expected_nickname}\": {e}. –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {preview_error}")
                
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –¥–∞–∂–µ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
                try:
                    dept_config = config.get('departments', {}).get(self.dept_key, {})
                    abbreviation = dept_config.get('abbreviation', '')
                    if abbreviation:
                        fallback_nick = f"{abbreviation} | {self.target_user.name}"
                        await self.target_user.edit(nick=fallback_nick[:32], reason="Department transfer fallback after error")
                        print(f"‚ö†Ô∏è DEPT TRANSFER EXCEPTION FALLBACK: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –Ω–∏–∫–Ω–µ–π–º: {fallback_nick[:32]}")
                except Exception as fallback_error:
                    print(f"‚ùå DEPT TRANSFER COMPLETE FAILURE: –î–∞–∂–µ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {fallback_error}")
            
            # Step 5: Send FIRST audit notification - Department Change
            personnel_data = await pm.get_personnel_data_for_audit(self.target_user.id)
            if not personnel_data:
                personnel_data = {
                    'name': self.target_user.display_name,
                    'static': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'rank': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    'department': self.dept_name,
                    'position': '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'  # Don't include position in first audit
                }
            else:
                personnel_data['department'] = self.dept_name
                personnel_data['position'] = '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'  # Don't include position in first audit
            
            if self.action_type == "transfer":
                action1 = await AuditAction.DEPARTMENT_TRANSFER()
            else:
                action1 = await AuditAction.DEPARTMENT_JOIN()
            
            await audit_logger.send_personnel_audit(
                guild=interaction.guild,
                action=action1,
                target_user=self.target_user,
                moderator=interaction.user,
                personnel_data=personnel_data,
                config=config
            )
            
            # Step 6: Send SECOND audit notification - Position Assignment/Demotion (only if needed)
            if position_name != "skip_audit":
                if position_name is None:
                    # Position demotion
                    personnel_data['position'] = None
                    action2 = await AuditAction.POSITION_DEMOTION()
                else:
                    # Position assignment
                    personnel_data['position'] = position_name
                    action2 = await AuditAction.POSITION_ASSIGNMENT()
                
                await audit_logger.send_personnel_audit(
                    guild=interaction.guild,
                    action=action2,
                    target_user=self.target_user,
                    moderator=interaction.user,
                    personnel_data=personnel_data,
                    config=config
                )
                
                position_info = f", –¥–æ–ª–∂–Ω–æ—Å—Ç—å: **{position_name or '—Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏'}**"
                audit_count = "2 –∫–∞–¥—Ä–æ–≤—ã—Ö –∞—É–¥–∏—Ç–∞: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ + –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
            else:
                # No position audit needed (user had no position before)
                if position_had_no_position_before:
                    position_info = ", –¥–æ–ª–∂–Ω–æ—Å—Ç—å: **–±–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –∏ —Ä–∞–Ω–µ–µ)**"
                else:
                    position_info = ", –¥–æ–ª–∂–Ω–æ—Å—Ç—å: **–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π**"
                audit_count = "1 –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
            
            # Step 7: Success message
            action_text = "–ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤" if self.action_type == "transfer" else "–ø—Ä–∏–Ω—è—Ç –≤"
            
            await interaction.followup.send(
                f"‚úÖ **{self.target_user.display_name}** —É—Å–ø–µ—à–Ω–æ {action_text} **{self.dept_name}**{position_info}\n"
                f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {audit_count}",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in department change: {e}")
            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
    
    async def _get_current_user_position(self, user_discord_id: int) -> str:
        """Get user's current position name or None if no position"""
        try:
            from utils.postgresql_pool import get_db_cursor
            
            with get_db_cursor() as cursor:
                cursor.execute("""
                    SELECT pos.name 
                    FROM employees e
                    JOIN personnel p ON e.personnel_id = p.id
                    JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                    JOIN positions pos ON ps.position_id = pos.id
                    WHERE p.discord_id = %s AND p.is_dismissal = false;
                """, (user_discord_id,))
                
                result = cursor.fetchone()
                return result['name'] if result else None
                
        except Exception as e:
            print(f"Error getting current position: {e}")
            return None
    
    async def _remove_position_from_db(self, user_discord_id: int, position_name: str, moderator_discord_id: int) -> bool:
        """Remove position from user in database and create history record"""
        try:
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone, timedelta
            import json
            
            # Get old position ID for role updates
            old_position_id = None
            user_member = None
            try:
                # Get user as member for role updates
                if hasattr(self, 'target_user'):
                    user_member = self.target_user
                
                # Get old position
                with get_db_cursor() as cursor:
                    cursor.execute("""
                        SELECT ps.position_id 
                        FROM personnel p
                        JOIN employees e ON p.id = e.personnel_id
                        LEFT JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                        WHERE p.discord_id = %s AND p.is_dismissal = false
                    """, (user_discord_id,))
                    old_pos_result = cursor.fetchone()
                    if old_pos_result and old_pos_result['position_id']:
                        old_position_id = old_pos_result['position_id']
            except Exception as e:
                print(f"Warning: Could not get old position for role update: {e}")
            
            with get_db_cursor() as cursor:
                # Get personnel ID
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s AND is_dismissal = false;", (user_discord_id,))
                personnel_result = cursor.fetchone()
                if not personnel_result:
                    return False
                personnel_id = personnel_result['id']
                
                # Clear position_subdivision_id in employees
                cursor.execute("""
                    UPDATE employees 
                    SET position_subdivision_id = NULL
                    WHERE personnel_id = %s;
                """, (personnel_id,))
                
                # Get moderator personnel ID for history
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s;", (moderator_discord_id,))
                moderator_result = cursor.fetchone()
                if not moderator_result:
                    return False
                moderator_personnel_id = moderator_result['id']
                
                # Create history record for position demotion (action_id = 6)
                changes = {
                    "rank": {
                        "new": None,
                        "previous": None
                    },
                    "position": {
                        "new": None,  # Removed position
                        "previous": position_name
                    },
                    "subdivision": {
                        "new": None,
                        "previous": None
                    }
                }
                
                cursor.execute("""
                    INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                    VALUES (%s, %s, %s, %s, %s, %s);
                """, (
                    personnel_id,
                    6,  # Position demotion action_id
                    moderator_personnel_id,
                    None,  # details = NULL
                    json.dumps(changes, ensure_ascii=False),
                    datetime.now(timezone(timedelta(hours=3)))  # Moscow time
                ))
                
                # Update Discord roles after position removal
                if user_member:
                    try:
                        # Remove all position roles using smart update
                        await position_manager.smart_update_user_position_roles(
                            user_member.guild,
                            user_member,
                            None  # No new position
                        )
                        print(f"‚úÖ Position role removed for {user_member.display_name}")
                    except Exception as role_error:
                        print(f"Warning: Failed to remove position role: {role_error}")
                
                return True
                
        except Exception as e:
            print(f"Error in _remove_position_from_db: {e}")
            return False





class PositionOnlySelectView(ui.View):
    """View for selecting position only (for position assignment)"""
    
    def __init__(self, target_user: discord.Member):
        super().__init__(timeout=300)
        self.target_user = target_user
        
        # Add position select menu
        self.add_item(PositionOnlySelect(target_user))


class PositionOnlySelect(ui.Select):
    """Select menu for choosing position for assignment"""
    
    def __init__(self, target_user: discord.Member):
        self.target_user = target_user
        
        # Get user's current subdivision from database and available positions
        options = []
        self.subdivision_name = None
        
        try:
            from utils.postgresql_pool import get_db_cursor
            
            with get_db_cursor() as cursor:
                # Get user's current subdivision
                cursor.execute("""
                    SELECT s.name 
                    FROM employees e
                    JOIN personnel p ON e.personnel_id = p.id
                    JOIN subdivisions s ON e.subdivision_id = s.id
                    WHERE p.discord_id = %s AND p.is_dismissal = false;
                """, (target_user.id,))
                
                subdivision_result = cursor.fetchone()
                if not subdivision_result:
                    # User not in any subdivision
                    options = [discord.SelectOption(
                        label="‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏",
                        value="error",
                        description="–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"
                    )]
                else:
                    self.subdivision_name = subdivision_result['name']
                    
                    # Get subdivision ID
                    cursor.execute("SELECT id FROM subdivisions WHERE name = %s;", (self.subdivision_name,))
                    subdivision_id_result = cursor.fetchone()
                    
                    if subdivision_id_result:
                        subdivision_id = subdivision_id_result['id']
                        
                        # Get positions for this subdivision
                        cursor.execute("""
                            SELECT DISTINCT p.id, p.name 
                            FROM positions p
                            JOIN position_subdivision ps ON p.id = ps.position_id
                            WHERE ps.subdivision_id = %s
                            ORDER BY p.name;
                        """, (subdivision_id,))
                        
                        positions = cursor.fetchall()
                        
                        if positions:
                            # Add "–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏" option first
                            options.append(discord.SelectOption(
                                label="–ë–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                                value="no_position",
                                description="–†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Å —Ç–µ–∫—É—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                                emoji="üì§"
                            ))
                            
                            for pos in positions:
                                options.append(discord.SelectOption(
                                    label=pos['name'],
                                    value=str(pos['id']),
                                    description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ {self.subdivision_name}"
                                ))
                        else:
                            options = [discord.SelectOption(
                                label="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                                value="no_positions",
                                description=f"–í {self.subdivision_name} –Ω–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                            )]
                        
        except Exception as e:
            print(f"Error loading positions for assignment: {e}")
            options = [discord.SelectOption(
                label="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                value="db_error",
                description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            )]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...",
            options=options[:25],  # Discord limit
            min_values=1,
            max_values=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Handle position selection for assignment"""
        selected_position_id = self.values[0]
        
        # Check for error states
        if selected_position_id in ["error", "no_positions", "db_error"]:
            error_messages = {
                "error": "‚ùå **–û—à–∏–±–∫–∞:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏.\n–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ¬ª.",
                "no_positions": f"‚ùå **–û—à–∏–±–∫–∞:** –í –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ ¬´{self.subdivision_name}¬ª –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
                "db_error": "‚ùå **–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            }
            await interaction.response.send_message(error_messages[selected_position_id], ephemeral=True)
            return
        
        # Handle "no_position" selection
        if selected_position_id == "no_position":
            # Execute position removal (same as demotion button)
            await self._execute_position_removal(interaction)
            return
        
        # Get position name for regular positions
        position_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
        try:
            from utils.postgresql_pool import get_db_cursor
            with get_db_cursor() as cursor:
                cursor.execute("SELECT name FROM positions WHERE id = %s;", (selected_position_id,))
                result = cursor.fetchone()
                if result:
                    position_name = result['name']
        except Exception as e:
            print(f"Error getting position name: {e}")
        
        # Execute position assignment
        await self._execute_position_assignment(interaction, position_name, selected_position_id)
    
    async def _execute_position_removal(self, interaction: discord.Interaction):
        """Execute position removal (same as demote_from_position button)"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Check if user has a position to remove
            current_position = await self._get_current_position()
            if not current_position:
                await interaction.followup.send(
                    f"‚ùå **{self.target_user.display_name}** –Ω–µ –∏–º–µ–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è.",
                    ephemeral=True
                )
                return
            
            # Execute position removal
            success = await self._remove_position_from_db_standalone(
                self.target_user.id,
                current_position,
                interaction.user.id
            )
            
            if not success:
                await interaction.followup.send(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ë–î:** –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                    ephemeral=True
                )
                return
            
            # Send audit notification
            try:
                from utils.audit_logger import audit_logger, AuditAction
                from utils.config_manager import load_config
                from utils.database_manager import PersonnelManager
                
                pm = PersonnelManager()
                config = load_config()
                
                # Get personnel data for audit
                personnel_data = await pm.get_personnel_data_for_audit(self.target_user.id)
                if not personnel_data:
                    personnel_data = {
                        'name': self.target_user.display_name,
                        'static': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'rank': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'department': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'position': None
                    }
                else:
                    personnel_data['position'] = None
                
                await audit_logger.send_personnel_audit(
                    guild=interaction.guild,
                    action=await AuditAction.POSITION_DEMOTION(),
                    target_user=self.target_user,
                    moderator=interaction.user,
                    personnel_data=personnel_data,
                    config=config
                )
                
            except Exception as audit_error:
                print(f"Warning: Failed to send audit notification: {audit_error}")
            
            # Success message
            await interaction.followup.send(
                f"‚úÖ **{self.target_user.display_name}** —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{current_position}**\n"
                f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in position removal: {e}")
            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
    
    async def _get_current_position(self) -> str:
        """Get user's current position name"""
        try:
            from utils.postgresql_pool import get_db_cursor
            
            with get_db_cursor() as cursor:
                cursor.execute("""
                    SELECT pos.name 
                    FROM employees e
                    JOIN personnel p ON e.personnel_id = p.id
                    JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                    JOIN positions pos ON ps.position_id = pos.id
                    WHERE p.discord_id = %s AND p.is_dismissal = false;
                """, (self.target_user.id,))
                
                result = cursor.fetchone()
                return result['name'] if result else None
                
        except Exception as e:
            print(f"Error getting current position: {e}")
            return None
    
    async def _remove_position_from_db_standalone(self, user_discord_id: int, position_name: str, moderator_discord_id: int) -> bool:
        """Remove position from user in database (standalone version)"""
        try:
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone, timedelta
            import json
            
            # Get old position ID for role updates
            old_position_id = None
            user_member = None
            try:
                # Get user as member for role updates
                if hasattr(self, 'target_user'):
                    user_member = self.target_user
                
                # Get old position
                with get_db_cursor() as cursor:
                    cursor.execute("""
                        SELECT ps.position_id 
                        FROM personnel p
                        JOIN employees e ON p.id = e.personnel_id
                        LEFT JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                        WHERE p.discord_id = %s AND p.is_dismissal = false
                    """, (user_discord_id,))
                    old_pos_result = cursor.fetchone()
                    if old_pos_result and old_pos_result['position_id']:
                        old_position_id = old_pos_result['position_id']
            except Exception as e:
                print(f"Warning: Could not get old position for role update: {e}")
            
            with get_db_cursor() as cursor:
                # Get personnel ID
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s AND is_dismissal = false;", (user_discord_id,))
                personnel_result = cursor.fetchone()
                if not personnel_result:
                    return False
                personnel_id = personnel_result['id']
                
                # Clear position_subdivision_id in employees
                cursor.execute("""
                    UPDATE employees 
                    SET position_subdivision_id = NULL
                    WHERE personnel_id = %s;
                """, (personnel_id,))
                
                # Get moderator personnel ID for history
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s;", (moderator_discord_id,))
                moderator_result = cursor.fetchone()
                if not moderator_result:
                    return False
                moderator_personnel_id = moderator_result['id']
                
                # Create history record for position demotion (action_id = 6)
                changes = {
                    "rank": {
                        "new": None,
                        "previous": None
                    },
                    "position": {
                        "new": None,
                        "previous": position_name
                    },
                    "subdivision": {
                        "new": None,
                        "previous": None
                    }
                }
                
                cursor.execute("""
                    INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                    VALUES (%s, %s, %s, %s, %s, %s);
                """, (
                    personnel_id,
                    6,  # Position demotion action_id
                    moderator_personnel_id,
                    None,  # details = NULL
                    json.dumps(changes, ensure_ascii=False),
                    datetime.now(timezone(timedelta(hours=3)))  # Moscow time
                ))
                
                # Update Discord roles after position removal
                if user_member:
                    try:
                        # Remove all position roles using smart update
                        await position_manager.smart_update_user_position_roles(
                            user_member.guild,
                            user_member,
                            None  # No new position
                        )
                        print(f"‚úÖ Position role removed for {user_member.display_name}")
                    except Exception as role_error:
                        print(f"Warning: Failed to remove position role: {role_error}")
                
                return True
                
        except Exception as e:
            print(f"Error in _remove_position_from_db_standalone: {e}")
            return False
    
    async def _execute_position_assignment(self, interaction: discord.Interaction, position_name: str, position_id: str):
        """Execute position assignment using existing logic"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # Use the same assignment logic from department change
            success = await self._assign_position_in_db(
                self.target_user.id, 
                position_id, 
                position_name, 
                interaction.user.id
            )
            
            if not success:
                await interaction.followup.send(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ë–î:** –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å ¬´{position_name}¬ª", 
                    ephemeral=True
                )
                return
            
            # Send audit notification
            try:
                from utils.audit_logger import audit_logger, AuditAction
                from utils.config_manager import load_config
                from utils.database_manager import PersonnelManager
                
                pm = PersonnelManager()
                config = load_config()
                
                # Get personnel data for audit
                personnel_data = await pm.get_personnel_data_for_audit(self.target_user.id)
                if not personnel_data:
                    personnel_data = {
                        'name': self.target_user.display_name,
                        'static': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'rank': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'department': self.subdivision_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'position': position_name
                    }
                else:
                    personnel_data['position'] = position_name
                
                await audit_logger.send_personnel_audit(
                    guild=interaction.guild,
                    action=await AuditAction.POSITION_ASSIGNMENT(),
                    target_user=self.target_user,
                    moderator=interaction.user,
                    personnel_data=personnel_data,
                    config=config
                )
                
            except Exception as audit_error:
                print(f"Warning: Failed to send audit notification: {audit_error}")
            
            # Success message
            await interaction.followup.send(
                f"‚úÖ **{self.target_user.display_name}** —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å **{position_name}**\n"
                f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in position assignment: {e}")
            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
    
    async def _assign_position_in_db(self, user_discord_id: int, position_id: str, position_name: str, moderator_discord_id: int) -> bool:
        """Assign position to user in database and create history record (reuse existing logic)"""
        try:
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone, timedelta
            
            # Get old position name for history tracking
            old_position_name = None
            with get_db_cursor() as cursor:
                cursor.execute("""
                    SELECT pos.name as position_name
                    FROM personnel p
                    JOIN employees e ON p.id = e.personnel_id
                    LEFT JOIN position_subdivision ps ON e.position_subdivision_id = ps.id
                    LEFT JOIN positions pos ON ps.position_id = pos.id
                    WHERE p.discord_id = %s AND p.is_dismissal = false
                """, (user_discord_id,))
                old_pos_result = cursor.fetchone()
                if old_pos_result and old_pos_result['position_name']:
                    old_position_name = old_pos_result['position_name']
            
            # Get user as member for role updates
            user_member = None
            try:
                # Get user as member for role updates
                if hasattr(self, 'target_user'):
                    user_member = self.target_user
            except Exception as e:
                print(f"Warning: Could not get user member for role update: {e}")
            
            with get_db_cursor() as cursor:
                # Get personnel ID
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s AND is_dismissal = false;", (user_discord_id,))
                personnel_result = cursor.fetchone()
                if not personnel_result:
                    return False
                personnel_id = personnel_result['id']
                
                # Get position_subdivision_id for the current user's subdivision
                cursor.execute("""
                    SELECT ps.id FROM position_subdivision ps
                    JOIN employees e ON ps.subdivision_id = e.subdivision_id
                    WHERE e.personnel_id = %s AND ps.position_id = %s
                    LIMIT 1;
                """, (personnel_id, position_id))
                
                ps_result = cursor.fetchone()
                if not ps_result:
                    return False
                position_subdivision_id = ps_result['id']
                
                # Update employee with new position
                cursor.execute("""
                    UPDATE employees 
                    SET position_subdivision_id = %s
                    WHERE personnel_id = %s;
                """, (position_subdivision_id, personnel_id))
                
                # Get moderator personnel ID for history
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s;", (moderator_discord_id,))
                moderator_result = cursor.fetchone()
                if not moderator_result:
                    return False
                moderator_personnel_id = moderator_result['id']
                
                # Create history record for position assignment (action_id = 5)
                import json
                changes = {
                    "rank": {
                        "new": None,
                        "previous": None
                    },
                    "position": {
                        "new": position_name,
                        "previous": old_position_name  # Now tracking previous position
                    },
                    "subdivision": {
                        "new": None,
                        "previous": None
                    }
                }
                
                cursor.execute("""
                    INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                    VALUES (%s, %s, %s, %s, %s, %s);
                """, (
                    personnel_id,
                    5,  # Position assignment action_id
                    moderator_personnel_id,
                    None,  # details = NULL
                    json.dumps(changes, ensure_ascii=False),
                    datetime.now(timezone(timedelta(hours=3)))  # Moscow time
                ))
                
                # Update Discord roles for position change
                if user_member:
                    try:
                        new_position_id = int(position_id) if position_id.isdigit() else None
                        await position_manager.smart_update_user_position_roles(
                            user_member.guild,
                            user_member,
                            new_position_id
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è Error updating position roles: {e}")
                
                return True
                
        except Exception as e:
            print(f"Error in _assign_position_in_db: {e}")
            return False





class RankChangeView(ui.View):
    """View for rank change with confirmation for promotion type"""
    
    def __init__(self, target_user: discord.Member, new_rank: str, is_promotion: bool):
        super().__init__(timeout=300)
        self.target_user = target_user
        self.new_rank = new_rank
        self.is_promotion = is_promotion
        
        if is_promotion:
            # Only show promotion type selection for promotions
            self.add_promotion_buttons()
    
    def add_promotion_buttons(self):
        """Add buttons for promotion type selection"""
        promotion_button = ui.Button(
            label="–ü–æ–≤—ã—à–µ–Ω–∏–µ",
            style=discord.ButtonStyle.green,
            emoji="‚¨ÜÔ∏è"
        )
        promotion_button.callback = self.handle_promotion
        self.add_item(promotion_button)
        
        restoration_button = ui.Button(
            label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
            style=discord.ButtonStyle.blurple,
            emoji="üîÑ"
        )
        restoration_button.callback = self.handle_restoration
        self.add_item(restoration_button)
    
    async def handle_promotion(self, interaction: discord.Interaction):
        """Handle regular promotion (action_id = 1)"""
        await self._execute_rank_change(interaction, action_id=1, action_name="–ü–æ–≤—ã—à–µ–Ω–∏–µ")
    
    async def handle_restoration(self, interaction: discord.Interaction):
        """Handle rank restoration (action_id = 4)"""
        await self._execute_rank_change(interaction, action_id=4, action_name="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
    
    async def _execute_rank_change(self, interaction: discord.Interaction, action_id: int, action_name: str):
        """Execute the rank change with specified action_id"""
        try:
            # Only defer if not already responded
            if not interaction.response.is_done():
                await interaction.response.defer(ephemeral=True)
            
            # Get current rank BEFORE changing it in database
            old_rank = await get_user_rank_from_db(self.target_user.id)
            
            # Execute rank change in database
            success = await self._change_rank_in_db(
                self.target_user.id,
                self.new_rank,
                interaction.user.id,
                action_id
            )
            
            if not success:
                await interaction.followup.send(
                    f"‚ùå **–û—à–∏–±–∫–∞ –ë–î:** –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ –Ω–∞ ¬´{self.new_rank}¬ª",
                    ephemeral=True
                )
                return
            
            # Send audit notification
            try:
                from utils.audit_logger import audit_logger, AuditAction
                from utils.config_manager import load_config
                from utils.database_manager import PersonnelManager
                
                pm = PersonnelManager()
                config = load_config()
                
                # Get personnel data for audit
                personnel_data = await pm.get_personnel_data_for_audit(self.target_user.id)
                if not personnel_data:
                    personnel_data = {
                        'name': self.target_user.display_name,
                        'static': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'rank': self.new_rank,
                        'department': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'position': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    }
                else:
                    personnel_data['rank'] = self.new_rank
                
                # Choose audit action based on action_id
                if action_id == 1:
                    action = await AuditAction.PROMOTION()
                elif action_id == 2:
                    action = await AuditAction.DEMOTION()
                elif action_id == 4:
                    action = await AuditAction.RANK_RESTORATION()
                else:
                    action = await AuditAction.PROMOTION()  # Default
                
                await audit_logger.send_personnel_audit(
                    guild=interaction.guild,
                    action=action,
                    target_user=self.target_user,
                    moderator=interaction.user,
                    personnel_data=personnel_data,
                    config=config
                )
                
            except Exception as audit_error:
                print(f"Warning: Failed to send audit notification: {audit_error}")
            
            # Update Discord roles (remove old rank role, add new rank role)
            try:
                from utils.database_manager import rank_manager
                
                # Update roles using RankManager (old_rank already obtained above)
                role_success, role_message = await rank_manager.update_user_rank_roles(
                    interaction.guild, 
                    self.target_user, 
                    old_rank, 
                    self.new_rank
                )
                
                if not role_success:
                    print(f"Warning: Failed to update Discord roles: {role_message}")
                else:
                    print(f"‚úÖ Discord roles updated: {old_rank} -> {self.new_rank}")
                    
            except Exception as role_error:
                print(f"Warning: Failed to update Discord roles: {role_error}")
            
            # Update nickname using nickname_manager
            try:
                print(f"üéÜ CONTEXT RANK CHANGE: {action_name} {self.target_user.display_name} -> {self.new_rank}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º nickname_manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
                new_nickname = await nickname_manager.handle_promotion(
                    member=self.target_user,
                    new_rank_name=self.new_rank
                )
                
                if new_nickname:
                    print(f"‚úÖ CONTEXT RANK NICKNAME: –ù–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ nickname_manager: {self.target_user.display_name} -> {new_nickname}")
                else:
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
                    expected_nickname = nickname_manager.preview_nickname_change(
                        current_nickname=self.target_user.display_name,
                        operation='promotion',
                        rank_abbr=self.new_rank,
                        first_name='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        last_name='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    )
                    print(f"‚ùå CONTEXT RANK NICKNAME ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º —á–µ—Ä–µ–∑ nickname_manager. –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º: {expected_nickname}")
                    
            except Exception as nickname_error:
                print(f"‚ö†Ô∏è CONTEXT RANK NICKNAME EXCEPTION: –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–∞ \"{new_nickname}\": {nickname_error}")
            
            # Success message
            emoji = "‚¨ÜÔ∏è" if action_id in [1, 4] else "‚¨áÔ∏è"
            nickname_info = f" (–Ω–∏–∫–Ω–µ–π–º –æ–±–Ω–æ–≤–ª—ë–Ω)" if 'new_nickname' in locals() and new_nickname else ""
            await interaction.followup.send(
                f"{emoji} **{self.target_user.display_name}** - {action_name.lower()} –Ω–∞ —Ä–∞–Ω–≥ **{self.new_rank}**{nickname_info}\n",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in rank change: {e}")
            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
    
    async def _change_rank_in_db(self, user_discord_id: int, new_rank: str, moderator_discord_id: int, action_id: int) -> bool:
        """Change user's rank in database and create history record"""
        try:
            from utils.postgresql_pool import get_db_cursor
            from datetime import datetime, timezone, timedelta
            
            with get_db_cursor() as cursor:
                # Get personnel ID and current rank
                cursor.execute("""
                    SELECT p.id, r.name as current_rank 
                    FROM personnel p
                    JOIN employees e ON p.id = e.personnel_id
                    JOIN ranks r ON e.rank_id = r.id
                    WHERE p.discord_id = %s AND p.is_dismissal = false;
                """, (user_discord_id,))
                personnel_result = cursor.fetchone()
                if not personnel_result:
                    return False
                personnel_id = personnel_result['id']
                previous_rank = personnel_result['current_rank']
                
                # Get new rank ID
                cursor.execute("SELECT id FROM ranks WHERE name = %s;", (new_rank,))
                rank_result = cursor.fetchone()
                if not rank_result:
                    return False
                new_rank_id = rank_result['id']
                
                # Update employee with new rank
                cursor.execute("""
                    UPDATE employees 
                    SET rank_id = %s
                    WHERE personnel_id = %s;
                """, (new_rank_id, personnel_id))
                
                # Get moderator personnel ID for history
                cursor.execute("SELECT id FROM personnel WHERE discord_id = %s;", (moderator_discord_id,))
                moderator_result = cursor.fetchone()
                if not moderator_result:
                    return False
                moderator_personnel_id = moderator_result['id']
                
                # Create history record with previous rank
                import json
                changes = {
                    "rank": {
                        "new": new_rank,
                        "previous": previous_rank
                    },
                    "position": {
                        "new": None,
                        "previous": None
                    },
                    "subdivision": {
                        "new": None,
                        "previous": None
                    }
                }
                
                cursor.execute("""
                    INSERT INTO history (personnel_id, action_id, performed_by, details, changes, action_date)
                    VALUES (%s, %s, %s, %s, %s, %s);
                """, (
                    personnel_id,
                    action_id,
                    moderator_personnel_id,
                    None,  # details = NULL
                    json.dumps(changes, ensure_ascii=False),
                    datetime.now(timezone(timedelta(hours=3)))  # Moscow time
                ))
                
                return True
                
        except Exception as e:
            print(f"Error in _change_rank_in_db: {e}")
            return False


class RankSelectView(ui.View):
    """View for selecting rank from available options"""
    
    def __init__(self, target_user: discord.Member, available_ranks: list, current_rank: str):
        super().__init__(timeout=300)
        self.target_user = target_user
        self.current_rank = current_rank
        
        # Add rank select menu
        self.add_item(RankSelect(target_user, available_ranks, current_rank))


class RankSelect(ui.Select):
    """Select menu for choosing rank"""
    
    def __init__(self, target_user: discord.Member, available_ranks: list, current_rank: str):
        self.target_user = target_user
        self.current_rank = current_rank
        
        # Create options from available ranks
        options = []
        for i, (rank_id, rank_name, rank_level) in enumerate(available_ranks, 1):
            options.append(discord.SelectOption(
                label=f"{i}. {rank_name}",
                value=rank_name,
                description=f"–†–∞–Ω–≥ —É—Ä–æ–≤–Ω—è {rank_level}"
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥...",
            options=options[:25],  # Discord limit
            min_values=1,
            max_values=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Handle rank selection"""
        selected_rank = self.values[0]
        
        # Determine if this is promotion or demotion
        try:
            from utils.postgresql_pool import get_db_cursor
            
            # Get CURRENT rank from database
            current_rank_from_db = await get_user_rank_from_db(self.target_user.id)
            if not current_rank_from_db:
                print(f"Warning: Could not get current rank for {self.target_user.display_name}")
                is_promotion = True  # Default to promotion
            else:
                with get_db_cursor() as cursor:
                    # Get current rank level
                    cursor.execute("SELECT rank_level FROM ranks WHERE name = %s;", (current_rank_from_db,))
                    current_result = cursor.fetchone()
                    current_level = current_result['rank_level'] if current_result else 1
                    
                    # Get new rank level  
                    cursor.execute("SELECT rank_level FROM ranks WHERE name = %s;", (selected_rank,))
                    new_result = cursor.fetchone()
                    new_level = new_result['rank_level'] if new_result else 1
                    
                    is_promotion = new_level > current_level
                    print(f"üîç Rank comparison: {current_rank_from_db}(level {current_level}) -> {selected_rank}(level {new_level}) = {'–ø–æ–≤—ã—à–µ–Ω–∏–µ' if is_promotion else '–ø–æ–Ω–∏–∂–µ–Ω–∏–µ'}")
                
        except Exception as e:
            print(f"Error determining rank change type: {e}")
            is_promotion = True  # Default to promotion
        
        if is_promotion:
            # Show promotion type selection
            view = RankChangeView(self.target_user, selected_rank, is_promotion=True)
            await interaction.response.send_message(
                f"‚¨ÜÔ∏è **–ü–æ–≤—ã—à–µ–Ω–∏–µ {self.target_user.display_name} –Ω–∞ —Ä–∞–Ω–≥ ¬´{selected_rank}¬ª**\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—ã—à–µ–Ω–∏—è:",
                view=view,
                ephemeral=True
            )
        else:
            # Direct demotion (action_id = 2)
            view = RankChangeView(self.target_user, selected_rank, is_promotion=False)
            await view._execute_rank_change(interaction, action_id=2, action_name="–†–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏–µ")


class GeneralEditView(ui.View):
    """View for general editing options (rank, department, position)"""
    
    def __init__(self, target_user: discord.Member):
        super().__init__(timeout=300)
        self.target_user = target_user
    
    @ui.button(label="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥", style=discord.ButtonStyle.primary, emoji="üéñÔ∏è")
    async def edit_rank(self, interaction: discord.Interaction, button: ui.Button):
        """Handle rank editing"""
        try:
            from forms.personnel_context.rank_utils import RankHierarchy
            from utils.config_manager import is_administrator
            from utils.postgresql_pool import get_db_cursor
            
            # Get current rank from database
            current_rank = await get_user_rank_from_db(self.target_user.id)
            if not current_rank:
                await interaction.response.send_message(
                    f"‚ùå **{self.target_user.display_name}** –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–Ω–≥–∞ –∏–ª–∏ —Ä–∞–Ω–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.",
                    ephemeral=True
                )
                return
            
            # Get moderator's current rank (for permission check)
            moderator_rank = await get_user_rank_from_db(interaction.user.id)
            config = load_config()
            is_admin = interaction.user.guild_permissions.administrator or is_administrator(interaction.user, config)
            
            # Get all ranks from database
            with get_db_cursor() as cursor:
                cursor.execute("SELECT id, name FROM ranks ORDER BY id;")
                all_ranks = cursor.fetchall()
                
                # Get moderator's rank level for permission filtering
                moderator_level = None
                if moderator_rank and not is_admin:
                    cursor.execute("SELECT id FROM ranks WHERE name = %s;", (moderator_rank,))
                    mod_result = cursor.fetchone()
                    if mod_result:
                        moderator_level = mod_result['id']
                
                # Get current user's rank level to exclude it
                current_level = None
                cursor.execute("SELECT id FROM ranks WHERE name = %s;", (current_rank,))
                current_result = cursor.fetchone()
                if current_result:
                    current_level = current_result['id']
            
            # Filter available ranks
            available_ranks = []
            for rank in all_ranks:
                rank_id, rank_name, rank_level = rank['id'], rank['name'], rank['id']
                
                # Skip current rank
                if rank_name == current_rank:
                    continue
                
                # For non-admins: skip ranks at moderator level and above
                if not is_admin and moderator_level and rank_level >= moderator_level:
                    continue
                
                available_ranks.append((rank_id, rank_name, rank_level))
            
            if not available_ranks:
                await interaction.response.send_message(
                    f"‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–Ω–≥–æ–≤** –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
                    f"–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: **{current_rank}**",
                    ephemeral=True
                )
                return
            
            # Show rank selection
            view = RankSelectView(self.target_user, available_ranks, current_rank)
            admin_text = " (–≤—Å–µ —Ä–∞–Ω–≥–∏)" if is_admin else f" (–¥–æ —É—Ä–æ–≤–Ω—è {moderator_rank})"
            await interaction.response.send_message(
                f"üéñÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –¥–ª—è {self.target_user.display_name}**\n"
                f"–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: **{current_rank}**\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–Ω–≥–æ–≤: **{len(available_ranks)}**{admin_text}",
                view=view,
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error in rank editing: {e}")
            await interaction.response.send_message(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
    
    @ui.button(label="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.secondary, emoji="üè¢")
    async def edit_department(self, interaction: discord.Interaction, button: ui.Button):
        """Handle department editing"""
        # Send action selection view (same as before)
        view = DepartmentActionView(self.target_user)
        await interaction.response.send_message(
            f"üè¢ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è {self.target_user.display_name}**\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è:",
            view=view,
            ephemeral=True
        )
    
    @ui.button(label="–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.secondary, emoji="üìã")
    async def edit_position(self, interaction: discord.Interaction, button: ui.Button):
        """Handle position editing"""
        # Send position selection view (same as before)
        view = PositionOnlySelectView(self.target_user)
        await interaction.response.send_message(
            f"üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é –¥–ª—è {self.target_user.display_name}**\n"
            f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏\n"
            f"‚Ä¢ –ò–ª–∏ —Ä–∞–∑–∂–∞–ª—É–π—Ç–µ —Å —Ç–µ–∫—É—â–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            view=view,
            ephemeral=True
        )


@app_commands.context_menu(name='–ë—ã—Å—Ç—Ä–æ –ø–æ–≤—ã—Å–∏—Ç—å')
@handle_context_errors
async def quick_promote(interaction: discord.Interaction, user: discord.Member):
    """Context menu command to quickly promote user by +1 rank"""
    # Check permissions
    config = load_config()
    if not is_moderator_or_admin(interaction.user, config):
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤ —Ä–∞–Ω–≥–µ.", ephemeral=True)
        return
    
    # Check if moderator can moderate this user (hierarchy check)
    if not can_moderate_user(interaction.user, user, config):
        await interaction.response.send_message(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.",
            ephemeral=True
        )
        return
    
    # Check if target is bot
    if user.bot:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è –ø–æ–≤—ã—Å–∏—Ç—å –±–æ—Ç–∞.", ephemeral=True)
        return
    
    try:
        from forms.personnel_context.rank_utils import RankHierarchy
        
        # Get current rank from database instead of Discord roles
        current_rank = await get_user_rank_from_db(user.id)
        if not current_rank:
            await interaction.response.send_message(
                f"‚ùå **{user.display_name}** –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–Ω–≥–∞ –∏–ª–∏ —Ä–∞–Ω–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.",
                ephemeral=True
            )
            return
        
        # Get next rank
        next_rank = RankHierarchy.get_next_rank(current_rank)
        if not next_rank:
            await interaction.response.send_message(
                f"‚ùå **{user.display_name}** —É–∂–µ –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥: **{current_rank}**",
                ephemeral=True
            )
            return
        
        # Defer response for processing
        await interaction.response.defer(ephemeral=True)
        
        # Execute direct promotion (action_id = 1) without asking type
        rank_view = RankChangeView(user, next_rank, is_promotion=False)  # Don't show buttons
        success = await rank_view._execute_rank_change(interaction, action_id=1, action_name="–ü–æ–≤—ã—à–µ–Ω–∏–µ")
        
    except Exception as e:
        print(f"Error in quick promotion: {e}")
        if not interaction.response.is_done():
            await interaction.response.send_message(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)
        else:
            await interaction.followup.send(f"‚ùå **–û—à–∏–±–∫–∞:** {str(e)}", ephemeral=True)


@app_commands.context_menu(name='–û–±—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
@handle_context_errors
async def general_edit(interaction: discord.Interaction, user: discord.Member):
    """Context menu command for general editing (rank, department, position)"""
    # Check permissions
    config = load_config()
    if not is_moderator_or_admin(interaction.user, config):
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.", ephemeral=True)
        return
    
    # Check if moderator can moderate this user (hierarchy check)
    if not can_moderate_user(interaction.user, user, config):
        await interaction.response.send_message(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.",
            ephemeral=True
        )
        return
    
    # Check if target is bot
    if user.bot:
        await interaction.response.send_message("‚ùå –ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞.", ephemeral=True)
        return
    
    # Send general editing view
    view = GeneralEditView(user)
    await interaction.response.send_message(
        f"‚öôÔ∏è **–û–±—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {user.display_name}**\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        view=view,
        ephemeral=True
    )


def setup_context_commands(bot):
    """Setup context menu commands for PersonnelManager integration"""
    # Check if commands are already added to avoid duplicates
    existing_commands = [cmd.name for cmd in bot.tree.get_commands()]
    
    commands_to_add = [
        ('–ü—Ä–∏–Ω—è—Ç—å –Ω–∞ —Å–ª—É–∂–±—É', recruit_user),
        ('–£–≤–æ–ª–∏—Ç—å', dismiss_user),
        ('–ë—ã—Å—Ç—Ä–æ –ø–æ–≤—ã—Å–∏—Ç—å', quick_promote),
        ('–û–±—â–µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', general_edit)
    ]
    
    added_count = 0
    for name, command in commands_to_add:
        if name not in existing_commands:
            bot.tree.add_command(command)
            added_count += 1
            print(f"‚úÖ Personnel context menu command '{name}' loaded")
        else:
            print(f"‚ÑπÔ∏è Personnel context menu command '{name}' already loaded")
    
    if added_count > 0:
        print(f"‚úÖ {added_count} new personnel context menu command(s) registered")
    else:
        print("‚ÑπÔ∏è All personnel context menu commands already loaded")