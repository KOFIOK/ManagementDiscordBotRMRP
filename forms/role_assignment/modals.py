"""
Application modals for role assignment system
"""

import discord
import re
from discord import ui
from utils.config_manager import load_config, has_pending_role_application


class MilitaryApplicationModal(ui.Modal):
    """Modal for military service role applications"""
    
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        # Rank is always "–†—è–¥–æ–≤–æ–π" for new military recruits, no need for input field
    
    async def on_submit(self, interaction: discord.Interaction):
        """Process military application submission"""
        # Check for pending applications
        config = load_config()
        role_assignment_channel_id = config.get('role_assignment_channel')
        
        if role_assignment_channel_id:
            has_pending = await has_pending_role_application(interaction.client, interaction.user.id, role_assignment_channel_id)
            if has_pending:
                await interaction.response.send_message(
                    "‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã –∏ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                    ephemeral=True
                )
                return
        
        # Validate and format static
        static = self.static_input.value.strip()
        formatted_static = self._format_static(static)
        if not formatted_static:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                ephemeral=True
            )
            return
        
        # Create application data
        application_data = {
            "type": "military",
            "name": self.name_input.value.strip(),
            "static": formatted_static,
            "rank": "–†—è–¥–æ–≤–æ–π",  # Always set rank as "–†—è–¥–æ–≤–æ–π" for new military recruits
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send for approval
        await self._send_application_for_approval(interaction, application_data)
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def _check_blacklist_status(self, static: str):
        """Check if user is in blacklist using PostgreSQL (stub)"""
        try:
            # TODO: Implement PostgreSQL blacklist check
            print(f"Blacklist check for static {static} - skipped (using PostgreSQL stub)")
            return {"is_blocked": False}
        except Exception as e:
            print(f"Error checking blacklist status: {e}")
            return {"is_blocked": False}

    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=application_data["rank"], inline=True)
            
            # Create approval view
            from .base import create_approval_view
            approval_view = create_approval_view(application_data)
            
            # Get ping roles
            ping_role_ids = config.get('military_role_assignment_ping_roles', [])
            ping_content = ""
            if ping_role_ids:
                ping_mentions = []
                for ping_role_id in ping_role_ids:
                    ping_role = moderation_channel.guild.get_role(ping_role_id)
                    if ping_role:
                        ping_mentions.append(ping_role.mention)
                if ping_mentions:
                    ping_content = f"-# {' '.join(ping_mentions)}"
                else:
                    # –ù–∏ –æ–¥–Ω–∞ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"[WARN] –ù–∏ –æ–¥–Ω–∞ —Ä–æ–ª—å –¥–ª—è –ø–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ military_role_assignment_ping_roles: {ping_role_ids}")
            else:
                print("[WARN] military_role_assignment_ping_roles –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –≤ config")
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending military application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )


class CivilianApplicationModal(ui.Modal):
    """Modal for civilian role applications"""
    
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥–æ—Å—Å–ª—É–∂–∞—â–µ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–°–í–ù–ì, –ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫, –ù–∞—á. –£–ø—Ä. –í–Ω–µ–≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω–æ–π –û—Ö—Ä–∞–Ω—ã",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.faction_input)
        
        self.purpose_input = ui.TextInput(
            label="–¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–ø—É—Å–∫—É (–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤/—á)",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.purpose_input)
        
        self.proof_input = ui.TextInput(
            label="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            min_length=5,
            max_length=200,
            required=True
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Process civilian application submission"""
        # Check for pending applications
        config = load_config()
        role_assignment_channel_id = config.get('role_assignment_channel')
        
        if role_assignment_channel_id:
            has_pending = await has_pending_role_application(interaction.client, interaction.user.id, role_assignment_channel_id)
            if has_pending:
                await interaction.response.send_message(
                    "‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã –∏ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                    ephemeral=True
                )
                return
        
        # Validate and format static
        static = self.static_input.value.strip()
        formatted_static = self._format_static(static)
        if not formatted_static:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                ephemeral=True
            )
            return
        
        # Validate proof URL
        proof = self.proof_input.value.strip()
        if not self._validate_url(proof):
            await interaction.response.send_message(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                ephemeral=True
            )
            return
        
        # Create application data
        application_data = {
            "type": "civilian",
            "name": self.name_input.value.strip(),
            "static": formatted_static,
            "faction": self.faction_input.value.strip(),
            "purpose": self.purpose_input.value.strip(),
            "proof": proof,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send for approval
        await self._send_application_for_approval(interaction, application_data)
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    def _validate_url(self, url):
        """Basic URL validation"""
        url_pattern = r'https?://[^\s/$.?#].[^\s]*'
        return bool(re.match(url_pattern, url))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥–æ—Å—Å–ª—É–∂–∞—â–µ–≥–æ",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=application_data["faction"], inline=False)
            embed.add_field(name="üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏", value=application_data["purpose"], inline=False)
            embed.add_field(name="üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", value=f"[–°—Å—ã–ª–∫–∞]({application_data['proof']})", inline=False)
            
            # Create approval view
            from .base import create_approval_view
            approval_view = create_approval_view(application_data)
            
            # Get ping roles
            ping_role_ids = config.get('civilian_role_assignment_ping_roles', [])
            ping_content = ""
            if ping_role_ids:
                ping_mentions = []
                for ping_role_id in ping_role_ids:
                    ping_role = moderation_channel.guild.get_role(ping_role_id)
                    if ping_role:
                        ping_mentions.append(ping_role.mention)
                if ping_mentions:
                    ping_content = f"-# {' '.join(ping_mentions)}"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending civilian application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )


class SupplierApplicationModal(ui.Modal):
    """Modal for supplier role applications"""
    
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–°–ò–ù, –ú–û –†–§, –§–°–ë",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.faction_input)
        
        self.proof_input = ui.TextInput(
            label="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            min_length=5,
            max_length=200,
            required=True
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Process supplier application submission"""
        # Check for pending applications
        config = load_config()
        role_assignment_channel_id = config.get('role_assignment_channel')
        
        if role_assignment_channel_id:
            has_pending = await has_pending_role_application(interaction.client, interaction.user.id, role_assignment_channel_id)
            if has_pending:
                await interaction.response.send_message(
                    "‚ùå **–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.**\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é.\n"
                    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã –∏ —É—Å–∫–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                    ephemeral=True
                )
                return
        
        # Validate and format static
        static = self.static_input.value.strip()
        formatted_static = self._format_static(static)
        if not formatted_static:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                ephemeral=True
            )
            return
          # Validate proof URL
        proof = self.proof_input.value.strip()
        if not self._validate_url(proof):
            await interaction.response.send_message(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                ephemeral=True
            )
            return
        
        # Create application data
        application_data = {
            "type": "supplier",
            "name": self.name_input.value.strip(),
            "static": formatted_static,
            "faction": self.faction_input.value.strip(),
            "proof": proof,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send for approval
        await self._send_application_for_approval(interaction, application_data)
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    def _validate_url(self, url):
        """Basic URL validation"""
        url_pattern = r'https?://[^\s/$.?#].[^\s]*'
        return bool(re.match(url_pattern, url))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = discord.Embed(
                title="üì¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=application_data["faction"], inline=False)
            embed.add_field(name="üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", value=f"[–°—Å—ã–ª–∫–∞]({application_data['proof']})", inline=False)
            
            # Create approval view
            from .base import create_approval_view
            approval_view = create_approval_view(application_data)
            
            # Get ping roles
            ping_role_ids = config.get('supplier_role_assignment_ping_roles', [])
            ping_content = ""
            if ping_role_ids:
                ping_mentions = []
                for ping_role_id in ping_role_ids:
                    ping_role = moderation_channel.guild.get_role(ping_role_id)
                    if ping_role:
                        ping_mentions.append(ping_role.mention)
                if ping_mentions:
                    ping_content = f"-# {' '.join(ping_mentions)}"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending supplier application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )



# =============== –ú–û–î–ê–õ–¨–ù–´–ï –§–û–†–ú–´ –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===============

class MilitaryEditModal(ui.Modal):
    """Modal for editing military service role applications"""
    
    def __init__(self, application_data: dict):
        super().__init__(title="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏")
        self.application_data = application_data
        
        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤",
            min_length=2,
            max_length=50,
            required=True,
            default=application_data.get('name', '')
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True,
            default=application_data.get('static', '')
        )
        self.add_item(self.static_input)
        
        # Rank is always "–†—è–¥–æ–≤–æ–π" for military personnel, no need for input field
    
    async def on_submit(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∞
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_data = {
                'name': self.name_input.value.strip(),
                'static': formatted_static,
                'rank': "–†—è–¥–æ–≤–æ–π",  # Always set rank as "–†—è–¥–æ–≤–æ–π" for military personnel
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'type': self.application_data['type'],
                'user_id': self.application_data['user_id'],
                'user_mention': self.application_data.get('user_mention', f"<@{self.application_data['user_id']}>"),
                'timestamp': self.application_data.get('timestamp')
            }
            
            await self._handle_edit_update(interaction, updated_data)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    async def _handle_edit_update(self, interaction: discord.Interaction, updated_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º embed
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.blue()  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" –µ—Å–ª–∏ –µ—Å—Ç—å
            fields_to_remove = []
            for i, field in enumerate(embed.fields):
                if field.name == "üìù –ò–º—è –§–∞–º–∏–ª–∏—è":
                    embed.set_field_at(i, name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=updated_data['name'], inline=True)
                elif field.name == "üî¢ –°—Ç–∞—Ç–∏–∫":
                    embed.set_field_at(i, name="üî¢ –°—Ç–∞—Ç–∏–∫", value=updated_data['static'], inline=True)
                elif field.name == "üéñÔ∏è –ó–≤–∞–Ω–∏–µ":
                    embed.set_field_at(i, name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=updated_data['rank'], inline=True)
                elif field.name == "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ":
                    fields_to_remove.append(i)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
            for i in reversed(fields_to_remove):
                embed.remove_field(i)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            embed.add_field(
                name="‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ",
                value=f"{interaction.user.mention}\n{discord.utils.format_dt(discord.utils.utcnow(), 'f')}",
                inline=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await interaction.response.edit_message(embed=embed)
            
        except Exception as e:
            print(f"Error updating military application embed: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )


class CivilianEditModal(ui.Modal):
    """Modal for editing civilian role applications"""
    
    def __init__(self, application_data: dict):
        super().__init__(title="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏")
        self.application_data = application_data
        
        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤",
            min_length=2,
            max_length=50,
            required=True,
            default=application_data.get('name', '')
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True,
            default=application_data.get('static', '')
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–°–í–ù–ì, –ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫, –ù–∞—á. –£–ø—Ä. –í–Ω–µ–≤–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω–æ–π –û—Ö—Ä–∞–Ω—ã",
            min_length=1,
            max_length=100,
            required=True,
            default=application_data.get('faction', '')
        )
        self.add_item(self.faction_input)
        
        self.purpose_input = ui.TextInput(
            label="–¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–ø—É—Å–∫—É (–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –≤/—á)",
            min_length=1,
            max_length=100,
            required=True,
            default=application_data.get('purpose', '')
        )
        self.add_item(self.purpose_input)
        
        self.proof_input = ui.TextInput(
            label="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            min_length=5,
            max_length=200,
            required=True,
            default=application_data.get('proof', '')
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∞
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
            proof = self.proof_input.value.strip()
            if not self._validate_url(proof):
                await interaction.response.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                    ephemeral=True
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_data = {
                'name': self.name_input.value.strip(),
                'static': formatted_static,
                'faction': self.faction_input.value.strip(),
                'purpose': self.purpose_input.value.strip(),
                'proof': proof,
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'type': self.application_data['type'],
                'user_id': self.application_data['user_id'],
                'user_mention': self.application_data.get('user_mention', f"<@{self.application_data['user_id']}>"),
                'timestamp': self.application_data.get('timestamp')
            }
            
            await self._handle_edit_update(interaction, updated_data)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    def _validate_url(self, url):
        """Basic URL validation"""
        url_pattern = re.compile(
            r'^https?://'  # http:// or https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
            r'localhost|'  # localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
            r'(?::\d+)?'  # optional port
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        return url_pattern.match(url) is not None
    
    async def _handle_edit_update(self, interaction: discord.Interaction, updated_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º embed
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.orange()  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" –µ—Å–ª–∏ –µ—Å—Ç—å
            fields_to_remove = []
            for i, field in enumerate(embed.fields):
                if field.name == "üìù –ò–º—è –§–∞–º–∏–ª–∏—è":
                    embed.set_field_at(i, name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=updated_data['name'], inline=True)
                elif field.name == "üî¢ –°—Ç–∞—Ç–∏–∫":
                    embed.set_field_at(i, name="üî¢ –°—Ç–∞—Ç–∏–∫", value=updated_data['static'], inline=True)
                elif field.name == "üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                    embed.set_field_at(i, name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=updated_data['faction'], inline=False)
                elif field.name == "üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏":
                    embed.set_field_at(i, name="üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏", value=updated_data['purpose'], inline=False)
                elif field.name == "üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ":
                    embed.set_field_at(i, name="üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", value=f"[–°—Å—ã–ª–∫–∞]({updated_data['proof']})", inline=False)
                elif field.name == "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ":
                    fields_to_remove.append(i)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
            for i in reversed(fields_to_remove):
                embed.remove_field(i)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            embed.add_field(
                name="‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ",
                value=f"{interaction.user.mention}\n{discord.utils.format_dt(discord.utils.utcnow(), 'f')}",
                inline=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await interaction.response.edit_message(embed=embed)
            
        except Exception as e:
            print(f"Error updating civilian application embed: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )


class SupplierEditModal(ui.Modal):
    """Modal for editing supplier role applications"""
    
    def __init__(self, application_data: dict):
        super().__init__(title="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        self.application_data = application_data
        
        # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ª–µ–≥ –î—É–±–æ–≤",
            min_length=2,
            max_length=50,
            required=True,
            default=application_data.get('name', '')
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True,
            default=application_data.get('static', '')
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –§–°–ò–ù, –ú–û –†–§, –§–°–ë",
            min_length=1,
            max_length=100,
            required=True,
            default=application_data.get('faction', '')
        )
        self.add_item(self.faction_input)
        
        self.proof_input = ui.TextInput(
            label="–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            min_length=5,
            max_length=200,
            required=True,
            default=application_data.get('proof', '')
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∞
            static = self.static_input.value.strip()
            formatted_static = self._format_static(static)
            if not formatted_static:
                await interaction.response.send_message(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                    "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                    ephemeral=True
                )
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
            proof = self.proof_input.value.strip()
            if not self._validate_url(proof):
                await interaction.response.send_message(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                    ephemeral=True
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            updated_data = {
                'name': self.name_input.value.strip(),
                'static': formatted_static,
                'faction': self.faction_input.value.strip(),
                'proof': proof,
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'type': self.application_data['type'],
                'user_id': self.application_data['user_id'],
                'user_mention': self.application_data.get('user_mention', f"<@{self.application_data['user_id']}>"),
                'timestamp': self.application_data.get('timestamp')
            }
            
            await self._handle_edit_update(interaction, updated_data)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )
    
    def _format_static(self, static_input: str) -> str:
        """Auto-format static number to standard format"""
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        if len(digits_only) == 5:
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            return ""
    
    def _validate_url(self, url):
        """Basic URL validation"""
        url_pattern = re.compile(
            r'^https?://'  # http:// or https://
            r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+[A-Z]{2,6}\.?|'  # domain...
            r'localhost|'  # localhost...
            r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'  # ...or ip
            r'(?::\d+)?'  # optional port
            r'(?:/?|[/?]\S+)$', re.IGNORECASE)
        return url_pattern.match(url) is not None
    
    async def _handle_edit_update(self, interaction: discord.Interaction, updated_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º embed
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.orange()  # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" –µ—Å–ª–∏ –µ—Å—Ç—å
            fields_to_remove = []
            for i, field in enumerate(embed.fields):
                if field.name == "üìù –ò–º—è –§–∞–º–∏–ª–∏—è":
                    embed.set_field_at(i, name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=updated_data['name'], inline=True)
                elif field.name == "üî¢ –°—Ç–∞—Ç–∏–∫":
                    embed.set_field_at(i, name="üî¢ –°—Ç–∞—Ç–∏–∫", value=updated_data['static'], inline=True)
                elif field.name == "üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                    embed.set_field_at(i, name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=updated_data['faction'], inline=False)
                elif field.name == "üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ":
                    embed.set_field_at(i, name="üîó –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", value=f"[–°—Å—ã–ª–∫–∞]({updated_data['proof']})", inline=False)
                elif field.name == "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ":
                    fields_to_remove.append(i)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ" (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
            for i in reversed(fields_to_remove):
                embed.remove_field(i)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            embed.add_field(
                name="‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ",
                value=f"{interaction.user.mention}\n{discord.utils.format_dt(discord.utils.utcnow(), 'f')}",
                inline=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await interaction.response.edit_message(embed=embed)
            
        except Exception as e:
            print(f"Error updating supplier application embed: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )


class RoleRejectionReasonModal(ui.Modal, title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞"):
    """Modal for requesting rejection reason when rejecting role applications"""
    
    reason_input = ui.TextInput(
        label="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏",
        style=discord.TextStyle.paragraph,        min_length=0,
        max_length=500,
        required=True
    )
    
    def __init__(self, callback_func, *args, **kwargs):
        super().__init__()
        self.callback_func = callback_func
        self.callback_args = args
        self.callback_kwargs = kwargs
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            reason = self.reason_input.value.strip()
            
            # Call the callback function with rejection reason
            if self.callback_func:
                await self.callback_func(interaction, reason, *self.callback_args, **self.callback_kwargs)
                
        except Exception as e:
            print(f"Error in RoleRejectionReasonModal: {e}")
            # Check if we already responded to avoid errors
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.",
                    ephemeral=True
                )
    
    async def on_error(self, interaction: discord.Interaction, error: Exception):
        print(f"RoleRejectionReasonModal error: {error}")
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
        except Exception as follow_error:
            print(f"Failed to send error message in RoleRejectionReasonModal.on_error: {follow_error}")
