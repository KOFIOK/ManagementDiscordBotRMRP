"""
Utility functions for role assignment system
"""

import discord
import re
from .views import RoleAssignmentView
from .base import create_approval_view
from utils.config_manager import save_role_assignment_message_id


async def send_role_assignment_message(channel):
    """Send role assignment message with buttons, avoiding duplicates using pinned messages."""
    
    # Check pinned messages first for role assignment message
    try:
        pinned_messages = await channel.pins()
        for message in pinned_messages:
            if (message.author == channel.guild.me and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                  # Found pinned role assignment message, restore the view
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    # Save the message ID for welcome system
                    save_role_assignment_message_id(message.id)
                    print(f"Updated existing pinned role assignment message {message.id}")
                    return
                except Exception as e:
                    print(f"Error updating pinned role assignment message: {e}")
                    # If update fails, unpin and delete old message, create new one
                    try:
                        await message.unpin()
                        await message.delete()
                        print(f"Removed old pinned role assignment message {message.id}")
                    except:
                        pass
                    break
    except Exception as e:
        print(f"Error checking pinned messages for role assignment: {e}")
    
    # Create new message if none exists or old one couldn't be updated
    embed = discord.Embed(
        title="üéñÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        description=(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ.\n"
            "### üìã –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            "> ‚Ä¢ **–û–¥–Ω–∞ –∑–∞—è–≤–∫–∞** - –ø–æ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –∑–∞ —Ä–∞–∑\n"
            "> ‚Ä¢ **–î–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ** - —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–¥–∏–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "> ‚Ä¢ **–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞** - –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n"
            "> ‚Ä¢ **–¢–µ—Ä–ø–µ–Ω–∏–µ** - –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è (—É –Ω–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞)\n\n"
            "## ‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: –æ–±—ã—á–Ω–æ –¥–æ __24 —á–∞—Å–æ–≤__\n"
        ),
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="ü™ñ –ü—Ä–∏–∑—ã–≤ / –≠–∫—Å–∫—É—Ä—Å–∏—è", 
        value=(
            "> ‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ **—ç–∫—Å–∫—É—Ä—Å–∏–∏**\n"
            "> ‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ **–ø—Ä–∏–∑—ã–≤**\n"
            "> ‚Ä¢ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Å—Ä–æ—á–Ω—É—é —Å–ª—É–∂–±—É\n"
            "> ‚Ä¢ –î–µ–π—Å—Ç–≤—É—é—â–∏–π –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§"
        ), 
        inline=True
    )
    
    embed.add_field(
        name="üì¶ –î–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", 
        value=(
            "> ‚Ä¢ –°–≤—è–∑–∞–Ω—ã —Å –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏\n"
            "> ‚Ä¢ –•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤–∫–∏\n"
        ), 
        inline=True
    )
    
    embed.add_field(
        name="üë®‚Äç‚öïÔ∏è –Ø –≥–æ—Å—Å–ª—É–∂–∞—â–∏–π", 
        value=(
            "> ‚Ä¢ –†–∞–±–æ—Ç–Ω–∏–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞\n"
            "> ‚Ä¢ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        ),
        inline=True
    )
    
    embed.set_footer(
        text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"
    )
    
    view = RoleAssignmentView()
    message = await channel.send(embed=embed, view=view)
    
    # Save the message ID for welcome system
    save_role_assignment_message_id(message.id)
    
    # Pin the new message for easy access
    try:
        await message.pin()
        print(f"Pinned new role assignment message {message.id}")
    except Exception as e:
        print(f"Error pinning role assignment message: {e}")


async def restore_role_assignment_views(bot, channel):
    """Restore role assignment views for existing role assignment messages using pinned messages."""
    try:
        # Check pinned messages first
        pinned_messages = await channel.pins()
        for message in pinned_messages:
            if (message.author == bot.user and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                  # Add the view back to the pinned message
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    # Save the message ID for welcome system
                    save_role_assignment_message_id(message.id)
                    print(f"Restored role assignment view for pinned message {message.id}")
                    return  # Found and restored pinned message
                except discord.NotFound:
                    continue
                except Exception as e:
                    print(f"Error restoring view for pinned message {message.id}: {e}")
        
        # If no pinned message found, check recent history as fallback
        async for message in channel.history(limit=50):
            # Check if message is from bot and has role assignment embed
            if (message.author == bot.user and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                
                # Add the view back to the message
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    print(f"Restored role assignment view for message {message.id}")
                except discord.NotFound:
                    continue
                except Exception as e:
                    print(f"Error restoring view for message {message.id}: {e}")
                    
    except Exception as e:
        print(f"Error restoring role assignment views: {e}")


async def restore_approval_views(bot, channel):
    """Restore approval views for existing application messages."""
    try:
        async for message in channel.history(limit=100):
            # Check if message is from bot and has application embed
            if (message.author == bot.user and 
                message.embeds and
                len(message.embeds) > 0):
                
                embed = message.embeds[0]
                if not embed.title:
                    continue
                    
                # Only restore views for PENDING applications (no status field)
                if ("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏" in embed.title and 
                    not any(field.name in ["‚úÖ –°—Ç–∞—Ç—É—Å", "‚ùå –°—Ç–∞—Ç—É—Å"] for field in embed.fields)):
                    
                    # Extract application data from embed
                    try:
                        application_data = {}
                        
                        # Determine type from title
                        if "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ" in embed.title:
                            application_data["type"] = "military"
                        elif "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ" in embed.title or "–≥–æ—Å—Å–ª—É–∂–∞—â–µ–≥–æ" in embed.title:
                            application_data["type"] = "civilian"
                        else:
                            continue
                          # Extract all required fields from embed
                        for field in embed.fields:
                            if field.name == "üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å":
                                user_mention = field.value
                                # Extract user ID from mention format <@!123456789> or <@123456789>
                                match = re.search(r'<@!?(\d+)>', user_mention)
                                if match:
                                    application_data["user_id"] = int(match.group(1))
                                    application_data["user_mention"] = user_mention
                            elif field.name == "üìù –ò–º—è –§–∞–º–∏–ª–∏—è":
                                application_data["name"] = field.value
                            elif field.name == "üî¢ –°—Ç–∞—Ç–∏–∫":
                                application_data["static"] = field.value
                            elif field.name == "üéñÔ∏è –ó–≤–∞–Ω–∏–µ":
                                application_data["rank"] = field.value
                            elif field.name == "üìã –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞":
                                application_data["recruitment_type"] = field.value.lower()
                            elif field.name == "üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                                application_data["faction"] = field.value
                            elif field.name == "üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏":
                                application_data["purpose"] = field.value
                            elif field.name == "üîó –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞":
                                # Extract URL from markdown link [–°—Å—ã–ª–∫–∞](url)
                                url_match = re.search(r'\[.*?\]\((.*?)\)', field.value)
                                if url_match:
                                    application_data["proof"] = url_match.group(1)
                                else:
                                    application_data["proof"] = field.value
                        
                        # Verify we have minimum required data
                        if "user_id" in application_data and "name" in application_data and "type" in application_data:
                            # Create and add the approval view using factory function
                            view = create_approval_view(application_data)
                            await message.edit(view=view)
                            print(f"Restored approval view for {application_data['type']} application message {message.id}")
                        else:
                            print(f"Missing required data for application message {message.id}: {application_data}")
                        
                    except Exception as e:
                        print(f"Error parsing application data from message {message.id}: {e}")
                        continue
                        
                # For already processed applications, just skip them (don't restore views)
                elif ("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏" in embed.title and 
                      any(field.name in ["‚úÖ –°—Ç–∞—Ç—É—Å", "‚ùå –°—Ç–∞—Ç—É—Å"] for field in embed.fields)):
                    continue
                    
    except Exception as e:
        print(f"Error restoring approval views: {e}")
