from discord import ui
import discord
import re
from datetime import datetime, timezone
from utils.config_manager import load_config, save_config, is_moderator_or_admin
from utils.google_sheets import sheets_manager

class RoleAssignmentView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="–Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π", style=discord.ButtonStyle.green, custom_id="role_military")
    async def military_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Open military service application form"""
        modal = MilitaryApplicationModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="–Ø –Ω–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –í–° –†–§", style=discord.ButtonStyle.secondary, custom_id="role_civilian")
    async def civilian_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Open civilian application form"""
        modal = CivilianApplicationModal()
        await interaction.response.send_modal(modal)

class MilitaryApplicationModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.rank_input = ui.TextInput(
            label="–ó–≤–∞–Ω–∏–µ",
            placeholder="–û–±—ã—á–Ω–æ: –†—è–¥–æ–≤–æ–π",
            min_length=1,
            max_length=30,
            required=True,
            default="–†—è–¥–æ–≤–æ–π"
        )
        self.add_item(self.rank_input)
        self.recruitment_type_input = ui.TextInput(
            label="–ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞",
            placeholder="–≠–∫—Å–∫—É—Ä—Å–∏—è –∏–ª–∏ –ü—Ä–∏–∑—ã–≤",
            min_length=1,
            max_length=20,
            required=True
        )
        self.add_item(self.recruitment_type_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        # Auto-format and validate static
        static = self.static_input.value.strip()
        formatted_static = self._format_static(static)
        if not formatted_static:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                ephemeral=True
            )
            return
        
        # Validate recruitment type
        recruitment_type = self.recruitment_type_input.value.strip().lower()
        if recruitment_type not in ["—ç–∫—Å–∫—É—Ä—Å–∏—è", "–ø—Ä–∏–∑—ã–≤"]:
            await interaction.response.send_message(
                "‚ùå –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: '–≠–∫—Å–∫—É—Ä—Å–∏—è' –∏–ª–∏ '–ü—Ä–∏–∑—ã–≤'.",
                ephemeral=True
            )
            return
          # Create application data
        application_data = {
            "type": "military",
            "name": self.name_input.value.strip(),
            "static": formatted_static,
            "rank": self.rank_input.value.strip(),
            "recruitment_type": recruitment_type,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
          # Send application for moderation
        await self._send_application_for_approval(interaction, application_data)
    
    def _format_static(self, static_input: str) -> str:
        """
        Auto-format static number to standard format (XXX-XXX or XX-XXX).
        Accepts various input formats: 123456, 123 456, 123-456, etc.
        Returns formatted static or empty string if invalid.
        """
        # Remove all non-digit characters
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        # Check if we have exactly 5 or 6 digits
        if len(digits_only) == 5:
            # Format as XX-XXX (2-3)
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            # Format as XXX-XXX (3-3)
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            # Invalid length
            return ""
    
    def _validate_static(self, static):
        """Validate static format (123-456 or 12345)"""
        # Allow 5-6 digits with optional dash
        pattern = r'^\d{2,3}-?\d{3}$'
        return bool(re.match(pattern, static))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create application embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=application_data["rank"], inline=True)
            embed.add_field(name="üìã –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞", value=application_data["recruitment_type"].title(), inline=True)
            
            # Create approval view
            approval_view = RoleApplicationApprovalView(application_data)
            
            # Get ping roles for notifications (military applications)
            ping_role_ids = config.get('military_role_assignment_ping_roles', [])
            ping_content = ""
            if ping_role_ids:
                ping_mentions = []
                for ping_role_id in ping_role_ids:
                    ping_role = moderation_channel.guild.get_role(ping_role_id)
                    if ping_role:
                        ping_mentions.append(ping_role.mention)
                if ping_mentions:
                    ping_content = f"-# {' '.join(ping_mentions)}"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending military application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )

class CivilianApplicationModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–í–î, –°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç, –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.faction_input)
        
        self.purpose_input = ui.TextInput(
            label="–¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.purpose_input)
        self.proof_input = ui.TextInput(
            label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            min_length=5,
            max_length=200,
            required=True
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        # Auto-format and validate static
        static = self.static_input.value.strip()
        formatted_static = self._format_static(static)
        if not formatted_static:
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –°—Ç–∞—Ç–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∏–ª–∏ 6 —Ü–∏—Ñ—Ä.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 123456, 123-456, 12345, 12-345, 123 456",
                ephemeral=True
            )
            return
        
        # Validate proof URL
        proof = self.proof_input.value.strip()
        if not self._validate_url(proof):
            await interaction.response.send_message(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                ephemeral=True
            )
            return
          # Create application data
        application_data = {
            "type": "civilian",
            "name": self.name_input.value.strip(),
            "static": formatted_static,
            "faction": self.faction_input.value.strip(),
            "purpose": self.purpose_input.value.strip(),
            "proof": proof,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send application for moderation        await self._send_application_for_approval(interaction, application_data)
    
    def _format_static(self, static_input: str) -> str:
        """
        Auto-format static number to standard format (XXX-XXX or XX-XXX).
        Accepts various input formats: 123456, 123 456, 123-456, etc.
        Returns formatted static or empty string if invalid.
        """
        # Remove all non-digit characters
        digits_only = re.sub(r'\D', '', static_input.strip())
        
        # Check if we have exactly 5 or 6 digits
        if len(digits_only) == 5:
            # Format as XX-XXX (2-3)
            return f"{digits_only[:2]}-{digits_only[2:]}"
        elif len(digits_only) == 6:
            # Format as XXX-XXX (3-3)
            return f"{digits_only[:3]}-{digits_only[3:]}"
        else:
            # Invalid length
            return ""
    
    def _validate_static(self, static):
        """Validate static format (123-456 or 12345)"""
        pattern = r'^\d{2,3}-?\d{3}$'
        return bool(re.match(pattern, static))
    
    def _validate_url(self, url):
        """Basic URL validation"""
        url_pattern = r'https?://[^\s/$.?#].[^\s]*'
        return bool(re.match(url_pattern, url))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create application embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=application_data["faction"], inline=False)
            embed.add_field(name="üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏", value=application_data["purpose"], inline=False)
            embed.add_field(name="üîó –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=f"[–°—Å—ã–ª–∫–∞]({application_data['proof']})", inline=False)
            
            # Create approval view
            approval_view = RoleApplicationApprovalView(application_data)
            
            # Get ping roles for notifications (civilian applications)
            ping_role_ids = config.get('civilian_role_assignment_ping_roles', [])
            ping_content = ""
            if ping_role_ids:
                ping_mentions = []
                for ping_role_id in ping_role_ids:
                    ping_role = moderation_channel.guild.get_role(ping_role_id)
                    if ping_role:
                        ping_mentions.append(ping_role.mention)
                if ping_mentions:
                    ping_content = f"-# {' '.join(ping_mentions)}"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending civilian application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )

class RoleApplicationApprovalView(ui.View):
    def __init__(self, application_data):
        super().__init__(timeout=None)
        self.application_data = application_data
    
    @discord.ui.button(label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.green, custom_id="approve_role_app")
    async def approve_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Check if user has moderator permissions
        if not await self._check_moderator_permissions(interaction):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫.",
                ephemeral=True
            )
            return
        
        try:
            config = load_config()
            guild = interaction.guild
            user = guild.get_member(self.application_data["user_id"])
            
            if not user:
                await interaction.response.send_message(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    ephemeral=True
                )
                return
                # Get appropriate roles based on application type
            if self.application_data["type"] == "military":
                role_ids = config.get('military_roles', [])
                role_type = "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ"
                
                # Check if this is "–†—è–¥–æ–≤–æ–π" rank for automatic processing
                is_private_rank = self.application_data.get("rank", "").lower() == "—Ä—è–¥–æ–≤–æ–π"
                
                if is_private_rank:
                    # Change nickname only for automatic processing (–†—è–¥–æ–≤–æ–π)
                    new_nickname = f"–í–ê | {self.application_data['name']}"
                    try:
                        await user.edit(nick=new_nickname, reason="–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
                    except discord.Forbidden:
                        pass  # Bot might not have permission to change this user's nickname
                        
            else:  # civilian
                role_ids = config.get('civilian_roles', [])
                role_type = "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ"
                is_private_rank = True  # Civilians always get automatic processing
            
            # For military non-–†—è–¥–æ–≤–æ–π applications, skip role assignment
            assigned_roles = []
            if self.application_data["type"] == "military" and not is_private_rank:
                # Skip role assignment for non-–†—è–¥–æ–≤–æ–π ranks
                print(f"Skipping role assignment for military rank: {self.application_data.get('rank', 'Unknown')}")
            else:
                # Remove opposite roles if they exist
                opposite_role_ids = config.get('civilian_roles' if self.application_data["type"] == "military" else 'military_roles', [])
                for opposite_role_id in opposite_role_ids:
                    opposite_role = guild.get_role(opposite_role_id)
                    if opposite_role and opposite_role in user.roles:
                        try:
                            await user.remove_roles(opposite_role, reason=f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type}")
                        except discord.Forbidden:
                            print(f"No permission to remove role {opposite_role.name} from {user}")
                        except Exception as e:
                            print(f"Error removing role {opposite_role.name}: {e}")
                
                # Add configured roles if any exist
                if role_ids:
                    # Get roles from guild
                    roles_to_assign = []
                    for role_id in role_ids:
                        role = guild.get_role(role_id)
                        if role:
                            roles_to_assign.append(role)
                        else:
                            print(f"Warning: Role {role_id} not found in guild")
                      # Add all found roles
                    for role in roles_to_assign:
                        try:
                            await user.add_roles(role, reason=f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å {role_type}")
                            assigned_roles.append(role.mention)
                        except discord.Forbidden:
                            print(f"No permission to assign role {role.name} to {user}")
                        except Exception as e:
                            print(f"Error assigning role {role.name}: {e}")
                else:
                    print(f"Warning: No roles configured for {role_type}")
              # Update embed to show approval
            original_embed = interaction.message.embeds[0]
            original_embed.color = discord.Color.green()
            
            if self.application_data["type"] == "military":
                if is_private_rank:
                    status_message = f"–û–¥–æ–±—Ä–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –í–ö {interaction.user.mention}"
                else:
                    status_message = f"–û–¥–æ–±—Ä–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –í–ö {interaction.user.mention}\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–≤–∞–Ω–∏—è {self.application_data.get('rank', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            elif self.application_data["type"] == "civilian":
                status_message = f"–û–¥–æ–±—Ä–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –±—Ä–∏–≥–∞–¥—ã ( {interaction.user.mention} )"

            if self.application_data["type"] == "military" and not is_private_rank:
                status_message += "\nüîÑ –†–æ–ª–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
            elif not role_ids:
                status_message += "\n‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –≤—ã–¥–∞—á–∞ —Ä–æ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            elif self.application_data["type"] != "military" or is_private_rank:
                if not assigned_roles:
                    status_message += "\n‚ö†Ô∏è –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
            
            original_embed.add_field(
                name="‚úÖ –°—Ç–∞—Ç—É—Å",
                value=status_message,
                inline=False
            )
            
            # Clear ping role content
            await interaction.message.edit(content="")
            
            # Create new view with only archive button
            approved_view = ApprovedApplicationView()
            
            # Respond to interaction first to avoid timeout
            await interaction.response.edit_message(embed=original_embed, view=approved_view)              # Add hiring record to Google Sheets for military applications with rank "–†—è–¥–æ–≤–æ–π" (after responding)
            if self.application_data["type"] == "military" and is_private_rank:
                try:
                    hiring_time = datetime.now(timezone.utc)
                    sheets_success = await sheets_manager.add_hiring_record(
                        self.application_data,
                        user,
                        interaction.user,
                        hiring_time
                    )
                    if sheets_success:
                        print(f"‚úÖ Successfully added hiring record for {self.application_data.get('name', 'Unknown')}")
                    else:
                        print(f"‚ö†Ô∏è Failed to add hiring record for {self.application_data.get('name', 'Unknown')}")
                except Exception as e:
                    print(f"‚ùå Error adding hiring record to Google Sheets: {e}")
            
            # Send notification to audit channel for military applications with rank "–†—è–¥–æ–≤–æ–π"
            if self.application_data["type"] == "military" and is_private_rank:
                try:
                    config = load_config()
                    audit_channel_id = config.get('audit_channel')
                    if audit_channel_id:
                        audit_channel = guild.get_channel(audit_channel_id)
                        if audit_channel:
                            # Get approving user info from Google Sheets
                            signed_by_name = interaction.user.display_name  # Default fallback
                            try:
                                # Extract clean name from approving user's nickname
                                approved_by_clean_name = sheets_manager.extract_name_from_nickname(interaction.user.display_name)
                                if approved_by_clean_name:
                                    # Extract surname (last word)
                                    name_parts = approved_by_clean_name.strip().split()
                                    if len(name_parts) >= 2:
                                        surname = name_parts[-1]  # Last word as surname
                                        # Search in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet
                                        full_user_info = await sheets_manager.get_user_info_from_users_sheet(surname)
                                        if full_user_info:
                                            signed_by_name = full_user_info
                                        else:
                                            signed_by_name = approved_by_clean_name
                            except Exception as e:
                                print(f"Error getting approving user info from Google Sheets: {e}")
                            
                            # Create audit notification embed with correct template
                            audit_embed = discord.Embed(
                                title="–ö–∞–¥—Ä–æ–≤—ã–π –∞—É–¥–∏—Ç –í–° –†–§",
                                color=0x055000,  # Green color as in template
                                timestamp=discord.utils.utcnow()
                            )
                            
                            # Format date as dd-MM-yyyy
                            action_date = discord.utils.utcnow().strftime('%d-%m-%Y')
                            
                            # Combine name and static for "–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫" field
                            name_with_static = f"{self.application_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} | {self.application_data.get('static', '')}"
                              # Set fields according to template
                            audit_embed.add_field(name="–ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª", value=signed_by_name, inline=False)
                            audit_embed.add_field(name="–ò–º—è –§–∞–º–∏–ª–∏—è | 6 —Ü–∏—Ñ—Ä —Å—Ç–∞—Ç–∏–∫–∞", value=name_with_static, inline=False)
                            audit_embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value="–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É", inline=False)
                            
                            # Add recruitment type if available (right after "–î–µ–π—Å—Ç–≤–∏–µ")
                            recruitment_type = self.application_data.get("recruitment_type", "")
                            if recruitment_type:
                                audit_embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", value=recruitment_type.capitalize(), inline=False)
                            
                            audit_embed.add_field(name="–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è", value=action_date, inline=False)
                            audit_embed.add_field(name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", value="–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è", inline=False)
                            audit_embed.add_field(name="–í–æ–∏–Ω—Å–∫–æ–µ –∑–≤–∞–Ω–∏–µ", value=self.application_data.get("rank", "–†—è–¥–æ–≤–æ–π"), inline=False)
                            
                            # Set thumbnail to default image as in template
                            audit_embed.set_thumbnail(url="https://i.imgur.com/07MRSyl.png")
                            
                            # Send notification with user mention (the user who was hired)
                            audit_message = await audit_channel.send(content=f"<@{user.id}>", embed=audit_embed)
                            print(f"Sent audit notification for hiring of {user.display_name}")
                        else:
                            print(f"Audit channel not found: {audit_channel_id}")
                    else:                        print("Audit channel ID not configured")
                except Exception as e:
                    print(f"Error sending audit notification for hiring: {e}")

            try:
                if self.application_data["type"] == "military":
                    # Military instructions for automatic processing (–†—è–¥–æ–≤–æ–π)
                    instructions = (
                        "## ‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                        "üìã **–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
                        "> ‚Ä¢ –ö–∞–Ω–∞–ª –æ–±—â–µ–Ω–∏—è:\n> <#1246126422251278597>\n"
                        "> ‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π (–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è):\n> <#1336337899309895722>\n"
                        "> ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è:\n> <#1337434149274779738>\n"
                        "> ‚Ä¢ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Å–∞–π—Ç–æ–º –í–æ–æ—Ä—É–∂—ë–Ω–Ω—ã—Ö –°–∏–ª –†–§:\n> <#1326022450307137659>\n"
                        "> ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø—Ä–∏–∫–∞–∑–∞–º–∏:\n> <#1251166871064019015>\n"
                        "> ‚Ä¢ –£–∂–µ –±—ã–ª–∏ –≤ –í–° –†–§? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è:\n> <#1317830537724952626>\n"
                        "> ‚Ä¢ –†–µ—à–∏–ª–∏, —á—Ç–æ —Å–ª—É–∂–±–∞ –Ω–µ –¥–ª—è –≤–∞—Å? –ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–ø–æ—Ä—Ç –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ:\n> <#1246119825487564981>"
                    )
                else:
                    # Civilian instructions
                    instructions = (
                        "## ‚úÖ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n"
                        "üìã **–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n> "
                        "> ‚Ä¢ –ö–∞–Ω–∞–ª –æ–±—â–µ–Ω–∏—è:\n> <#1246125346152251393>\n"
                        "> ‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É:\n> <#1246119051726553099>\n"
                        "> ‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø—É—Å–∫ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –í–° –†–§:\n> <#1246119269784354888>"
                    )
                
                await user.send(instructions)
            except discord.Forbidden:
                pass  # User has DMs disabled
                    
        except Exception as e:
            print(f"Error approving role application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )
    
    @discord.ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, custom_id="reject_role_app")
    async def reject_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Check if user has moderator permissions
        if not await self._check_moderator_permissions(interaction):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫.",
                ephemeral=True
            )
            return
          # Reject immediately without reason modal
        await self._process_rejection(interaction)
    
    async def _check_moderator_permissions(self, interaction):
        """Check if user has moderator permissions"""
        config = load_config()
        return is_moderator_or_admin(interaction.user, config)

    async def _process_rejection(self, interaction):
        """Process application rejection"""
        try:
            guild = interaction.guild
            user = guild.get_member(self.application_data["user_id"])
              
            # Update embed to show rejection
            original_embed = interaction.message.embeds[0]
            original_embed.color = discord.Color.red()
            original_embed.add_field(
                name="‚ùå –°—Ç–∞—Ç—É—Å",
                value=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {interaction.user.mention}",
                inline=False
            )
            
            # Clear ping role content
            await interaction.message.edit(content="")
            
            # Create new view with rejection status button
            rejected_view = RejectedApplicationView()
            
            await interaction.response.edit_message(embed=original_embed, view=rejected_view)
            
            # Send notification to user
            if user:
                try:
                    role_type = "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ" if self.application_data["type"] == "military" else "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ"
                    await user.send(
                        f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –ø–æ–∑–∂–µ."
                    )
                except discord.Forbidden:
                    pass  # User has DMs disabled
                    
        except Exception as e:
            print(f"Error rejecting role application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )

class ApprovedApplicationView(ui.View):
    """View to show after application is approved"""
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ", style=discord.ButtonStyle.green, custom_id="status_approved", disabled=True)
    async def approved_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        # This button is disabled and just for visual indication
        pass

class RejectedApplicationView(ui.View):
    """View to show after application is rejected"""
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ", style=discord.ButtonStyle.red, custom_id="status_rejected", disabled=True)
    async def rejected_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        # This button is disabled and just for visual indication
        pass

# Message with buttons for role assignment
async def send_role_assignment_message(channel):
    """Send role assignment message with buttons, avoiding duplicates."""
    
    # Check if there's already a role assignment message in the channel
    try:
        async for message in channel.history(limit=20):
            if (message.author == channel.guild.me and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                
                # Message already exists, just restore the view
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    print(f"Updated existing role assignment message {message.id}")
                    return
                except Exception as e:
                    print(f"Error updating existing message: {e}")
                    # If update fails, delete old message and create new one
                    try:
                        await message.delete()
                    except:
                        pass
                    break
    except Exception as e:
        print(f"Error checking for existing messages: {e}")
    
    # Create new message if none exists or old one couldn't be updated
    embed = discord.Embed(
        title="üéñÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
        description=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –í–æ–æ—Ä—É–∂—ë–Ω–Ω—ã–º –°–∏–ª–∞–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
            "# ‚ö†Ô∏è –í–ê–ñ–ù–û:\n–ï—Å–ª–∏ –≤—ã –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ (—ç–∫—Å–∫—É—Ä—Å–∏–∏/–ø—Ä–∏–∑—ã–≤–∞), —Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `\"–Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π\"`!"
        ),
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="ü™ñ –Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π", 
        value="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, –µ—Å–ª–∏:\n‚Ä¢ –í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞–±–æ—Ä/–ø—Ä–∏–∑—ã–≤\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏\n‚Ä¢ –Ø–≤–ª—è–µ—Ç–µ—Å—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º –í–° –†–§", 
        inline=True
    )
    
    embed.add_field(
        name="üë§ –Ø –Ω–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –í–° –†–§", 
        value="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, –µ—Å–ª–∏:\n‚Ä¢ –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å\n‚Ä¢ –í—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫\n‚Ä¢ –í—ã –¥—Ä—É–≥–æ–π –≥–æ—Å. —Å–ª—É–∂–∞—â–∏–π", 
        inline=True
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
        value="1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–∞–≤ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É", 
        inline=False
    )
    
    view = RoleAssignmentView()
    await channel.send(embed=embed, view=view)

# Function to restore role assignment views for existing messages
async def restore_role_assignment_views(bot, channel):
    """Restore role assignment views for existing role assignment messages."""
    try:
        async for message in channel.history(limit=50):
            # Check if message is from bot and has role assignment embed
            if (message.author == bot.user and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                
                # Add the view back to the message
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    print(f"Restored role assignment view for message {message.id}")
                except discord.NotFound:
                    continue
                except Exception as e:
                    print(f"Error restoring view for message {message.id}: {e}")
                    
    except Exception as e:
        print(f"Error restoring role assignment views: {e}")

# Function to restore approval views for existing application messages
async def restore_approval_views(bot, channel):
    """Restore approval views for existing application messages."""
    try:
        async for message in channel.history(limit=100):
            # Check if message is from bot and has application embed
            if (message.author == bot.user and 
                message.embeds and
                len(message.embeds) > 0):
                
                embed = message.embeds[0]
                if not embed.title:
                    continue
                    
                # Only restore views for PENDING applications (no status field)
                if ("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏" in embed.title and 
                    not any(field.name in ["‚úÖ –°—Ç–∞—Ç—É—Å", "‚ùå –°—Ç–∞—Ç—É—Å"] for field in embed.fields)):
                    
                    # Extract application data from embed
                    try:
                        application_data = {}
                        
                        # Determine type from title
                        if "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ" in embed.title:
                            application_data["type"] = "military"
                        elif "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ" in embed.title:
                            application_data["type"] = "civilian"
                        else:
                            continue
                        
                        # Extract all required fields from embed
                        for field in embed.fields:
                            if field.name == "üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å":
                                user_mention = field.value
                                # Extract user ID from mention format <@!123456789> or <@123456789>
                                import re
                                match = re.search(r'<@!?(\d+)>', user_mention)
                                if match:
                                    application_data["user_id"] = int(match.group(1))
                                    application_data["user_mention"] = user_mention
                            elif field.name == "üìù –ò–º—è –§–∞–º–∏–ª–∏—è":
                                application_data["name"] = field.value
                            elif field.name == "üî¢ –°—Ç–∞—Ç–∏–∫":
                                application_data["static"] = field.value
                            elif field.name == "üéñÔ∏è –ó–≤–∞–Ω–∏–µ":
                                application_data["rank"] = field.value
                            elif field.name == "üìã –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞":
                                application_data["recruitment_type"] = field.value.lower()
                            elif field.name == "üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å":
                                application_data["faction"] = field.value
                            elif field.name == "üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏":
                                application_data["purpose"] = field.value
                            elif field.name == "üîó –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞":
                                # Extract URL from markdown link [–°—Å—ã–ª–∫–∞](url)
                                import re
                                url_match = re.search(r'\[.*?\]\((.*?)\)', field.value)
                                if url_match:
                                    application_data["proof"] = url_match.group(1)
                                else:
                                    application_data["proof"] = field.value
                        
                        # Verify we have minimum required data
                        if "user_id" in application_data and "name" in application_data and "type" in application_data:
                            # Create and add the approval view
                            view = RoleApplicationApprovalView(application_data)
                            await message.edit(view=view)
                            print(f"Restored approval view for {application_data['type']} application message {message.id}")
                        else:
                            print(f"Missing required data for application message {message.id}: {application_data}")
                        
                    except Exception as e:
                        print(f"Error parsing application data from message {message.id}: {e}")
                        continue
                        
                # For already processed applications, just skip them (don't restore views)
                elif ("–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏" in embed.title and 
                      any(field.name in ["‚úÖ –°—Ç–∞—Ç—É—Å", "‚ùå –°—Ç–∞—Ç—É—Å"] for field in embed.fields)):
                    continue
                    
    except Exception as e:
        print(f"Error restoring approval views: {e}")