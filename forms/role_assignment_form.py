import discord
from discord import ui
from utils.config_manager import load_config, save_config

class RoleAssignmentView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="–Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π", style=discord.ButtonStyle.green, custom_id="role_military")
    async def military_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Open military service application form"""
        modal = MilitaryApplicationModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="–Ø –Ω–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –í–° –†–§", style=discord.ButtonStyle.secondary, custom_id="role_civilian")
    async def civilian_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Open civilian application form"""
        modal = CivilianApplicationModal()
        await interaction.response.send_modal(modal)

class MilitaryApplicationModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.rank_input = ui.TextInput(
            label="–ó–≤–∞–Ω–∏–µ",
            placeholder="–û–±—ã—á–Ω–æ: –†—è–¥–æ–≤–æ–π",
            min_length=1,
            max_length=30,
            required=True,
            default="–†—è–¥–æ–≤–æ–π"
        )
        self.add_item(self.rank_input)
        
        self.recruitment_type_input = ui.TextInput(
            label="–ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞",
            placeholder="—ç–∫—Å–∫—É—Ä—Å–∏—è –∏–ª–∏ –ø—Ä–∏–∑—ã–≤",
            min_length=1,
            max_length=20,
            required=True
        )
        self.add_item(self.recruitment_type_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        # Validate static format
        static = self.static_input.value.strip()
        if not self._validate_static(static):
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 123-456 (5-6 —Ü–∏—Ñ—Ä).",
                ephemeral=True
            )
            return
        
        # Validate recruitment type
        recruitment_type = self.recruitment_type_input.value.strip().lower()
        if recruitment_type not in ["—ç–∫—Å–∫—É—Ä—Å–∏—è", "–ø—Ä–∏–∑—ã–≤"]:
            await interaction.response.send_message(
                "‚ùå –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: '—ç–∫—Å–∫—É—Ä—Å–∏—è' –∏–ª–∏ '–ø—Ä–∏–∑—ã–≤'.",
                ephemeral=True
            )
            return
        
        # Create application data
        application_data = {
            "type": "military",
            "name": self.name_input.value.strip(),
            "static": static,
            "rank": self.rank_input.value.strip(),
            "recruitment_type": recruitment_type,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send application for moderation
        await self._send_application_for_approval(interaction, application_data)
    
    def _validate_static(self, static):
        """Validate static format (123-456 or 12345)"""
        import re
        # Allow 5-6 digits with optional dash
        pattern = r'^\d{2,3}-?\d{3}$'
        return bool(re.match(pattern, static))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create application embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=application_data["rank"], inline=True)
            embed.add_field(name="üìã –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞", value=application_data["recruitment_type"].title(), inline=True)
            
            # Create approval view
            approval_view = RoleApplicationApprovalView(application_data)
            
            # Get ping role for notifications
            ping_role_id = config.get('role_assignment_ping_role')
            ping_content = ""
            if ping_role_id:
                ping_role = moderation_channel.guild.get_role(ping_role_id)
                if ping_role:
                    ping_content = f"{ping_role.mention} –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å!"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending military application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )

class CivilianApplicationModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ")
        
        self.name_input = ui.TextInput(
            label="–ò–º—è –§–∞–º–∏–ª–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            min_length=2,
            max_length=50,
            required=True
        )
        self.add_item(self.name_input)
        
        self.static_input = ui.TextInput(
            label="–°—Ç–∞—Ç–∏–∫",
            placeholder="123-456 (–¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è 5-6 —Ü–∏—Ñ—Ä)",
            min_length=5,
            max_length=7,
            required=True
        )
        self.add_item(self.static_input)
        
        self.faction_input = ui.TextInput(
            label="–§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–í–î, –°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç, –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.faction_input)
        
        self.purpose_input = ui.TextInput(
            label="–¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.purpose_input)
        
        self.proof_input = ui.TextInput(
            label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Å—Å—ã–ª–∫–∞)",
            placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            min_length=5,
            max_length=200,
            required=True
        )
        self.add_item(self.proof_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        # Validate static format
        static = self.static_input.value.strip()
        if not self._validate_static(static):
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 123-456 (5-6 —Ü–∏—Ñ—Ä).",
                ephemeral=True
            )
            return
        
        # Validate proof URL
        proof = self.proof_input.value.strip()
        if not self._validate_url(proof):
            await interaction.response.send_message(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤.",
                ephemeral=True
            )
            return
        
        # Create application data
        application_data = {
            "type": "civilian",
            "name": self.name_input.value.strip(),
            "static": static,
            "faction": self.faction_input.value.strip(),
            "purpose": self.purpose_input.value.strip(),
            "proof": proof,
            "user_id": interaction.user.id,
            "user_mention": interaction.user.mention
        }
        
        # Send application for moderation
        await self._send_application_for_approval(interaction, application_data)
    
    def _validate_static(self, static):
        """Validate static format (123-456 or 12345)"""
        import re
        pattern = r'^\d{2,3}-?\d{3}$'
        return bool(re.match(pattern, static))
    
    def _validate_url(self, url):
        """Basic URL validation"""
        import re
        url_pattern = r'https?://[^\s/$.?#].[^\s]*'
        return bool(re.match(url_pattern, url))
    
    async def _send_application_for_approval(self, interaction, application_data):
        """Send application to moderation channel"""
        try:
            config = load_config()
            moderation_channel_id = config.get('role_assignment_channel')
            
            if not moderation_channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            moderation_channel = interaction.guild.get_channel(moderation_channel_id)
            if not moderation_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create application embed
            embed = discord.Embed(
                title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=application_data["user_mention"], inline=False)
            embed.add_field(name="üìù –ò–º—è –§–∞–º–∏–ª–∏—è", value=application_data["name"], inline=True)
            embed.add_field(name="üî¢ –°—Ç–∞—Ç–∏–∫", value=application_data["static"], inline=True)
            embed.add_field(name="üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è, –∑–≤–∞–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å", value=application_data["faction"], inline=False)
            embed.add_field(name="üéØ –¶–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏", value=application_data["purpose"], inline=False)
            embed.add_field(name="üîó –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", value=f"[–°—Å—ã–ª–∫–∞]({application_data['proof']})", inline=False)
              # Create approval view
            approval_view = RoleApplicationApprovalView(application_data)
            
            # Get ping role for notifications
            ping_role_id = config.get('role_assignment_ping_role')
            ping_content = ""
            if ping_role_id:
                ping_role = moderation_channel.guild.get_role(ping_role_id)
                if ping_role:
                    ping_content = f"{ping_role.mention} –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–æ–ª—å!"
            
            # Send to moderation channel
            await moderation_channel.send(content=ping_content, embed=embed, view=approval_view)
            
            await interaction.response.send_message(
                "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error sending civilian application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )

class RoleApplicationApprovalView(ui.View):
    def __init__(self, application_data):
        super().__init__(timeout=None)
        self.application_data = application_data
    
    @discord.ui.button(label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.green, custom_id="approve_role_app")
    async def approve_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Check if user has moderator permissions
        if not await self._check_moderator_permissions(interaction):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫.",
                ephemeral=True
            )
            return
        
        try:
            config = load_config()
            guild = interaction.guild
            user = guild.get_member(self.application_data["user_id"])
            
            if not user:
                await interaction.response.send_message(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    ephemeral=True
                )
                return
              # Get appropriate role based on application type
            if self.application_data["type"] == "military":
                role_id = config.get('military_role')
                additional_roles_ids = config.get('additional_military_roles', [])
                role_type = "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ"
                
                # Change nickname for military personnel
                new_nickname = f"–í–ê | {self.application_data['name']}"
                try:
                    await user.edit(nick=new_nickname, reason="–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
                except discord.Forbidden:
                    pass  # Bot might not have permission to change this user's nickname
                    
            else:  # civilian
                role_id = config.get('civilian_role')
                additional_roles_ids = []
                role_type = "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ"
            
            if not role_id:
                await interaction.response.send_message(
                    f"‚ùå –†–æ–ª—å {role_type} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                    ephemeral=True
                )
                return
            
            role = guild.get_role(role_id)
            if not role:
                await interaction.response.send_message(
                    f"‚ùå –†–æ–ª—å {role_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    ephemeral=True
                )
                return
            
            # Remove opposite role if exists
            opposite_role_id = config.get('civilian_role' if self.application_data["type"] == "military" else 'military_role')
            if opposite_role_id:
                opposite_role = guild.get_role(opposite_role_id)
                if opposite_role and opposite_role in user.roles:
                    await user.remove_roles(opposite_role, reason=f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type}")
            
            # Add primary role
            await user.add_roles(role, reason=f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å {role_type}")
            
            # Add additional military roles if applicable
            assigned_roles = [role.mention]
            if self.application_data["type"] == "military" and additional_roles_ids:
                for additional_role_id in additional_roles_ids:
                    additional_role = guild.get_role(additional_role_id)
                    if additional_role:
                        try:
                            await user.add_roles(additional_role, reason="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ–ª—å –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
                            assigned_roles.append(additional_role.mention)
                        except discord.Forbidden:
                            print(f"No permission to assign role {additional_role.name} to {user}")
                        except Exception as e:
                            print(f"Error assigning additional role {additional_role.name}: {e}")
            
            # Update embed to show approval
            original_embed = interaction.message.embeds[0]
            original_embed.color = discord.Color.green()
            original_embed.add_field(
                name="‚úÖ –°—Ç–∞—Ç—É—Å",
                value=f"–û–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}",
                inline=False
            )
            
            # Clear ping role content by editing the message
            ping_role_id = config.get('role_assignment_ping_role')
            if ping_role_id:
                ping_role = guild.get_role(ping_role_id)
                if ping_role and ping_role.mention in interaction.message.content:
                    await interaction.message.edit(content="")
            
            # Create new view with only one button showing
            approved_view = ApprovedApplicationView()
            
            await interaction.response.edit_message(embed=original_embed, view=approved_view)
            
            # Send notification to user
            try:
                roles_text = ", ".join(assigned_roles) if len(assigned_roles) > 1 else assigned_roles[0]
                await user.send(
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {'—Ä–æ–ª–∏' if len(assigned_roles) > 1 else '—Ä–æ–ª—å'}: {roles_text}"
                )
            except discord.Forbidden:
                pass  # User has DMs disabled
                
        except Exception as e:
            print(f"Error approving role application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True            )

class ApprovedApplicationView(ui.View):
    """View to show after application is approved - shows only archive button"""
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="üóÉÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.secondary, custom_id="archive_approved", disabled=True)
    async def archive_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # This button is disabled and just for visual indication
        pass

class RejectedApplicationView(ui.View):
    """View to show after application is rejected - shows only archive button"""
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label="üóÉÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", style=discord.ButtonStyle.secondary, custom_id="archive_rejected", disabled=True)
    async def archive_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # This button is disabled and just for visual indication
        pass

    @discord.ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, custom_id="reject_role_app")
    async def reject_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Check if user has moderator permissions
        if not await self._check_moderator_permissions(interaction):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫.",
                ephemeral=True
            )
            return
        
        modal = RejectionReasonModal(self.application_data)
        await interaction.response.send_modal(modal)
    
    async def _check_moderator_permissions(self, interaction):
        """Check if user has moderator permissions"""
        # Check if user is admin
        if interaction.user.guild_permissions.administrator:
            return True
        
        # Check moderator settings from config
        config = load_config()
        moderators = config.get('moderators', {})
        
        # Check if user is in moderator users list
        if interaction.user.id in moderators.get('users', []):
            return True
        
        # Check if user has any moderator roles
        user_role_ids = [role.id for role in interaction.user.roles]
        moderator_role_ids = moderators.get('roles', [])
        if any(role_id in user_role_ids for role_id in moderator_role_ids):
            return True
        
        return False

class RejectionReasonModal(ui.Modal):
    def __init__(self, application_data):
        super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
        self.application_data = application_data
        
        self.reason_input = ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...",
            style=discord.TextStyle.paragraph,
            min_length=10,
            max_length=500,
            required=True
        )
        self.add_item(self.reason_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            guild = interaction.guild
            user = guild.get_member(self.application_data["user_id"])
              # Update embed to show rejection
            original_embed = interaction.message.embeds[0]
            original_embed.color = discord.Color.red()
            original_embed.add_field(
                name="‚ùå –°—Ç–∞—Ç—É—Å",
                value=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}",
                inline=False
            )
            original_embed.add_field(
                name="üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
                value=self.reason_input.value,
                inline=False
            )
            
            # Clear ping role content by editing the message
            config = load_config()
            guild = interaction.guild
            ping_role_id = config.get('role_assignment_ping_role')
            if ping_role_id:
                ping_role = guild.get_role(ping_role_id)
                if ping_role and ping_role.mention in interaction.message.content:
                    await interaction.message.edit(content="")
            
            # Create new view with only one button showing
            rejected_view = RejectedApplicationView()
            
            await interaction.response.edit_message(embed=original_embed, view=rejected_view)
            
            # Send notification to user
            if user:
                try:
                    role_type = "–≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ" if self.application_data["type"] == "military" else "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ"
                    await user.send(
                        f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ {role_type} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        f"**–ü—Ä–∏—á–∏–Ω–∞:** {self.reason_input.value}\n\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏."
                    )
                except discord.Forbidden:
                    pass  # User has DMs disabled
                    
        except Exception as e:
            print(f"Error rejecting role application: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )

# Message with buttons for role assignment
async def send_role_assignment_message(channel):
    """Send role assignment message with buttons, avoiding duplicates."""
    
    # Check if there's already a role assignment message in the channel
    try:
        async for message in channel.history(limit=20):
            if (message.author == channel.guild.me and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                
                # Message already exists, just restore the view
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    print(f"Updated existing role assignment message {message.id}")
                    return
                except Exception as e:
                    print(f"Error updating existing message: {e}")
                    # If update fails, delete old message and create new one
                    try:
                        await message.delete()
                    except:
                        pass
                    break
    except Exception as e:
        print(f"Error checking for existing messages: {e}")
    
    # Create new message if none exists or old one couldn't be updated
    embed = discord.Embed(
        title="üéñÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
        description=(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –í–æ–æ—Ä—É–∂—ë–Ω–Ω—ã–º –°–∏–ª–∞–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"
            "# ‚ö†Ô∏è –í–ê–ñ–ù–û:\n–ï—Å–ª–∏ –≤—ã –ø–æ—Å–ª–µ –Ω–∞–±–æ—Ä–∞ (—ç–∫—Å–∫—É—Ä—Å–∏–∏/–ø—Ä–∏–∑—ã–≤–∞), —Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `\"–Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π\"`!"
        ),
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="ü™ñ –Ø –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π", 
        value="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, –µ—Å–ª–∏:\n‚Ä¢ –í—ã –ø—Ä–æ—à–ª–∏ –Ω–∞–±–æ—Ä/–ø—Ä–∏–∑—ã–≤\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏\n‚Ä¢ –Ø–≤–ª—è–µ—Ç–µ—Å—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–º –í–° –†–§", 
        inline=True
    )
    
    embed.add_field(
        name="üë§ –Ø –Ω–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –í–° –†–§", 
        value="–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –æ–ø—Ü–∏—é, –µ—Å–ª–∏:\n‚Ä¢ –í—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å\n‚Ä¢ –í—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫\n‚Ä¢ –í—ã –¥—Ä—É–≥–æ–π –≥–æ—Å. —Å–ª—É–∂–∞—â–∏–π", 
        inline=True
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
        value="1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä, –Ω–∞–∂–∞–≤ –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É", 
        inline=False
    )
    
    view = RoleAssignmentView()
    await channel.send(embed=embed, view=view)

# Function to restore role assignment views for existing messages
async def restore_role_assignment_views(bot, channel):
    """Restore role assignment views for existing role assignment messages."""
    try:
        async for message in channel.history(limit=50):
            # Check if message is from bot and has role assignment embed
            if (message.author == bot.user and 
                message.embeds and
                message.embeds[0].title and
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π" in message.embeds[0].title):
                
                # Add the view back to the message
                view = RoleAssignmentView()
                try:
                    await message.edit(view=view)
                    print(f"Restored role assignment view for message {message.id}")
                except discord.NotFound:
                    continue
                except Exception as e:
                    print(f"Error restoring view for message {message.id}: {e}")
                    
    except Exception as e:
        print(f"Error restoring role assignment views: {e}")
