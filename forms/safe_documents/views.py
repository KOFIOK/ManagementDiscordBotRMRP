import discord

class SafeDocumentsPinView(discord.ui.View):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π view –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(
        label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
        style=discord.ButtonStyle.primary,
        custom_id="safe_documents:submit_application",
        emoji="üìã"
    )
    async def submit_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        try:
            from .modals import SafeDocumentsModal
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            modal = SafeDocumentsModal()
            
            # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
            await modal.autofill_from_cache(interaction.user.id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã: {str(e)}",
                ephemeral=True
            )


class SafeDocumentsApplicationView(discord.ui.View):
    """View –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    
    def __init__(self, application_data: dict = None, disabled: bool = False):
        super().__init__(timeout=None)
        # application_data –º–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è persistent views
        self.application_data = application_data or {}
        
        if disabled:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
            for item in self.children:
                item.disabled = True
    
    def _extract_application_data_from_embed(self, embed: discord.Embed) -> dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –∏–∑ embed —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è persistent views"""
        try:
            application_data = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π embed
            for field in embed.fields:
                if field.name == "üë§ –ò–º—è –§–∞–º–∏–ª–∏—è":
                    application_data['name'] = field.value if field.value != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else ''
                elif field.name == "üé≠ –°—Ç–∞—Ç–∏–∫":
                    application_data['static'] = field.value if field.value != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else ''
                elif field.name == "üìû –ò–≥—Ä–æ–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω":
                    application_data['phone'] = field.value if field.value != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else ''
                elif field.name == "üìß –ü–æ—á—Ç–∞":
                    application_data['email'] = field.value if field.value != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else ''
                elif field.name == "üìé –ö–æ–ø–∏—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
                    application_data['documents'] = field.value if field.value != '–ù–µ —É–∫–∞–∑–∞–Ω–æ' else ''
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ footer
            if embed.footer and embed.footer.text:
                footer_text = embed.footer.text
                if "ID: " in footer_text:
                    try:
                        user_id_str = footer_text.split("ID: ")[1].strip()
                        application_data['user_id'] = int(user_id_str)
                    except (IndexError, ValueError):
                        print(f"Warning: Could not extract user_id from footer: {footer_text}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if embed.title:
                if "–û–¥–æ–±—Ä–µ–Ω–∞" in embed.title:
                    application_data['status'] = 'approved'
                elif "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞" in embed.title:
                    application_data['status'] = 'rejected'
                else:
                    application_data['status'] = 'pending'
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            if embed.timestamp:
                application_data['timestamp'] = embed.timestamp.isoformat()
            
            return application_data
            
        except Exception as e:
            print(f"Error extracting application data from embed: {e}")
            return {}
    
    def _get_application_data(self, interaction: discord.Interaction) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ (–∏–∑ self.application_data –∏–ª–∏ –∏–∑ embed)"""
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ dummy), –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if self.application_data and self.application_data.get('user_id', 0) != 0:
            return self.application_data
        
        # –ò–Ω–∞—á–µ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ embed —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è persistent views)
        if interaction.message and interaction.message.embeds:
            return self._extract_application_data_from_embed(interaction.message.embeds[0])
        
        return {}
    
    @discord.ui.button(
        label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        style=discord.ButtonStyle.success,
        custom_id="safe_documents:approve",
        emoji="‚úÖ"
    )
    async def approve_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ö–Ω–æ–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            application_data = self._get_application_data(interaction)
            if not application_data:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            from .manager import SafeDocumentsManager
            manager = SafeDocumentsManager()
            await manager.handle_approval(interaction, application_data)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )
    
    @discord.ui.button(
        label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        style=discord.ButtonStyle.danger,
        custom_id="safe_documents:reject",
        emoji="‚ùå"
    )
    async def reject_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            application_data = self._get_application_data(interaction)
            if not application_data:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            from .modals import SafeDocumentsRejectionModal
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            modal = SafeDocumentsRejectionModal(application_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )
    
    @discord.ui.button(
        label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        style=discord.ButtonStyle.secondary,
        custom_id="safe_documents:edit",
        emoji="‚úèÔ∏è"
    )
    async def edit_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            application_data = self._get_application_data(interaction)
            if not application_data:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            from .modals import SafeDocumentsEditModal
            from .manager import SafeDocumentsManager
            
            manager = SafeDocumentsManager()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            can_edit = (
                interaction.user.id == application_data.get('user_id') or  # –ê–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
                await manager.check_moderator_permissions(interaction.user, application_data.get('department'))  # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
            )
            
            if not can_edit:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            modal = SafeDocumentsEditModal(application_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )


class SafeDocumentsApprovedView(discord.ui.View):
    """View –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self, application_data: dict = None):
        super().__init__(timeout=None)
        self.application_data = application_data or {}
    
    def _get_application_data(self, interaction: discord.Interaction) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É view)"""
        if self.application_data and self.application_data.get('user_id', 0) != 0:
            return self.application_data
        
        if interaction.message and interaction.message.embeds:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            return SafeDocumentsApplicationView()._extract_application_data_from_embed(interaction.message.embeds[0])
        
        return {}
    
    @discord.ui.button(
        label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        style=discord.ButtonStyle.success,
        custom_id="safe_documents:approved_status",
        emoji="‚úÖ",
        disabled=True
    )
    async def approved_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        pass
    
    @discord.ui.button(
        label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        style=discord.ButtonStyle.secondary,
        custom_id="safe_documents:edit_approved",
        emoji="‚úèÔ∏è"
    )
    async def edit_approved_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã)"""
        try:
            application_data = self._get_application_data(interaction)
            if not application_data:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            from .manager import SafeDocumentsManager
            manager = SafeDocumentsManager()
            
            # –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            if not await manager.check_moderator_permissions(interaction.user, application_data.get('department')):
                await interaction.response.send_message(
                    "‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
            
            from .modals import SafeDocumentsEditModal
            modal = SafeDocumentsEditModal(application_data)
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}",
                ephemeral=True
            )


class SafeDocumentsRejectedView(discord.ui.View):
    """View –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    
    def __init__(self, application_data: dict = None):
        super().__init__(timeout=None)
        self.application_data = application_data or {}
    
    @discord.ui.button(
        label="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        style=discord.ButtonStyle.danger,
        custom_id="safe_documents:rejected_status",
        emoji="‚ùå",
        disabled=True
    )
    async def rejected_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        pass
