"""
Channel configuration forms and views
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from forms.dismissal_form import send_dismissal_button_message
from .base import BaseSettingsView, BaseSettingsModal, ChannelParser, ConfigDisplayHelper


class ChannelsConfigView(BaseSettingsView):
    """View for channel configuration selection"""
    
    def __init__(self):
        super().__init__()
        self.add_item(ChannelConfigSelect())


class ChannelConfigSelect(ui.Select):
    """Select menu for choosing which channel to configure"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª —É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
                emoji="üìù",
                value="dismissal"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞",
                emoji="üîç",
                value="audit"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                emoji="üö´",
                value="blacklist"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–µ–Ω–Ω–æ–π/–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π —Ä–æ–ª–∏",
                emoji="üéñÔ∏è",
                value="role_assignment"
            ),            discord.SelectOption(
                label="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ",
                emoji="üîê",
                value="moderator_registration"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª—ã –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
                emoji="üìà",
                value="promotion_reports"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª –æ—Ç–≥—É–ª–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª—ã",
                emoji="üèñÔ∏è",
                value="leave_requests"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="channel_config_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        await self.show_channel_selection(interaction, selected_option)

    async def show_channel_selection(self, interaction: discord.Interaction, config_type: str):
        """Show channel selection interface"""
        if config_type == "role_assignment":
            await self.show_role_assignment_config(interaction)
        elif config_type == "dismissal":
            await self.show_dismissal_config(interaction)
        elif config_type == "blacklist":
            await self.show_blacklist_config(interaction)
        elif config_type == "moderator_registration":
            await self.show_moderator_registration_config(interaction)
        elif config_type == "promotion_reports":
            await self.show_promotion_reports_config(interaction)
        elif config_type == "leave_requests":
            await self.show_leave_requests_config(interaction)
        else:
            # Create channel selection modal for other channel types
            modal = ChannelSelectionModal(config_type)
            await interaction.response.send_modal(modal)
    
    async def show_role_assignment_config(self, interaction: discord.Interaction):
        """Show role assignment channel configuration with role management"""
        embed = discord.Embed(
            title="üéñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –∏ —Ä–æ–ª—è–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
          # Show current channel and message
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=helper.format_channel_info(config, 'role_assignment_channel', interaction.guild),
            inline=False
        )
        
        # Show role assignment message info
        message_id = config.get('role_assignment_message_id')
        channel_id = config.get('role_assignment_channel')
        if message_id and channel_id:
            message_link = f"https://discord.com/channels/{interaction.guild.id}/{channel_id}/{message_id}"
            embed.add_field(
                name="üìå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:",
                value=f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é]({message_link}) (ID: {message_id})",
                inline=False
            )
        else:
            embed.add_field(
                name="üìå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:",
                value="‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                inline=False
            )
          # Show current roles
        embed.add_field(
            name="ü™ñ –†–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö:",
            value=helper.format_roles_info(config, 'military_roles', interaction.guild),
            inline=True
        )
        embed.add_field(
            name="üì¶ –†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º:",
            value=helper.format_roles_info(config, 'supplier_roles', interaction.guild),
            inline=True
        )
        embed.add_field(
            name="üë§ –†–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö:",
            value=helper.format_roles_info(config, 'civilian_roles', interaction.guild),
            inline=True
        )
          # Show ping roles
        embed.add_field(
            name="üì¢ –ü–∏–Ω–≥ —Ä–æ–ª–∏:",
            value=(
                f"ü™ñ –í–æ–µ–Ω–Ω—ã–µ: {helper.format_roles_list(config, 'military_role_assignment_ping_roles', interaction.guild)}\n"
                f"üì¶ –î–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º: {helper.format_roles_list(config, 'supplier_role_assignment_ping_roles', interaction.guild)}\n"
                f"üë§ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ: {helper.format_roles_list(config, 'civilian_role_assignment_ping_roles', interaction.guild)}"
            ),
            inline=False
            )
        
        embed.add_field(
            name="‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π\n"
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö, –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º –∏ –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö\n"
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∏–Ω–≥–∏** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "‚Ä¢ **–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—ë —Å—Ä–∞–∑—É"
            ),
            inline=False
        )
        view = RoleAssignmentChannelView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_dismissal_config(self, interaction: discord.Interaction):
        """Show dismissal channel configuration"""
        embed = discord.Embed(
            title="üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º —É–≤–æ–ª—å–Ω–µ–Ω–∏–π –∏ —Ä–æ–ª—å—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–æ–ª—å–Ω–µ–Ω–∏–π.",
            color=discord.Color.red(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
        
        # Show current channel
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=helper.format_channel_info(config, 'dismissal_channel', interaction.guild),
            inline=False
        )
        
        # Show automatic dismissal role
        auto_role_name = config.get('military_role_name', '–í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§')
        auto_role = None
        for role in interaction.guild.roles:
            if role.name == auto_role_name:
                auto_role = role
                break
        
        auto_role_display = auto_role.mention if auto_role else f"‚ùå –†–æ–ª—å '{auto_role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        embed.add_field(
            name="ü§ñ –†–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–æ–ª—å–Ω–µ–Ω–∏–π:",
            value=f"{auto_role_display}\n*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç —Ä–∞–ø–æ—Ä—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å —Å–µ—Ä–≤–µ—Ä–∞*",
            inline=False
        )
        
        embed.add_field(
            name="üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤:",
            value="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è—Ö —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ:\n`/settings` ‚Üí **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤**",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ\n"
                "‚Ä¢ **–†–æ–ª—å –∞–≤—Ç–æ—É–≤–æ–ª—å–Ω–µ–Ω–∏–π** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–ø–æ—Ä—Ç–æ–≤"
            ),
            inline=False
        )
        
        view = DismissalChannelView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_blacklist_config(self, discord_interaction: discord.Interaction):
        """Show blacklist channel configuration with ping management"""
        embed = discord.Embed(
            title="üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø–∏–Ω–≥–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            color=discord.Color.dark_red(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
        
        # Show current channel
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=helper.format_channel_info(config, 'blacklist_channel', discord_interaction.guild),
            inline=False
        )
        
        # Show blacklist ping settings
        blacklist_role_mentions = config.get('blacklist_role_mentions', [])
        if blacklist_role_mentions:
            ping_roles = []
            for role_id in blacklist_role_mentions:
                role = discord_interaction.guild.get_role(role_id)
                if role:
                    ping_roles.append(role.mention)
                else:
                    ping_roles.append(f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {role_id})")
            ping_text = ", ".join(ping_roles)
        else:
            ping_text = "‚ùå –ü–∏–Ω–≥–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(
            name="üì¢ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            value=ping_text,
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
                "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å** - –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å** - —É–±—Ä–∞—Ç—å —Ä–æ–ª—å –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "‚Ä¢ **–û—á–∏—Å—Ç–∏—Ç—å –ø–∏–Ω–≥–∏** - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∏–Ω–≥-—Ä–æ–ª–∏"
            ),
            inline=False
        )
        
        view = BlacklistChannelView()
        await discord_interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_moderator_registration_config(self, discord_interaction: discord.Interaction):
        """Show moderator registration channel configuration"""
        config = load_config()
        
        embed = discord.Embed(
            title="üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current channel
        channel_id = config.get('moderator_registration_channel')
        if channel_id:
            channel = discord_interaction.guild.get_channel(channel_id)
            if channel:
                embed.add_field(
                    name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                    value=f"{channel.mention} (ID: {channel.id})",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                    value=f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {channel_id})",
                    inline=False
                )
        else:
            embed.add_field(
                name="‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                value="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                inline=False
            )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            value=(
                "–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "
                "–¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–¥—Ä–æ–≤–æ–≥–æ —É—á—ë—Ç–∞.\n\n"
                "**–†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.**"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            inline=False
        )
        
        view = ModeratorRegistrationChannelView()
        await discord_interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_promotion_reports_config(self, interaction: discord.Interaction):
        """Show promotion reports channels configuration"""
        embed = discord.Embed(
            title="üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º.",
            color=discord.Color.gold(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
          # Show current channels
        promotion_channels = config.get('promotion_report_channels', {})
        department_names = {
            'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
            'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
            'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
            'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü. –û–ø–µ—Ä–∞—Ü–∏–π)',
            'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
            'roio': '–†–û–∏–û (–†–æ—Ç—ã –û—Ö—Ä–∞–Ω—ã)'
        }
        
        channels_info = ""
        for dept_code, channel_id in promotion_channels.items():
            dept_name = department_names.get(dept_code, dept_code.upper())
            if channel_id:
                channel = interaction.guild.get_channel(channel_id)
                if channel:
                    channels_info += f"‚Ä¢ **{dept_name}**: {channel.mention}\n"
                else:
                    channels_info += f"‚Ä¢ **{dept_name}**: ‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {channel_id})\n"
            else:
                channels_info += f"‚Ä¢ **{dept_name}**: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ\n"
        
        embed.add_field(
            name="üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
            value=channels_info or "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:",
            value=(
                "–ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤ –∑–≤–∞–Ω–∏–∏ "
                "–¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è "
                "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞."
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            inline=False
        )
        
        view = PromotionReportsConfigView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_leave_requests_config(self, interaction: discord.Interaction):
        """Show leave requests channel configuration with role management"""
        try:
            embed = discord.Embed(
                title="üèñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç–≥—É–ª–æ–≤",
                description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –∏ —Ä–æ–ª—è–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª.",
                color=discord.Color.blue(),
                timestamp=discord.utils.utcnow()
            )
            
            config = load_config()
            helper = ConfigDisplayHelper()
            
            # Show current channel
            embed.add_field(
                name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                value=helper.format_channel_info(config, 'leave_requests_channel', interaction.guild),
                inline=False
            )
            
            # Show allowed roles
            allowed_roles = config.get('leave_requests_allowed_roles', [])
            if allowed_roles:
                role_mentions = []
                for role_id in allowed_roles:
                    role = interaction.guild.get_role(role_id)
                    if role:
                        role_mentions.append(role.mention)
                
                roles_text = "\n".join(role_mentions) if role_mentions else "‚ùå –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                roles_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ä–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)"
            
            embed.add_field(
                name="üë• –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:",
                value=roles_text,
                inline=False
            )
            
            embed.add_field(
                name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                value="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≥—É–ª–æ–≤:",
                inline=False            )
            
            view = LeaveRequestsConfigView()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except Exception as e:
            print(f"‚ùå ERROR in show_leave_requests_config: {e}")
            import traceback
            traceback.print_exc()
            # Try to send error message if interaction hasn't been responded to yet
            if not interaction.response.is_done():
                error_embed = discord.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=error_embed, ephemeral=True)
            raise


class RoleAssignmentChannelView(BaseSettingsView):
    """View for role assignment channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("role_assignment")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="ü™ñ –†–æ–ª–∏ –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö", style=discord.ButtonStyle.primary)
    async def set_military_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("military_roles", "ü™ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üì¶ –†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", style=discord.ButtonStyle.secondary)
    async def set_supplier_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("supplier_roles", "üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üë§ –†–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö", style=discord.ButtonStyle.secondary)
    async def set_civilian_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("civilian_roles", "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üì¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ping-—Ä–æ–ª–∏", style=discord.ButtonStyle.green)
    async def set_ping_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        view = RolePingConfigView()
        await view.show_ping_config(interaction)


class ChannelSelectionModal(BaseSettingsModal):
    """Modal for selecting and configuring channels"""
    
    def __init__(self, config_type: str):
        self.config_type = config_type
        
        type_names = {
            "dismissal": "—É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
            "audit": "–∞—É–¥–∏—Ç–∞", 
            "blacklist": "—á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
            "role_assignment": "–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
            "moderator_registration": "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
            "leave_requests": "–æ—Ç–≥—É–ª–æ–≤"
        }
        
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ {type_names.get(config_type, config_type)}")
        
        self.channel_input = ui.TextInput(
            label="ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: #–∫–∞–Ω–∞–ª-—É–≤–æ–ª—å–Ω–µ–Ω–∏–π –∏–ª–∏ 1234567890123456789",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.channel_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            channel_text = self.channel_input.value.strip()
            
            # Parse channel input
            channel = ChannelParser.parse_channel_input(channel_text, interaction.guild)
            
            if not channel:
                await self.send_error_message(
                    interaction,
                    "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É: `{channel_text}`\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ ID, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞."
                )
                return
            
            if not isinstance(channel, discord.TextChannel):
                await self.send_error_message(
                    interaction,
                    "–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞",
                    "–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º."
                )
                return
            
            # Save configuration
            config = load_config()
            config[f'{self.config_type}_channel'] = channel.id
            save_config(config)            # Define type names and handle button messages
            type_names = {
                "dismissal": "—Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
                "audit": "–∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞",
                "blacklist": "—á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                "role_assignment": "–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π",
                "moderator_registration": "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                "leave_requests": "–æ—Ç–≥—É–ª–æ–≤"
            }
            type_name = type_names.get(self.config_type, self.config_type)
              # Send appropriate button message to the channel
            button_message_added = False
            if self.config_type == "dismissal":
                await send_dismissal_button_message(channel)
                button_message_added = True
            elif self.config_type == "role_assignment":
                # Import and send role assignment button message
                from forms.role_assignment_form import send_role_assignment_message
                await send_role_assignment_message(channel)
                button_message_added = True
            elif self.config_type == "moderator_registration":
                # Import and send moderator registration message
                from forms.moderator_registration import ensure_moderator_registration_message
                await ensure_moderator_registration_message(interaction.guild, channel.id)
                button_message_added = True
            elif self.config_type == "leave_requests":
                # Import and send leave request button message
                from forms.leave_request_form import send_leave_request_button_message
                await send_leave_request_button_message(channel)
                button_message_added = True
            
            success_message = f"–ö–∞–Ω–∞–ª {type_name} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {channel.mention}!"
            if button_message_added:
                success_message += "\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª."
            
            await self.send_success_message(
                interaction,
                "–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                success_message
            )
            
        except ValueError as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {str(e)}"
            )
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}"
            )


class RolePingConfigView(BaseSettingsView):
    """View for configuring role assignment ping settings"""
    
    def __init__(self):
        super().__init__()
    
    async def show_ping_config(self, interaction: discord.Interaction):
        """Show ping role configuration interface"""
        embed = discord.Embed(
            title="üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–≥-—Ä–æ–ª–µ–π",
            description="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö.",
            color=discord.Color.orange(),
            timestamp=discord.utils.utcnow()
        )
        config = load_config()
        helper = ConfigDisplayHelper()
        
        embed.add_field(
            name="ü™ñ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:",
            value=helper.format_roles_list(config, 'military_role_assignment_ping_roles', interaction.guild),
            inline=False
        )
        
        embed.add_field(
            name="üì¶ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º:",
            value=helper.format_roles_list(config, 'supplier_role_assignment_ping_roles', interaction.guild),
            inline=False
        )
        
        embed.add_field(
            name="üë§ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –∑–∞—è–≤–æ–∫:",
            value=helper.format_roles_list(config, 'civilian_role_assignment_ping_roles', interaction.guild),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            value="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∞—á–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –§–æ—Ä–º–∞—Ç –ø–∏–Ω–≥–∞: `-# @—Ä–æ–ª—å1 @—Ä–æ–ª—å2`",
            inline=False
        )
        
        view = RolePingButtonsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class RolePingButtonsView(BaseSettingsView):
    """Buttons for ping role configuration"""
    
    @discord.ui.button(label="üìú –ü–∏–Ω–≥ –≤–æ–µ–Ω–Ω—ã—Ö", style=discord.ButtonStyle.green)
    async def set_military_ping(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("military_role_assignment_ping_roles", "ü™ñ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –≤–æ–µ–Ω–Ω—ã—Ö", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–æ–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üì¶ –ü–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", style=discord.ButtonStyle.secondary)
    async def set_supplier_ping(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("supplier_role_assignment_ping_roles", "üì¶ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç–∞–≤–∫–∞–º")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üë®‚Äç‚öïÔ∏è –ü–∏–Ω–≥ –≥–æ—Å—Å–ª—É–∂–∞—â–∏—Ö", style=discord.ButtonStyle.secondary)
    async def set_civilian_ping(self, interaction: discord.Interaction, button: discord.ui.Button):
        from .role_config import SetMultipleRolesModal
        modal = SetMultipleRolesModal("civilian_role_assignment_ping_roles", "üë§ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö", "–£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –∑–∞—è–≤–∫–∞—Ö")
        await interaction.response.send_modal(modal)


class DismissalChannelView(BaseSettingsView):
    """View for dismissal channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("dismissal")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚öôÔ∏è –†–æ–ª—å –∞–≤—Ç–æ—É–≤–æ–ª—å–Ω–µ–Ω–∏–π", style=discord.ButtonStyle.secondary)
    async def set_auto_dismissal_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AutoDismissalRoleModal()
        await interaction.response.send_modal(modal)


class BlacklistChannelView(BaseSettingsView):
    """View for blacklist channel and ping configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("blacklist")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å", style=discord.ButtonStyle.secondary)
    async def add_ping_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = BlacklistPingRoleModal("add")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å", style=discord.ButtonStyle.red)
    async def remove_ping_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        blacklist_role_mentions = config.get('blacklist_role_mentions', [])
        
        if not blacklist_role_mentions:
            await self.send_error_message(
                interaction,
                "–ù–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∏–Ω–≥-—Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            )
            return
        
        modal = BlacklistPingRoleModal("remove")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∏–Ω–≥–∏", style=discord.ButtonStyle.danger)
    async def clear_ping_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        config['blacklist_role_mentions'] = []
        save_config(config)
        
        await self.send_success_message(
            interaction,
            "–ü–∏–Ω–≥-—Ä–æ–ª–∏ –æ—á–∏—â–µ–Ω—ã",
            "–í—Å–µ –ø–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç."
        )


class BlacklistPingRoleModal(BaseSettingsModal):
    """Modal for managing blacklist ping roles"""
    
    def __init__(self, action: str):
        self.action = action
        
        if action == "add":
            title = "–î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: @–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ 1234567890123456789"
            label = "–†–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        else:  # remove
            title = "–£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: @–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ 1234567890123456789"
            label = "–†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        
        super().__init__(title=title)
        
        self.role_input = ui.TextInput(
            label=label,
            placeholder=placeholder,
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            from .base import RoleParser
            
            # Parse role input
            role = RoleParser.parse_role_input(
                self.role_input.value.strip(), 
                interaction.guild
            )
            
            if not role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª—å: `{self.role_input.value}`"
                )
                return
            
            # Load config
            config = load_config()
            blacklist_role_mentions = config.get('blacklist_role_mentions', [])
            
            if self.action == "add":
                if role.id in blacklist_role_mentions:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                        f"–†–æ–ª—å {role.mention} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                    )
                    return
                
                blacklist_role_mentions.append(role.id)
                config['blacklist_role_mentions'] = blacklist_role_mentions
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–ü–∏–Ω–≥-—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                    f"–†–æ–ª—å {role.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                )
            
            else:  # remove
                if role.id not in blacklist_role_mentions:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                        f"–†–æ–ª—å {role.mention} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                    )
                    return
                
                blacklist_role_mentions.remove(role.id)
                config['blacklist_role_mentions'] = blacklist_role_mentions
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–ü–∏–Ω–≥-—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞",
                    f"–†–æ–ª—å {role.mention} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                )
                
        except Exception as e:            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏: {str(e)}"
            )


class AutoDismissalRoleModal(BaseSettingsModal):
    """Modal for configuring automatic dismissal role"""
    
    def __init__(self):
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–æ–ª—å–Ω–µ–Ω–∏–π")
        
        # Load current setting
        config = load_config()
        current_role = config.get('military_role_name', '–í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§')
        
        self.role_name = ui.TextInput(
            label="–ò–º—è —Ä–æ–ª–∏ –¥–ª—è –∞–≤—Ç–æ—É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§",
            default=current_role,
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.role_name)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            role_name = self.role_name.value.strip()
            
            # Validate that the role exists in the guild
            guild = interaction.guild
            target_role = None
            
            for role in guild.roles:
                if role.name == role_name:
                    target_role = role
                    break
            
            if not target_role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–†–æ–ª—å —Å –∏–º–µ–Ω–µ–º '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ä–æ–ª–∏ —É–∫–∞–∑–∞–Ω–æ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞."
                )
                return
            
            # Save configuration
            config = load_config()
            config['military_role_name'] = role_name
            save_config(config)
            
            await self.send_success_message(
                interaction,
                "–†–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                f"–†–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–æ–ª—å–Ω–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{role_name}**\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é, –ø–æ–∫–∏–Ω—É–≤—à–∏–µ —Å–µ—Ä–≤–µ—Ä, –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–ø–æ—Ä—Ç –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π '–ü–æ—Ç–µ—Ä—è —Å–ø–µ—Ü. —Å–≤—è–∑–∏'.\n"
                f"–ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ç–∞–∫–æ–≥–æ —Ä–∞–ø–æ—Ä—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏–∫."
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–∏: {str(e)}"
            )


class ModeratorRegistrationChannelView(BaseSettingsView):
    """View for moderator registration channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("moderator_registration")
        await interaction.response.send_modal(modal)


class PromotionReportsConfigView(BaseSettingsView):
    """View for promotion reports configuration with dropdown selection"""
    
    def __init__(self):
        super().__init__()
        self.add_item(PromotionDepartmentSelect())


class PromotionDepartmentSelect(ui.Select):
    """Select menu for choosing department to configure promotion reports"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –í–ê",
                description="–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è",
                emoji="‚úàÔ∏è",
                value="va"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –í–ö",
                description="–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç",
                emoji="üöÄ",
                value="vk"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –£–í–ü",
                description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏",
                emoji="üëÆ",
                value="uvp"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –°–°–û",
                description="–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π",
                emoji="üî´",
                value="sso"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –ú–†",
                description="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞",
                emoji="‚öì",
                value="mr"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –†–û–∏–û",
                description="–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
                emoji="üõ°Ô∏è",
                value="roio"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="promotion_department_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_department = self.values[0]
        # Show department configuration with buttons
        department_names = {
            'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
            'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
            'uvp': '–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)',
            'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)',
            'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
            'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
        }
        
        department_emojis = {
            'va': '‚úàÔ∏è',
            'vk': 'üöÄ',
            'uvp': 'üëÆ',
            'sso': 'üî´',
            'mr': '‚öì',
            'roio': 'üõ°Ô∏è'
        }
        
        config = load_config()
        promotion_channels = config.get('promotion_report_channels', {})
        current_channel_id = promotion_channels.get(selected_department)
        
        embed = discord.Embed(
            title=f"{department_emojis.get(selected_department, 'üìà')} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ {department_names.get(selected_department, selected_department.upper())}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {department_names.get(selected_department, selected_department.upper())}",
            color=discord.Color.gold(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current channel
        if current_channel_id:
            channel = interaction.guild.get_channel(current_channel_id)
            if channel:
                embed.add_field(
                    name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                    value=f"{channel.mention} (ID: {channel.id})",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                    value=f"–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {current_channel_id})",
                    inline=False
                )
        else:
            embed.add_field(
                name="‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                value="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ",
                inline=False
            )
        
        # Show notification settings
        notification_settings = config.get('promotion_notifications', {}).get(selected_department, {})
        if notification_settings:
            notification_text = notification_settings.get('text')
            notification_image = notification_settings.get('image')
            notification_enabled = notification_settings.get('enabled', False)
            
            status = "üü¢ –í–∫–ª—é—á–µ–Ω—ã" if notification_enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
            content_parts = []
            if notification_text:
                content_parts.append("üìù –¢–µ–∫—Å—Ç")
            if notification_image:
                content_parts.append(f"üñºÔ∏è {notification_image}")
            content_info = f" ({', '.join(content_parts)})" if content_parts else ""
            
            # Get configured notification time
            schedule_config = config.get('notification_schedule', {'hour': 21, 'minute': 0})
            hour = schedule_config.get('hour', 21)
            minute = schedule_config.get('minute', 0)
            time_str = f"{hour:02d}:{minute:02d}"
            
            embed.add_field(
                name="üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                value=f"{status}{content_info}\n{'*–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ' + time_str + ' –ú–°–ö*' if notification_enabled else ''}",
                inline=False
            )
        else:
            embed.add_field(
                name="üïê –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                value="‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                inline=False
            )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤\n"
                "‚Ä¢ **–ó–∞–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `/set_notification_time`*"
            ),
            inline=False
        )
        
        view = PromotionDepartmentConfigView(selected_department)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        


class PromotionDepartmentConfigView(BaseSettingsView):
    """View for configuring specific department promotion reports"""
    
    def __init__(self, department_code: str):
        super().__init__()
        self.department_code = department_code
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = PromotionChannelModal(self.department_code)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üîî –ó–∞–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.secondary)
    async def set_notification(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = PromotionNotificationModal(self.department_code)
        await interaction.response.send_modal(modal)


class PromotionChannelModal(BaseSettingsModal):
    """Modal for configuring promotion report channel for specific department"""
    def __init__(self, department_code: str):
        self.department_code = department_code
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ modal (–ª–∏–º–∏—Ç 45 —Å–∏–º–≤–æ–ª–æ–≤)
        department_names = {
            'va': '–í–ê',
            'vk': '–í–ö', 
            'uvp': '–£–í–ü',
            'sso': '–°–°–û',
            'mr': '–ú–†',
            'roio': '–†–û–∏–û'
        }
        
        dept_name = department_names.get(department_code, department_code.upper())
        super().__init__(title=f"üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ {dept_name}")
        
        # –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        full_department_names = {
            'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
            'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
            'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
            'sso': '–°–°–û (–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏)',
            'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
            'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
        }
        
        full_dept_name = full_department_names.get(department_code, department_code.upper())
        
        self.channel_input = ui.TextInput(
            label=f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {dept_name}",
            placeholder=f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {full_dept_name}",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.channel_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Parse channel input
            channel = ChannelParser.parse_channel_input(self.channel_input.value.strip(), interaction.guild)
            
            if not channel:
                await self.send_error_message(
                    interaction,
                    "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞."
                )
                return
            
            # Save configuration
            config = load_config()
            if 'promotion_report_channels' not in config:
                config['promotion_report_channels'] = {}
            
            config['promotion_report_channels'][self.department_code] = channel.id
            save_config(config)
            
            department_names = {
                'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
                'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
                'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
                'sso': '–°–°–û (–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏)',
                'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
                'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
            }
            
            dept_name = department_names.get(self.department_code, self.department_code.upper())
            
            await self.send_success_message(
                interaction,
                "–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {dept_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}"
            )


class PromotionNotificationModal(BaseSettingsModal):
    """Modal for configuring promotion report daily notifications"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ modal
        department_names = {
            'va': '–í–ê',
            'vk': '–í–ö',
            'uvp': '–£–í–ü', 
            'sso': '–°–°–û',
            'mr': '–ú–†',
            'roio': '–†–û–∏–û'
        }
        
        dept_name = department_names.get(department_code, department_code.upper())
        super().__init__(title=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {dept_name}")
        
        # Load current settings
        config = load_config()
        current_notification = config.get('promotion_notifications', {}).get(department_code, {})
        current_text = current_notification.get('text', '')
        current_image = current_notification.get('image', '')
        current_enabled = current_notification.get('enabled', False)
        
        self.text_input = ui.TextInput(
            label="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...",
            style=discord.TextStyle.paragraph,
            min_length=0,
            max_length=1000,
            required=False,
            default=current_text
        )
        self.add_item(self.text_input)
        
        self.image_input = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: report_va.png (—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files/reports/)",
            min_length=0,
            max_length=100,
            required=False,
            default=current_image
        )
        self.add_item(self.image_input)
        
        self.enabled_input = ui.TextInput(
            label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (–¥–∞/–Ω–µ—Ç)",
            placeholder="–¥–∞ - –≤–∫–ª—é—á–∏—Ç—å, –Ω–µ—Ç - –æ—Ç–∫–ª—é—á–∏—Ç—å",
            min_length=2,
            max_length=3,
            required=True,
            default="–¥–∞" if current_enabled else "–Ω–µ—Ç"
        )
        self.add_item(self.enabled_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            import os
            
            text = self.text_input.value.strip()
            image_filename = self.image_input.value.strip()
            enabled_str = self.enabled_input.value.strip().lower()
            
            # Validate enabled input
            if enabled_str not in ['–¥–∞', '–Ω–µ—Ç', 'yes', 'no']:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                    "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
                )
                return
            
            enabled = enabled_str in ['–¥–∞', 'yes']
            
            # Validate that at least text or image is provided if enabled
            if enabled and not text and not image_filename:
                await self.send_error_message(
                    interaction,
                    "–ü—É—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
                )
                return
            
            # Validate image file if provided
            image_path = None
            if image_filename:
                image_path = os.path.join('files', 'reports', image_filename)
                if not os.path.exists(image_path):
                    await self.send_error_message(
                        interaction,
                        "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{image_filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ files/reports/.\n"
                        f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
                    )
                    return
            
            # Save configuration
            config = load_config()
            if 'promotion_notifications' not in config:
                config['promotion_notifications'] = {}
            
            if self.department_code not in config['promotion_notifications']:
                config['promotion_notifications'][self.department_code] = {}
            
            config['promotion_notifications'][self.department_code] = {
                'text': text if text else None,
                'image': image_filename if image_filename else None,
                'enabled': enabled
            }
            
            save_config(config)
            
            # Initialize scheduler if not exists
            await self._ensure_scheduler_running()
            department_names = {
                'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
                'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
                'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
                'sso': '–°–°–û (–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏)',
                'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
                'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
            }
            
            dept_name = department_names.get(self.department_code, self.department_code.upper())
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            content_info = []
            if enabled:
                if text:
                    content_info.append("—Ç–µ–∫—Å—Ç")
                if image_filename:
                    content_info.append("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                content_desc = f" ({', '.join(content_info)})" if content_info else ""
            else:
                content_desc = ""
              # Get configured notification time for success message
            schedule_config = config.get('notification_schedule', {'hour': 21, 'minute': 0})
            hour = schedule_config.get('hour', 21)
            minute = schedule_config.get('minute', 0)
            time_str = f"{hour:02d}:{minute:02d}"
            
            await self.send_success_message(
                interaction,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {dept_name} {status}{content_desc}.\n"
                f"{'–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ' + time_str + ' –ú–°–ö.' if enabled else ''}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
            )
    async def _ensure_scheduler_running(self):
        """Ensure the notification scheduler is running"""
        # This will be implemented when we add the scheduler to the main bot
        pass


class LeaveRequestsConfigView(BaseSettingsView):
    """View for leave requests channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("leave_requests")
        await interaction.response.send_modal(modal)    
    @discord.ui.button(label="üë• –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å", style=discord.ButtonStyle.primary)
    async def set_allowed_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = LeaveRequestAllowedRolesModal()
        await interaction.response.send_modal(modal)


class LeaveRequestAllowedRolesModal(BaseSettingsModal):
    """Modal for setting allowed roles for leave requests"""
    
    def __init__(self):
        super().__init__(title="üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–≥—É–ª–æ–≤")
        
        # Load current roles
        config = load_config()
        current_roles = config.get('leave_requests_allowed_roles', [])
        current_value = ", ".join([str(role_id) for role_id in current_roles]) if current_roles else ""
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, 123456789012345678, @–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            style=discord.TextStyle.paragraph,
            default=current_value,
            max_length=1000,
            required=False
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            
            if not roles_text:
                # Clear roles - everyone can submit
                config = load_config()
                config['leave_requests_allowed_roles'] = []
                save_config(config)
                
                embed = discord.Embed(
                    title="‚úÖ –†–æ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã",
                    description="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–≥—É–ª.",
                    color=discord.Color.green()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            # Parse roles
            parser = ChannelParser()
            role_ids = []
            
            for role_text in roles_text.split(','):
                role_text = role_text.strip()
                if not role_text:
                    continue
                
                # Try to find role by name or ID
                role = None
                
                # Try by ID first
                if role_text.isdigit():
                    role = interaction.guild.get_role(int(role_text))
                
                # Try by mention
                if not role and role_text.startswith('<@&') and role_text.endswith('>'):
                    try:
                        role_id = int(role_text[3:-1])
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        pass
                
                # Try by name
                if not role:
                    for guild_role in interaction.guild.roles:
                        if guild_role.name.lower() == role_text.lower():
                            role = guild_role
                            break
                
                if role:
                    role_ids.append(role.id)
                else:
                    embed = discord.Embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description=f"–†–æ–ª—å '{role_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        color=discord.Color.red()
                    )
                    await interaction.response.send_message(embed=embed, ephemeral=True)
                    return
            
            # Save configuration
            config = load_config()
            config['leave_requests_allowed_roles'] = role_ids
            save_config(config)
            
            # Show success message
            if role_ids:
                role_mentions = []
                for role_id in role_ids:
                    role = interaction.guild.get_role(role_id)
                    if role:
                        role_mentions.append(role.mention)
                
                embed = discord.Embed(
                    title="‚úÖ –†–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    description=f"–ü–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–≥—É–ª –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏:\n{chr(10).join(role_mentions)}",
                    color=discord.Color.green()
                )
            else:
                embed = discord.Embed(
                    title="‚úÖ –†–æ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã",
                    description="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–≥—É–ª.",
                    color=discord.Color.green()
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
