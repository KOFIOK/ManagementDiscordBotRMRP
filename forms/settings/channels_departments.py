"""
Department application channel configura            emoji = dept_data.get('emoji', 'üìÅ')ion
"""
import discord
from discord import ui
from typing import Dict, List
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView, BaseSettingsModal


async def show_department_channels_config(interaction: discord.Interaction):
    """Show department channels configuration main menu"""
    embed = discord.Embed(
        title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–ª–µ–Ω–∏–π:",
        color=discord.Color.blue()
    )
    
    view = DepartmentChannelsConfigView()
    await interaction.response.edit_message(embed=embed, view=view)


class DepartmentChannelsConfigView(BaseSettingsView):
    """View for department application channel configuration"""
    
    def __init__(self):
        super().__init__()
        self.add_item(DepartmentChannelSelect())
        self.add_item(SetupAllChannelsButton())


class SetupAllChannelsButton(ui.Button):
    """Button to setup all department channels automatically"""
    
    def __init__(self):
        super().__init__(
            label="üõÇ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã",
            style=discord.ButtonStyle.green,
            row=1
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Check and setup all department channels"""
        try:
            # Check admin permissions
            config = load_config()
            administrators = config.get('administrators', {})
            
            user_role_ids = [role.id for role in interaction.user.roles]
            is_admin = (
                interaction.user.id in administrators.get('users', []) or
                any(role_id in user_role_ids for role_id in administrators.get('roles', []))
            )
            
            if not is_admin:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
                    ephemeral=True
                )
                return
            
            await interaction.response.defer()
            
            # Import and use DepartmentApplicationManager
            from forms.department_applications.manager import DepartmentApplicationManager
            from discord.ext import commands
            
            # Create mock bot for manager
            class MockBot:
                def __init__(self):
                    self.user = interaction.client.user
            
            app_manager = DepartmentApplicationManager(MockBot())
            results = await app_manager.setup_all_department_channels(interaction.guild)
            
            # Create result embed
            embed = discord.Embed(
                title="ÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞—è–≤–ª–µ–Ω–∏–π",
                description="–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π:",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                value="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π. "
                      "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –µ–≥–æ.",
                inline=False
            )
            
            for dept_code, result in results.items():
                embed.add_field(
                    name=f"{dept_code}",
                    value=result,
                    inline=True
                )
            
            if not results:
                embed.description = "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π."
                embed.color = discord.Color.red()
                embed.add_field(
                    name="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
                    value="–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã—à–µ.",
                    inline=False
                )
            else:
                embed.add_field(
                    name="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º",
                    value="–ü—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã "
                          "–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    inline=False
                )
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
                ephemeral=True
            )


class DepartmentChannelSelect(ui.Select):
    """Select menu for choosing which department to configure"""
    
    def __init__(self):
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from utils.department_manager import DepartmentManager
        dept_manager = DepartmentManager()
        departments = dept_manager.get_all_departments()
        
        options = []
        for dept_code, dept_data in departments.items():
            name = dept_data.get('name', dept_code)
            description = f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ {dept_code}"
            if dept_data.get('description'):
                description = f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è {dept_data['description'][:50]}..."
            emoji = dept_data.get('emoji', 'ÔøΩ')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Discord
            if len(description) > 100:
                description = description[:97] + "..."
            
            options.append(discord.SelectOption(
                label=f"{dept_code} - {name}",
                description=description,
                emoji=emoji,
                value=dept_code
            ))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        options.sort(key=lambda x: x.value)
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            options=options[:25]  # Discord –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 25 –æ–ø—Ü–∏–π
        )
    
    async def callback(self, interaction: discord.Interaction):
        """Handle department selection"""
        try:
            department_code = self.values[0]
            await show_department_config(interaction, department_code)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {e}",
                ephemeral=True
            )


async def show_department_config(interaction: discord.Interaction, department_code: str):
    """Show configuration for a specific department"""
    config = load_config()
    departments = config.get('departments', {})
    dept_config = departments.get(department_code, {})
    
    # Get current settings
    channel_id = dept_config.get('application_channel_id')
    role_id = dept_config.get('role_id')
    
    # Create embed with current configuration
    embed = discord.Embed(
        title=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {department_code}",
        color=discord.Color.blue()
    )
    
    # Channel info
    if channel_id:
        channel = interaction.guild.get_channel(channel_id)
        channel_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {channel_id})"
    else:
        channel_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    embed.add_field(
        name="üìã –ö–∞–Ω–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–π",
        value=channel_text,
        inline=False
    )
    
    # Role info
    if role_id:
        role = interaction.guild.get_role(role_id)
        role_text = role.mention if role else f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {role_id})"
    else:
        role_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
    
    embed.add_field(
        name="üë§ –†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
        value=role_text,
        inline=False
    )
    
    # Add note about ping settings
    embed.add_field(
        name="üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤",
        value="–ü–∏–Ω–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ `/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤`",
        inline=False
    )
    
    # Create view with configuration options
    view = DepartmentConfigActionsView(department_code)
    
    await interaction.response.edit_message(embed=embed, view=view)


class DepartmentConfigActionsView(BaseSettingsView):
    """View with actions for department configuration"""
    
    def __init__(self, department_code: str):
        super().__init__()
        self.department_code = department_code
        
        # Add configuration buttons
        self.add_item(DepartmentConfigButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", "channel", department_code))
        self.add_item(DepartmentConfigButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª—å", "role", department_code))
        self.add_item(DepartmentConfigButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "back", department_code))


class DepartmentConfigButton(ui.Button):
    """Button for department configuration actions"""
    
    def __init__(self, label: str, action: str, department_code: str):
        self.action = action
        self.department_code = department_code
        
        style = discord.ButtonStyle.primary
        if action == "back":
            style = discord.ButtonStyle.secondary
        
        super().__init__(label=label, style=style)
    
    async def callback(self, interaction: discord.Interaction):
        """Handle button press"""
        try:
            if self.action == "back":
                view = DepartmentChannelsConfigView()
                embed = discord.Embed(
                    title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
                    description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    color=discord.Color.blue()
                )
                await interaction.response.edit_message(embed=embed, view=view)
                
            elif self.action == "channel":
                modal = DepartmentChannelModal(self.department_code)
                await interaction.response.send_modal(modal)
                
            elif self.action == "role":
                modal = DepartmentRoleModal(self.department_code)
                await interaction.response.send_modal(modal)
                
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {e}",
                ephemeral=True
            )


class DepartmentChannelModal(BaseSettingsModal):
    """Modal for setting department application channel"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ {department_code}")
        
        # Get current channel
        config = load_config()
        current_channel_id = config.get('departments', {}).get(department_code, {}).get('application_channel_id')
        current_text = f"#{current_channel_id}" if current_channel_id else ""
        
        self.channel_input = ui.TextInput(
            label="–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–ª–µ–Ω–∏–π",
            placeholder="#–∫–∞–Ω–∞–ª-–∑–∞—è–≤–ª–µ–Ω–∏–π –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞",
            default=current_text,
            required=True
        )
        self.add_item(self.channel_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle modal submission"""
        try:
            channel_text = self.channel_input.value.strip()
            
            # Parse channel
            channel = await self.parse_channel(interaction.guild, channel_text)
            if not channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.",
                    ephemeral=True
                )
                return
            
            # Validate permissions
            bot_member = interaction.guild.get_member(interaction.client.user.id)
            permissions = channel.permissions_for(bot_member)
            
            missing_perms = []
            if not permissions.send_messages:
                missing_perms.append("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
            if not permissions.embed_links:
                missing_perms.append("–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫")
            if not permissions.manage_messages:
                missing_perms.append("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            if missing_perms:
                await interaction.response.send_message(
                    f"‚ùå –ë–æ—Ç—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}:\n" +
                    "\n".join(f"‚Ä¢ {perm}" for perm in missing_perms),
                    ephemeral=True
                )
                return
            
            # Save to config
            config = load_config()
            if 'departments' not in config:
                config['departments'] = {}
            if self.department_code not in config['departments']:
                config['departments'][self.department_code] = {}
            
            config['departments'][self.department_code]['application_channel_id'] = channel.id
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –ö–∞–Ω–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è **{self.department_code}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}",
                ephemeral=True
            )
            
            # Refresh the configuration view
            await show_department_config(interaction, self.department_code)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}",
                ephemeral=True
            )
    
    async def parse_channel(self, guild: discord.Guild, channel_text: str) -> discord.TextChannel:
        """Parse channel from text input"""
        # Remove # if present
        if channel_text.startswith('#'):
            channel_text = channel_text[1:]
        
        # Try to parse as ID
        try:
            channel_id = int(channel_text)
            return guild.get_channel(channel_id)
        except ValueError:
            pass
        
        # Try to find by name
        for channel in guild.text_channels:
            if channel.name == channel_text:
                return channel
        
        return None


class DepartmentRoleModal(BaseSettingsModal):
    """Modal for setting department role"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ {department_code}")
        
        # Get current role
        config = load_config()
        current_role_id = config.get('departments', {}).get(department_code, {}).get('role_id')
        current_text = f"@{current_role_id}" if current_role_id else ""
        
        self.role_input = ui.TextInput(
            label="–†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            placeholder="@—Ä–æ–ª—å –∏–ª–∏ ID —Ä–æ–ª–∏",
            default=current_text,
            required=True
        )
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle modal submission"""
        try:
            role_text = self.role_input.value.strip()
            
            # Parse role
            role = await self.parse_role(interaction.guild, role_text)
            if not role:
                await interaction.response.send_message(
                    "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID —Ä–æ–ª–∏.",
                    ephemeral=True
                )
                return
            
            # Validate role hierarchy
            bot_member = interaction.guild.get_member(interaction.client.user.id)
            if role.position >= bot_member.top_role.position:
                await interaction.response.send_message(
                    f"‚ùå –†–æ–ª—å {role.mention} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ —Ä–æ–ª–∏ –±–æ—Ç–∞ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.\n"
                    f"–ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π —Ä–æ–ª—å—é.",
                    ephemeral=True
                )
                return
            
            if role.managed:
                await interaction.response.send_message(
                    f"‚ùå –†–æ–ª—å {role.mention} —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –±–æ—Ç–æ–º.",
                    ephemeral=True
                )
                return
            
            # Save to config
            config = load_config()
            if 'departments' not in config:
                config['departments'] = {}
            if self.department_code not in config['departments']:
                config['departments'][self.department_code] = {}
            
            config['departments'][self.department_code]['role_id'] = role.id
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è **{self.department_code}** —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role.mention}",
                ephemeral=True
            )
            
            # Refresh the configuration view
            await show_department_config(interaction, self.department_code)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}",
                ephemeral=True
            )
    
    async def parse_role(self, guild: discord.Guild, role_text: str) -> discord.Role:
        """Parse role from text input"""
        # Remove @ if present
        if role_text.startswith('@'):
            role_text = role_text[1:]
        
        # Try to parse as ID
        try:
            role_id = int(role_text)
            return guild.get_role(role_id)
        except ValueError:
            pass
        
        # Try to find by name
        for role in guild.roles:
            if role.name == role_text:
                return role
        
        return None
