"""
Other channels configuration (audit, blacklist, medical, leave requests)
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView, BaseSettingsModal, ConfigDisplayHelper, RoleParser
from .channels_base import ChannelSelectionModal


# Blacklist Channel Configuration
class BlacklistChannelView(BaseSettingsView):
    """View for blacklist channel and ping configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("blacklist")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å", style=discord.ButtonStyle.secondary)
    async def add_ping_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = BlacklistPingRoleModal("add")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å", style=discord.ButtonStyle.red)
    async def remove_ping_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        blacklist_role_mentions = config.get('blacklist_role_mentions', [])
        
        if not blacklist_role_mentions:
            await self.send_error_message(
                interaction,
                "–ù–µ—Ç –ø–∏–Ω–≥-—Ä–æ–ª–µ–π",
                "–ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã."
            )
            return
        
        modal = BlacklistPingRoleModal("remove")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–∏–Ω–≥–∏", style=discord.ButtonStyle.danger)
    async def clear_ping_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        config['blacklist_role_mentions'] = []
        save_config(config)
        
        await self.send_success_message(
            interaction,
            "–ü–∏–Ω–≥-—Ä–æ–ª–∏ –æ—á–∏—â–µ–Ω—ã",
            "–í—Å–µ –ø–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç."
        )


class BlacklistPingRoleModal(BaseSettingsModal):
    """Modal for managing blacklist ping roles"""
    
    def __init__(self, action: str):
        self.action = action
        
        if action == "add":
            title = "–î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: @–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ 1234567890123456789"
            label = "–†–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
        else:  # remove
            title = "–£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: @–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ 1234567890123456789"
            label = "–†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        
        super().__init__(title=title)
        
        self.role_input = ui.TextInput(
            label=label,
            placeholder=placeholder,
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Parse role input
            role = RoleParser.parse_role_input(
                self.role_input.value.strip(), 
                interaction.guild
            )
            
            if not role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–†–æ–ª—å '{self.role_input.value.strip()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
                return
            
            # Load config
            config = load_config()
            blacklist_role_mentions = config.get('blacklist_role_mentions', [])
            
            if self.action == "add":
                if role.id not in blacklist_role_mentions:
                    blacklist_role_mentions.append(role.id)
                    config['blacklist_role_mentions'] = blacklist_role_mentions
                    save_config(config)
                    
                    await self.send_success_message(
                        interaction,
                        "–ü–∏–Ω–≥-—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                        f"–†–æ–ª—å {role.mention} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–∏–Ω–≥-—Ä–æ–ª–µ–π –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                    )
                else:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                        f"–†–æ–ª—å {role.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–∏–Ω–≥-—Ä–æ–ª–µ–π."
                    )
            
            else:  # remove
                if role.id in blacklist_role_mentions:
                    blacklist_role_mentions.remove(role.id)
                    config['blacklist_role_mentions'] = blacklist_role_mentions
                    save_config(config)
                    
                    await self.send_success_message(
                        interaction,
                        "–ü–∏–Ω–≥-—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞",
                        f"–†–æ–ª—å {role.mention} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∏–Ω–≥-—Ä–æ–ª–µ–π –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
                    )
                else:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        f"–†–æ–ª—å {role.mention} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–∏–Ω–≥-—Ä–æ–ª–µ–π."
                    )
                
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏: {str(e)}"
            )


# Leave Requests Channel Configuration
class LeaveRequestsConfigView(BaseSettingsView):
    """View for leave requests channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("leave_requests")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üë• –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å", style=discord.ButtonStyle.primary)
    async def set_allowed_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = LeaveRequestAllowedRolesModal()
        await interaction.response.send_modal(modal)


class LeaveRequestAllowedRolesModal(BaseSettingsModal):
    """Modal for setting allowed roles for leave requests"""
    
    def __init__(self):
        super().__init__(title="üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–≥—É–ª–æ–≤")
        
        # Load current roles
        config = load_config()
        current_roles = config.get('leave_requests_allowed_roles', [])
        current_value = ", ".join([str(role_id) for role_id in current_roles]) if current_roles else ""
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, 123456789012345678, @–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
            style=discord.TextStyle.paragraph,
            default=current_value,
            max_length=1000,
            required=False
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            
            if not roles_text:
                # Clear all roles
                config = load_config()
                config['leave_requests_allowed_roles'] = []
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–†–æ–ª–∏ –æ—á–∏—â–µ–Ω—ã",
                    "–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–≥—É–ª–æ–≤ –æ—á–∏—â–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–≥—É–ª."
                )
                return
            
            # Parse roles
            role_ids = []
            roles_list = [r.strip() for r in roles_text.split(',')]
            
            for role_input in roles_list:
                role = RoleParser.parse_role_input(role_input, interaction.guild)
                if role:
                    role_ids.append(role.id)
                else:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        f"–†–æ–ª—å '{role_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                    )
                    return
            
            # Save configuration
            config = load_config()
            config['leave_requests_allowed_roles'] = role_ids
            save_config(config)
            
            role_mentions = [f"<@&{role_id}>" for role_id in role_ids]
            await self.send_success_message(
                interaction,
                "–†–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                f"–†–æ–ª–∏ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n{', '.join(role_mentions)}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}"
            )


# Medical Registration Channel Configuration
class MedicalRegistrationConfigView(BaseSettingsView):
    """View for medical registration channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("medical_registration")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üë©‚Äç‚öïÔ∏è –†–æ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã", style=discord.ButtonStyle.primary)
    async def set_medical_role(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = MedicalRoleModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="ü©∫ –†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –í–í–ö", style=discord.ButtonStyle.secondary)
    async def set_vvk_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = MedicalVVKRolesModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìö –†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –ª–µ–∫—Ü–∏–π", style=discord.ButtonStyle.secondary)
    async def set_lecture_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = MedicalLectureRolesModal()
        await interaction.response.send_modal(modal)


class MedicalRoleModal(BaseSettingsModal):
    """Modal for setting medical role"""
    
    def __init__(self):
        super().__init__(title="üë©‚Äç‚öïÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã")
        
        # Load current role
        config = load_config()
        current_role_id = config.get('medical_role_id')
        current_value = str(current_role_id) if current_role_id else ""
        
        self.role_input = ui.TextInput(
            label="–†–æ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞ –∏–ª–∏ 123456789012345678",
            style=discord.TextStyle.short,
            default=current_value,
            max_length=100,
            required=False
        )
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            role_input = self.role_input.value.strip()
            
            if not role_input:
                # Clear role
                config = load_config()
                config['medical_role_id'] = None
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–†–æ–ª—å –æ—á–∏—â–µ–Ω–∞",
                    "–†–æ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã –æ—á–∏—â–µ–Ω–∞."
                )
                return
            
            # Parse role
            role = RoleParser.parse_role_input(role_input, interaction.guild)
            
            if not role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–†–æ–ª—å '{role_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
                return
            
            # Save configuration
            config = load_config()
            config['medical_role_id'] = role.id
            save_config(config)
            
            await self.send_success_message(
                interaction,
                "–†–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                f"–†–æ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role.mention}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–∏: {str(e)}"
            )


class MedicalVVKRolesModal(BaseSettingsModal):
    """Modal for setting allowed roles for VVK"""
    
    def __init__(self):
        super().__init__(title="ü©∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –í–í–ö")
        
        # Load current roles
        config = load_config()
        current_roles = config.get('medical_vvk_allowed_roles', [])
        current_value = ", ".join([str(role_id) for role_id in current_roles]) if current_roles else ""
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§, 123456789012345678, @–û—Ñ–∏—Ü–µ—Ä",
            style=discord.TextStyle.paragraph,
            default=current_value,
            max_length=1000,
            required=False
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            
            if not roles_text:
                # Clear all roles
                config = load_config()
                config['medical_vvk_allowed_roles'] = []
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–†–æ–ª–∏ –æ—á–∏—â–µ–Ω—ã",
                    "–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –í–í–ö –æ—á–∏—â–µ–Ω—ã."
                )
                return
            
            # Parse roles
            role_ids = []
            roles_list = [r.strip() for r in roles_text.split(',')]
            
            for role_input in roles_list:
                role = RoleParser.parse_role_input(role_input, interaction.guild)
                if role:
                    role_ids.append(role.id)
                else:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        f"–†–æ–ª—å '{role_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                    )
                    return
            
            # Save configuration
            config = load_config()
            config['medical_vvk_allowed_roles'] = role_ids
            save_config(config)
            
            role_mentions = [f"<@&{role_id}>" for role_id in role_ids]
            await self.send_success_message(
                interaction,
                "–†–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                f"–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –í–í–ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n{', '.join(role_mentions)}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}"
            )


class MedicalLectureRolesModal(BaseSettingsModal):
    """Modal for setting allowed roles for lectures"""
    
    def __init__(self):
        super().__init__(title="üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–µ–∫—Ü–∏—è–º")
        
        # Load current roles
        config = load_config()
        current_roles = config.get('medical_lecture_allowed_roles', [])
        current_value = ", ".join([str(role_id) for role_id in current_roles]) if current_roles else ""
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–π –í–° –†–§, 123456789012345678, @–û—Ñ–∏—Ü–µ—Ä",
            style=discord.TextStyle.paragraph,
            default=current_value,
            max_length=1000,
            required=False
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            
            if not roles_text:
                # Clear all roles
                config = load_config()
                config['medical_lecture_allowed_roles'] = []
                save_config(config)
                
                await self.send_success_message(
                    interaction,
                    "–†–æ–ª–∏ –æ—á–∏—â–µ–Ω—ã",
                    "–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–µ–∫—Ü–∏—è–º –æ—á–∏—â–µ–Ω—ã."
                )
                return
            
            # Parse roles
            role_ids = []
            roles_list = [r.strip() for r in roles_text.split(',')]
            
            for role_input in roles_list:
                role = RoleParser.parse_role_input(role_input, interaction.guild)
                if role:
                    role_ids.append(role.id)
                else:
                    await self.send_error_message(
                        interaction,
                        "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                        f"–†–æ–ª—å '{role_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                    )
                    return
            
            # Save configuration
            config = load_config()
            config['medical_lecture_allowed_roles'] = role_ids
            save_config(config)
            
            role_mentions = [f"<@&{role_id}>" for role_id in role_ids]
            await self.send_success_message(
                interaction,
                "–†–æ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                f"–†–æ–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–µ–∫—Ü–∏—è–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n{', '.join(role_mentions)}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}"
            )


# Show functions
async def show_blacklist_config(interaction: discord.Interaction):
    """Show blacklist channel configuration with ping management"""
    embed = discord.Embed(
        title="üö´ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø–∏–Ω–≥–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        color=discord.Color.dark_red(),
        timestamp=discord.utils.utcnow()
    )
    
    config = load_config()
    helper = ConfigDisplayHelper()
    
    # Show current channel
    embed.add_field(
        name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
        value=helper.format_channel_info(config, 'blacklist_channel', interaction.guild),
        inline=False
    )
    
    # Show blacklist ping settings
    blacklist_role_mentions = config.get('blacklist_role_mentions', [])
    if blacklist_role_mentions:
        ping_roles = []
        for role_id in blacklist_role_mentions:
            role = interaction.guild.get_role(role_id)
            ping_roles.append(role.mention if role else f"<@&{role_id}> (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
        ping_text = ", ".join(ping_roles)
    else:
        ping_text = "‚ùå –ü–∏–Ω–≥–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    embed.add_field(
        name="üì¢ –ü–∏–Ω–≥-—Ä–æ–ª–∏ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
        value=ping_text,
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        value=(
            "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å** - –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å –ø–∏–Ω–≥-—Ä–æ–ª—å** - —É–±—Ä–∞—Ç—å —Ä–æ–ª—å –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ **–û—á–∏—Å—Ç–∏—Ç—å –ø–∏–Ω–≥–∏** - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∏–Ω–≥-—Ä–æ–ª–∏"
        ),
        inline=False
    )
    
    view = BlacklistChannelView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


async def show_leave_requests_config(interaction: discord.Interaction):
    """Show leave requests channel configuration with role management"""
    try:
        embed = discord.Embed(
            title="üèñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç–≥—É–ª–æ–≤",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –∏ —Ä–æ–ª—è–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–≥—É–ª.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
        
        # Show current channel
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=helper.format_channel_info(config, 'leave_requests_channel', interaction.guild),
            inline=False
        )
        
        # Show allowed roles
        allowed_roles = config.get('leave_requests_allowed_roles', [])
        if allowed_roles:
            roles_text = helper.format_roles_list(config, 'leave_requests_allowed_roles', interaction.guild)
        else:
            roles_text = "‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(
            name="üë• –ö—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏:",
            value=roles_text,
            inline=False
        )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≥—É–ª–æ–≤:",
            inline=False
        )
        
        view = LeaveRequestsConfigView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
    except Exception as e:
        print(f"‚ùå ERROR in show_leave_requests_config: {e}")
        import traceback
        traceback.print_exc()
        # Try to send error message if interaction hasn't been responded to yet
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–≥—É–ª–æ–≤.",
                ephemeral=True
            )
        raise


async def show_medical_registration_config(interaction: discord.Interaction):
    """Show medical registration channel configuration"""
    try:
        embed = discord.Embed(
            title="üè• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        config = load_config()
        helper = ConfigDisplayHelper()
        
        # Show current channel
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=helper.format_channel_info(config, 'medical_registration_channel', interaction.guild),
            inline=False
        )
        
        # Show medical role ID (for pings)
        medic_role_id = config.get('medical_role_id')
        if medic_role_id:
            role = interaction.guild.get_role(medic_role_id)
            medic_text = role.mention if role else f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {medic_role_id})"
        else:
            medic_text = "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        embed.add_field(
            name="üë©‚Äç‚öïÔ∏è –†–æ–ª—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ä–æ—Ç—ã:",
            value=medic_text,
            inline=True
        )
        
        # Show allowed roles for VVK
        vvk_roles = config.get('medical_vvk_allowed_roles', [])
        if vvk_roles:
            vvk_text = helper.format_roles_list(config, 'medical_vvk_allowed_roles', interaction.guild)
        else:
            vvk_text = "‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(
            name="ü©∫ –î–æ—Å—Ç—É–ø –∫ –í–í–ö:",
            value=vvk_text,
            inline=True
        )
        
        # Show allowed roles for lectures
        lecture_roles = config.get('medical_lecture_allowed_roles', [])
        if lecture_roles:
            lecture_text = helper.format_roles_list(config, 'medical_lecture_allowed_roles', interaction.guild)
        else:
            lecture_text = "‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(
            name="üìö –î–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏—è–º:",
            value=lecture_text,
            inline=True
        )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞:",
            inline=False
        )
        
        view = MedicalRegistrationConfigView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
    except Exception as e:
        print(f"‚ùå ERROR in show_medical_registration_config: {e}")
        import traceback
        traceback.print_exc()
        # Try to send error message if interaction hasn't been responded to yet
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                ephemeral=True
            )
        raise


# Safe Documents Channel Configuration
class SafeDocumentsChannelView(BaseSettingsView):
    """View for safe documents channel configuration"""
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ChannelSelectionModal("safe_documents")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.red)
    async def remove_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        config['safe_documents_channel'] = None
        save_config(config)
        
        await self.send_success_message(
            interaction,
            "–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω",
            "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )


async def show_safe_documents_config(interaction: discord.Interaction):
    """Show safe documents channel configuration"""
    try:
        config = load_config()
        helper = ConfigDisplayHelper()
        
        embed = discord.Embed(
            title="üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ —Å–µ–π—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            description="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
        current_channel = helper.format_channel_info(config, 'safe_documents_channel', interaction.guild)
        embed.add_field(
            name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
            value=current_channel,
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:",
            value=(
                "–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ "
                "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏.\n\n"
                "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤\n"
                "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –∞–≤—Ç–æ—Ä–æ–º –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n"
                "‚Ä¢ –ü–∏–Ω–≥–∏ —Ä–æ–ª–µ–π –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–µ–π—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:",
            inline=False
        )
        
        view = SafeDocumentsChannelView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
    except Exception as e:
        print(f"‚ùå ERROR in show_safe_documents_config: {e}")
        import traceback
        traceback.print_exc()
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞ —Å–µ–π—Ñ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
                ephemeral=True
            )
        raise
