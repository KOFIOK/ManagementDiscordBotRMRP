"""
Promotion reports channels configuration
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView, BaseSettingsModal, ChannelParser, ConfigDisplayHelper
import os


class PromotionReportsConfigView(BaseSettingsView):
    """View for promotion reports configuration with dropdown selection"""
    
    def __init__(self):
        super().__init__()
        self.add_item(PromotionDepartmentSelect())


class PromotionDepartmentSelect(ui.Select):
    """Select menu for choosing department to configure promotion reports"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –í–ê",
                description="–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è",
                emoji="‚úàÔ∏è",
                value="va"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –í–ö",
                description="–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç",
                emoji="üöÄ",
                value="vk"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –£–í–ü",
                description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏",
                emoji="üëÆ",
                value="uvp"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –°–°–û",
                description="–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π",
                emoji="üî´",
                value="sso"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –ú–†",
                description="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞",
                emoji="‚öì",
                value="mr"
            ),
            discord.SelectOption(
                label="–û—Ç—á—ë—Ç—ã –†–û–∏–û",
                description="–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è",
                emoji="üõ°Ô∏è",
                value="roio"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="promotion_department_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_department = self.values[0]
        # Show department configuration with buttons
        department_names = {
            'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
            'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
            'uvp': '–£–í–ü (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏)',
            'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π)',
            'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
            'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
        }
        
        department_emojis = {
            'va': '‚úàÔ∏è',
            'vk': 'üöÄ',
            'uvp': 'üëÆ',
            'sso': 'üî´',
            'mr': '‚öì',
            'roio': 'üõ°Ô∏è'
        }
        
        config = load_config()
        promotion_channels = config.get('promotion_report_channels', {})
        current_channel_id = promotion_channels.get(selected_department)
        
        embed = discord.Embed(
            title=f"{department_emojis.get(selected_department, 'üìà')} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ {department_names.get(selected_department, selected_department.upper())}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {department_names.get(selected_department, selected_department.upper())}",
            color=discord.Color.gold(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current channel
        if current_channel_id:
            channel = interaction.guild.get_channel(current_channel_id)
            if channel:
                embed.add_field(
                    name="üìÇ –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:",
                    value=channel.mention,
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    value=f"–ö–∞–Ω–∞–ª —Å ID {current_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    inline=False
                )
        else:
            embed.add_field(
                name="‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                value="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ",
                inline=False
            )
        
        # Show notification settings
        notification_settings = config.get('promotion_notifications', {}).get(selected_department, {})
        if notification_settings:
            notification_text = notification_settings.get('text')
            notification_image = notification_settings.get('image')
            notification_enabled = notification_settings.get('enabled', False)
            
            status = "üü¢ –í–∫–ª—é—á–µ–Ω—ã" if notification_enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
            content_parts = []
            if notification_text:
                content_parts.append("—Ç–µ–∫—Å—Ç")
            if notification_image:
                content_parts.append("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            content_info = f" ({', '.join(content_parts)})" if content_parts else ""
            
            # Get configured notification time
            schedule_config = config.get('notification_schedule', {'hour': 21, 'minute': 0})
            hour = schedule_config.get('hour', 21)
            minute = schedule_config.get('minute', 0)
            time_str = f"{hour:02d}:{minute:02d}"
            
            embed.add_field(
                name="üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                value=f"{status}{content_info}\n{'*–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ ' + time_str + ' –ú–°–ö*' if notification_enabled else ''}",
                inline=False
            )
        else:
            embed.add_field(
                name="üïê –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
                value="‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                inline=False
            )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª** - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤\n"
                "‚Ä¢ **–ó–∞–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                "*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `/set_notification_time`*"
            ),
            inline=False
        )
        
        view = PromotionDepartmentConfigView(selected_department)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class PromotionDepartmentConfigView(BaseSettingsView):
    """View for configuring specific department promotion reports"""
    
    def __init__(self, department_code: str):
        super().__init__()
        self.department_code = department_code
    
    @discord.ui.button(label="üìÇ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª", style=discord.ButtonStyle.green)
    async def set_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = PromotionChannelModal(self.department_code)
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üîî –ó–∞–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.secondary)
    async def set_notification(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = PromotionNotificationModal(self.department_code)
        await interaction.response.send_modal(modal)


class PromotionChannelModal(BaseSettingsModal):
    """Modal for configuring promotion report channel for specific department"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ modal (–ª–∏–º–∏—Ç 45 —Å–∏–º–≤–æ–ª–æ–≤)
        department_names = {
            'va': '–í–ê',
            'vk': '–í–ö', 
            'uvp': '–£–í–ü',
            'sso': '–°–°–û',
            'mr': '–ú–†',
            'roio': '–†–û–∏–û'
        }
        
        dept_name = department_names.get(department_code, department_code.upper())
        super().__init__(title=f"üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ {dept_name}")
        
        # –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
        full_department_names = {
            'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
            'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
            'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
            'sso': '–°–°–û (–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏)',
            'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
            'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
        }
        
        full_dept_name = full_department_names.get(department_code, department_code.upper())
        
        self.channel_input = ui.TextInput(
            label=f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {dept_name}",
            placeholder=f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {full_dept_name}",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.channel_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Parse channel input
            channel = ChannelParser.parse_channel_input(self.channel_input.value.strip(), interaction.guild)
            
            if not channel:
                await self.send_error_message(
                    interaction,
                    "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    f"–ö–∞–Ω–∞–ª '{self.channel_input.value.strip()}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
                return
            
            # Save configuration
            config = load_config()
            if 'promotion_report_channels' not in config:
                config['promotion_report_channels'] = {}
            
            config['promotion_report_channels'][self.department_code] = channel.id
            save_config(config)
            
            department_names = {
                'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
                'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
                'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
                'sso': '–°–°–û (–°–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏–∏)',
                'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
                'roio': '–†–û–∏–û (–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è)'
            }
            
            dept_name = department_names.get(self.department_code, self.department_code.upper())
            
            await self.send_success_message(
                interaction,
                "–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                f"–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ {dept_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}"
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)}"
            )


class PromotionNotificationModal(BaseSettingsModal):
    """Modal for configuring promotion report daily notifications"""
    
    def __init__(self, department_code: str):
        self.department_code = department_code
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ modal
        department_names = {
            'va': '–í–ê',
            'vk': '–í–ö',
            'uvp': '–£–í–ü', 
            'sso': '–°–°–û',
            'mr': '–ú–†',
            'roio': '–†–û–∏–û'
        }
        
        dept_name = department_names.get(department_code, department_code.upper())
        super().__init__(title=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {dept_name}")
        
        # Load current settings
        config = load_config()
        current_notification = config.get('promotion_notifications', {}).get(department_code, {})
        current_text = current_notification.get('text', '')
        current_image = current_notification.get('image', '')
        current_enabled = current_notification.get('enabled', False)
        
        self.text_input = ui.TextInput(
            label="–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...",
            style=discord.TextStyle.paragraph,
            min_length=0,
            max_length=1000,
            required=False,
            default=current_text
        )
        self.add_item(self.text_input)
        
        self.image_input = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: report_va.png (—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ files/reports/)",
            min_length=0,
            max_length=100,
            required=False,
            default=current_image
        )
        self.add_item(self.image_input)
        
        self.enabled_input = ui.TextInput(
            label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è? (–¥–∞/–Ω–µ—Ç)",
            placeholder="–¥–∞ - –≤–∫–ª—é—á–∏—Ç—å, –Ω–µ—Ç - –æ—Ç–∫–ª—é—á–∏—Ç—å",
            min_length=2,
            max_length=3,
            required=True,
            default="–¥–∞" if current_enabled else "–Ω–µ—Ç"
        )
        self.add_item(self.enabled_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            text = self.text_input.value.strip()
            image_filename = self.image_input.value.strip()
            enabled_str = self.enabled_input.value.strip().lower()
            
            # Validate enabled input
            if enabled_str not in ['–¥–∞', '–Ω–µ—Ç', 'yes', 'no']:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥",
                    "–í–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
                )
                return
            
            enabled = enabled_str in ['–¥–∞', 'yes']
            
            # Validate that at least text or image is provided if enabled
            if enabled and not text and not image_filename:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ",
                    "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
                )
                return
            
            # Validate image file if provided
            image_path = None
            if image_filename:
                image_path = os.path.join('files', 'reports', image_filename)
                if not os.path.exists(image_path):
                    await self.send_error_message(
                        interaction,
                        "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        f"–§–∞–π–ª {image_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ files/reports/. "
                        f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                    )
                    return
            
            # Save configuration
            config = load_config()
            if 'promotion_notifications' not in config:
                config['promotion_notifications'] = {}
            
            if self.department_code not in config['promotion_notifications']:
                config['promotion_notifications'][self.department_code] = {}
            
            config['promotion_notifications'][self.department_code] = {
                'text': text,
                'image': image_filename,
                'enabled': enabled
            }
            
            save_config(config)
            
            # Ensure scheduler is running if notifications are enabled
            if enabled:
                await self._ensure_scheduler_running()
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            content_parts = []
            if text:
                content_parts.append("—Ç–µ–∫—Å—Ç")
            if image_filename:
                content_parts.append("–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            content_info = f" ({', '.join(content_parts)})" if content_parts else ""
            
            await self.send_success_message(
                interaction,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {self.department_code.upper()} {status}{content_info}."
            )
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
            )
    
    async def _ensure_scheduler_running(self):
        """Ensure the notification scheduler is running"""
        # This will be implemented when we add the scheduler to the main bot
        pass


async def show_promotion_reports_config(interaction: discord.Interaction):
    """Show promotion reports channels configuration"""
    embed = discord.Embed(
        title="üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º.",
        color=discord.Color.gold(),
        timestamp=discord.utils.utcnow()
    )
    
    config = load_config()
    helper = ConfigDisplayHelper()
    
    # Show current channels
    promotion_channels = config.get('promotion_report_channels', {})
    department_names = {
        'va': '–í–ê (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)',
        'vk': '–í–ö (–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç)',
        'uvp': '–£–í–ü (–í–æ–µ–Ω–Ω–∞—è –ü–æ–ª–∏—Ü–∏—è)',
        'sso': '–°–°–û (–°–∏–ª—ã –°–ø–µ—Ü. –û–ø–µ—Ä–∞—Ü–∏–π)',
        'mr': '–ú–† (–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞)',
        'roio': '–†–û–∏–û (–†–æ—Ç—ã –û—Ö—Ä–∞–Ω—ã)'
    }
    
    channels_info = ""
    for dept_code, channel_id in promotion_channels.items():
        dept_name = department_names.get(dept_code, dept_code.upper())
        if channel_id:
            channel = interaction.guild.get_channel(channel_id)
            channel_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {channel_id})"
        else:
            channel_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        channels_info += f"**{dept_name}**: {channel_text}\n"
    
    embed.add_field(
        name="üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
        value=channels_info or "‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:",
        value=(
            "–ö–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤ –∑–≤–∞–Ω–∏–∏ "
            "–¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è "
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞."
        ),
        inline=False
    )
    
    embed.add_field(
        name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        value="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        inline=False
    )
    
    view = PromotionReportsConfigView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
