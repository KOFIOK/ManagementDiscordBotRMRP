"""
Commands settings configuration
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView
from utils.postgresql_pool import get_db_cursor


class CommandsBaseView(BaseSettingsView):
    """Base view for commands settings with display method"""
    
    async def display(self, interaction: discord.Interaction, embed=None):
        """Display the view with embed"""
        if embed is None:
            embed = discord.Embed(
                title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.",
                color=discord.Color.blue()
            )
        await interaction.response.edit_message(embed=embed, view=self)


class CommandsSettingsView(CommandsBaseView):
    """Main commands settings interface"""
    
    def __init__(self):
        super().__init__()
        self.add_item(CommandsSettingsSelect())


class CommandsSettingsSelect(ui.Select):
    """Commands settings dropdown menu"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç",
                emoji="üìã",
                value="audit_command"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="commands_settings_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        
        if selected_option == "audit_command":
            await self.show_audit_command_settings(interaction)
    
    async def show_audit_command_settings(self, interaction: discord.Interaction):
        """Show audit command settings"""
        await display_audit_command_settings(interaction)


class AuditCommandSettingsView(CommandsBaseView):
    """Audit command settings interface"""
    
    def __init__(self):
        super().__init__()
        self.actions_select = AuditActionsSelect()
        self.add_item(self.actions_select)
        self.add_item(BackToCommandsButton())
    
    async def setup_options(self):
        """Setup options for the actions select"""
        await self.actions_select.setup_options()
        # Update max_values after setting up options
        if len(self.actions_select.options) > 0:
            self.actions_select.max_values = min(len(self.actions_select.options), 10)


class AuditActionsSelect(ui.Select):
    """Select for enabling/disabling audit actions"""
    
    def __init__(self):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞...",
            min_values=1,
            max_values=10,  # Reasonable limit for multiple selection
            custom_id="audit_actions_select"
        )
    
    async def setup_options(self):
        """Setup options from PostgreSQL and current config"""
        try:
            # Get all actions from PostgreSQL
            all_actions = []
            with get_db_cursor() as cursor:
                cursor.execute("SELECT name FROM actions ORDER BY name")
                actions_result = cursor.fetchall()
                all_actions = [row['name'] for row in actions_result] if actions_result else []
            
            # Get current config
            config = load_config()
            disabled_audit_actions = config.get('disabled_audit_actions', [])
            
            # Create options
            options = []
            for action in all_actions:
                is_enabled = action not in disabled_audit_actions
                status_emoji = "‚úÖ" if is_enabled else "‚ùå"
                
                options.append(discord.SelectOption(
                    label=f"{status_emoji} {action}",
                    description=f"–°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–æ' if is_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}",
                    value=action,
                    emoji="üîÑ"
                ))
            
            # Ensure we have at least one option
            if not options:
                options.append(discord.SelectOption(
                    label="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π",
                    description="–î–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    value="no_actions"
                ))
            
            # Discord limit: max 25 options
            self.options = options[:25]
            
            # Adjust max_values based on available options
            actual_max = min(len(self.options), 10)
            if hasattr(self, '_max_values'):
                self._max_values = actual_max
            else:
                # Create new select with correct max_values
                self.max_values = actual_max
            
        except Exception as e:
            print(f"Error setting up audit actions options: {e}")
            self.options = [discord.SelectOption(
                label="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                value="error"
            )]
    
    async def callback(self, interaction: discord.Interaction):
        if "no_actions" in self.values or "error" in self.values:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                ephemeral=True
            )
            return
        
        try:
            config = load_config()
            disabled_audit_actions = set(config.get('disabled_audit_actions', []))
            
            # Toggle selected actions
            for action in self.values:
                if action in disabled_audit_actions:
                    disabled_audit_actions.remove(action)
                    status = "–≤–∫–ª—é—á–µ–Ω–æ"
                else:
                    disabled_audit_actions.add(action)
                    status = "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            
            # Save updated config
            config['disabled_audit_actions'] = list(disabled_audit_actions)
            success = save_config(config)
            
            if success:
                # Create new view with updated options
                view = AuditCommandSettingsView()
                await view.setup_options()
                
                embed = discord.Embed(
                    title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    description=f"–ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è {len(self.values)} –¥–µ–π—Å—Ç–≤–∏–π.",
                    color=discord.Color.green()
                )
                
                # Show current status
                enabled_actions = []
                disabled_actions = []
                
                with get_db_cursor() as cursor:
                    cursor.execute("SELECT name FROM actions ORDER BY name")
                    all_actions = [row['name'] for row in cursor.fetchall()]
                
                for action in all_actions:
                    if action in disabled_audit_actions:
                        disabled_actions.append(action)
                    else:
                        enabled_actions.append(action)
                
                if enabled_actions:
                    embed.add_field(
                        name="‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                        value="\n".join(f"‚Ä¢ {action}" for action in enabled_actions[:10]),
                        inline=True
                    )
                
                if disabled_actions:
                    embed.add_field(
                        name="‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", 
                        value="\n".join(f"‚Ä¢ {action}" for action in disabled_actions[:10]),
                        inline=True
                    )
                
                await interaction.response.edit_message(embed=embed, view=view)
            else:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                    ephemeral=True
                )
                
        except Exception as e:
            print(f"Error updating audit actions: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ephemeral=True
            )


class BackToCommandsButton(ui.Button):
    """Button to go back to commands settings"""
    
    def __init__(self):
        super().__init__(
            label="–ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–æ–º–∞–Ω–¥",
            style=discord.ButtonStyle.secondary,
            emoji="‚Ü©Ô∏è"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = CommandsSettingsView()
        embed = discord.Embed(
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
            color=discord.Color.blue()
        )
        await interaction.response.edit_message(embed=embed, view=view)


async def display_audit_command_settings(interaction: discord.Interaction):
    """Display audit command settings with current status"""
    try:
        config = load_config()
        disabled_audit_actions = config.get('disabled_audit_actions', [])
        
        # Get all actions from PostgreSQL
        all_actions = []
        with get_db_cursor() as cursor:
            cursor.execute("SELECT name FROM actions ORDER BY name")
            actions_result = cursor.fetchall()
            all_actions = [row['name'] for row in actions_result] if actions_result else []
        
        embed = discord.Embed(
            title="üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç.\n"
                       "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç—É—Å–∞.",
            color=discord.Color.blue()
        )
        
        # Show current status
        enabled_actions = [action for action in all_actions if action not in disabled_audit_actions]
        disabled_actions = [action for action in all_actions if action in disabled_audit_actions]
        
        if enabled_actions:
            embed.add_field(
                name="‚úÖ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                value="\n".join(f"‚Ä¢ {action}" for action in enabled_actions[:10]) + 
                     (f"\n... –∏ –µ—â—ë {len(enabled_actions) - 10}" if len(enabled_actions) > 10 else ""),
                inline=True
            )
        
        if disabled_actions:
            embed.add_field(
                name="‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                value="\n".join(f"‚Ä¢ {action}" for action in disabled_actions[:10]) +
                     (f"\n... –∏ –µ—â—ë {len(disabled_actions) - 10}" if len(disabled_actions) > 10 else ""),
                inline=True
            )
        
        if not enabled_actions and not disabled_actions:
            embed.add_field(
                name="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å",
                value="–î–µ–π—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                inline=False
            )
        
        view = AuditCommandSettingsView()
        await view.setup_options()
        
        await view.display(interaction, embed)
        
    except Exception as e:
        print(f"Error displaying audit command settings: {e}")
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥—ã /–∞—É–¥–∏—Ç.",
            color=discord.Color.red()
        )
        await interaction.response.edit_message(embed=embed)

