"""
Nickname auto-replacement settings configuration
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView
from utils.department_manager import DepartmentManager


class NicknameBaseView(BaseSettingsView):
    """Base view for nickname settings with display method"""
    
    async def display(self, interaction: discord.Interaction, embed=None):
        """Display the view with embed"""
        if embed is None:
            embed = discord.Embed(
                title="üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø—Ä–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.",
                color=discord.Color.blue()
            )
        await interaction.response.send_message(embed=embed, view=self, ephemeral=True)


class NicknameSettingsView(NicknameBaseView):
    """Main nickname settings interface"""
    
    def __init__(self):
        super().__init__()
        self.add_item(NicknameSettingsSelect())


class NicknameSettingsSelect(ui.Select):
    """Nickname settings dropdown menu"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                description="–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                emoji="üåê",
                value="global_settings"
            ),
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ",
                emoji="üè¢",
                value="department_settings"
            ),
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                emoji="‚öôÔ∏è",
                value="module_settings"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="nickname_settings_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        
        if selected_option == "global_settings":
            await self.show_global_settings(interaction)
        elif selected_option == "department_settings":
            await self.show_department_settings(interaction)
        elif selected_option == "module_settings":
            await self.show_module_settings(interaction)
    
    async def show_global_settings(self, interaction: discord.Interaction):
        """Show global nickname replacement settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        global_enabled = nickname_settings.get('enabled', True)
        
        embed = discord.Embed(
            title="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã",
            description="–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if global_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if global_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤: **{status_text}**",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:",
            value=(
                "–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                "–ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–≤—ã—à–µ–Ω–∏–µ). "
                "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤."
            ),
            inline=False
        )
        
        view = GlobalNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_department_settings(self, interaction: discord.Interaction):
        """Show department-specific nickname settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        
        departments = DepartmentManager.get_all_departments()
        
        embed = discord.Embed(
            title="üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current settings for each department
        dept_status = []
        for dept_id, dept_data in departments.items():
            dept_name = dept_data.get('name', dept_id)
            is_enabled = department_settings.get(dept_id, True)  # Default enabled
            status_emoji = "‚úÖ" if is_enabled else "‚ùå"
            dept_status.append(f"{status_emoji} **{dept_name}**")
        
        if dept_status:
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                value="\n".join(dept_status),
                inline=False
            )
        else:
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                value="‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                inline=False
            )
        
        view = DepartmentNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_module_settings(self, interaction: discord.Interaction):
        """Show module-specific nickname settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        modules = {
            'dismissal': '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
            'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
            'promotion': '–ü–æ–≤—ã—à–µ–Ω–∏–µ',
            'demotion': '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        }
        
        # Show current settings for each module
        module_status = []
        for module_id, module_name in modules.items():
            is_enabled = module_settings.get(module_id, True)  # Default enabled
            status_emoji = "‚úÖ" if is_enabled else "‚ùå"
            module_status.append(f"{status_emoji} **{module_name}**")
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            value="\n".join(module_status),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:",
            value=(
                "‚Ä¢ **–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏\n"
                "‚Ä¢ **–ü–µ—Ä–µ–≤–æ–¥** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ\n"
                "‚Ä¢ **–ü–æ–≤—ã—à–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/–∑–≤–∞–Ω–∏–∏\n"
                "‚Ä¢ **–ü–æ–Ω–∏–∂–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/–∑–≤–∞–Ω–∏–∏"
            ),
            inline=False
        )
        
        view = ModuleNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class GlobalNicknameSettingsView(NicknameBaseView):
    """View for global nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(GlobalToggleButton())


class DepartmentNicknameSettingsView(NicknameBaseView):
    """View for department-specific nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(DepartmentNicknameSelect())


class ModuleNicknameSettingsView(NicknameBaseView):
    """View for module-specific nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(ModuleNicknameSelect())


class GlobalToggleButton(ui.Button):
    """Button to toggle global nickname replacement"""
    
    def __init__(self):
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        is_enabled = nickname_settings.get('enabled', True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id="toggle_global_nickname"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement'].get('enabled', True)
        config['nickname_auto_replacement']['enabled'] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['enabled']
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = GlobalNicknameSettingsView()
        await interaction.response.edit_message(embed=embed, view=view)


class DepartmentNicknameSelect(ui.Select):
    """Select for department-specific nickname settings"""
    
    def __init__(self):
        departments = DepartmentManager.get_all_departments()
        
        options = []
        for dept_id, dept_data in departments.items():
            dept_name = dept_data.get('name', dept_id)
            options.append(discord.SelectOption(
                label=dept_name,
                description=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è {dept_name}",
                value=dept_id
            ))
        
        if not options:
            options.append(discord.SelectOption(
                label="–ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
                description="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                value="none"
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="department_nickname_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_dept = self.values[0]
        
        if selected_dept == "none":
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, view=None, ephemeral=True)
            return
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        
        departments = DepartmentManager.get_all_departments()
        dept_name = departments.get(selected_dept, {}).get('name', selected_dept)
        is_enabled = department_settings.get(selected_dept, True)
        
        embed = discord.Embed(
            title=f"üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {dept_name}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {dept_name}.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞: **{status_text}**",
            inline=False
        )
        
        view = DepartmentToggleView(selected_dept, dept_name)
        await interaction.response.edit_message(embed=embed, view=view)


class ModuleNicknameSelect(ui.Select):
    """Select for module-specific nickname settings"""
    
    def __init__(self):
        modules = {
            'dismissal': ('–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ', 'üìã'),
            'transfer': ('–ü–µ—Ä–µ–≤–æ–¥', 'üîÑ'),
            'promotion': ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '‚¨ÜÔ∏è'),
            'demotion': ('–ü–æ–Ω–∏–∂–µ–Ω–∏–µ', '‚¨áÔ∏è')
        }
        
        options = []
        for module_id, (module_name, emoji) in modules.items():
            options.append(discord.SelectOption(
                label=module_name,
                description=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {module_name.lower()}",
                emoji=emoji,
                value=module_id
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="module_nickname_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_module = self.values[0]
        
        modules = {
            'dismissal': '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
            'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
            'promotion': '–ü–æ–≤—ã—à–µ–Ω–∏–µ',
            'demotion': '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        }
        
        module_name = modules.get(selected_module, selected_module)
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        is_enabled = module_settings.get(selected_module, True)
        
        embed = discord.Embed(
            title=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è: {module_name}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {module_name.lower()}.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞: **{status_text}**",
            inline=False
        )
        
        view = ModuleToggleView(selected_module, module_name)
        await interaction.response.edit_message(embed=embed, view=view)


class DepartmentToggleView(NicknameBaseView):
    """View for toggling department nickname settings"""
    
    def __init__(self, dept_id, dept_name):
        super().__init__()
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.add_item(DepartmentToggleButton(dept_id, dept_name))


class ModuleToggleView(NicknameBaseView):
    """View for toggling module nickname settings"""
    
    def __init__(self, module_id, module_name):
        super().__init__()
        self.module_id = module_id
        self.module_name = module_name
        self.add_item(ModuleToggleButton(module_id, module_name))


class DepartmentToggleButton(ui.Button):
    """Button to toggle department-specific nickname replacement"""
    
    def __init__(self, dept_id, dept_name):
        self.dept_id = dept_id
        self.dept_name = dept_name
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        is_enabled = department_settings.get(dept_id, True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id=f"toggle_dept_{dept_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'departments' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['departments'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement']['departments'].get(self.dept_id, True)
        config['nickname_auto_replacement']['departments'][self.dept_id] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['departments'][self.dept_id]
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è {self.dept_name} {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = DepartmentToggleView(self.dept_id, self.dept_name)
        await interaction.response.edit_message(embed=embed, view=view)


class ModuleToggleButton(ui.Button):
    """Button to toggle module-specific nickname replacement"""
    
    def __init__(self, module_id, module_name):
        self.module_id = module_id
        self.module_name = module_name
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        is_enabled = module_settings.get(module_id, True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id=f"toggle_module_{module_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'modules' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['modules'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement']['modules'].get(self.module_id, True)
        config['nickname_auto_replacement']['modules'][self.module_id] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['modules'][self.module_id]
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {self.module_name.lower()} {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = ModuleToggleView(self.module_id, self.module_name)
        await interaction.response.edit_message(embed=embed, view=view)


# Main function to show nickname settings
async def show_nickname_settings_overview(interaction: discord.Interaction):
    """Show the main nickname settings overview"""
    embed = discord.Embed(
        title="üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø—Ä–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.",
        color=discord.Color.blue(),
        timestamp=discord.utils.utcnow()
    )
    
    config = load_config()
    nickname_settings = config.get('nickname_auto_replacement', {})
    global_enabled = nickname_settings.get('enabled', True)
    
    status_emoji = "‚úÖ" if global_enabled else "‚ùå"
    status_text = "–í–∫–ª—é—á–µ–Ω–∞" if global_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
    
    embed.add_field(
        name="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:",
        value=f"{status_emoji} **{status_text}**",
        inline=True
    )
    
    embed.add_field(
        name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        value=(
            "‚Ä¢ **–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\n"
            "‚Ä¢ **–ü–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
            "‚Ä¢ **–ü–æ –º–æ–¥—É–ª—è–º** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π"
        ),
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:",
        value=(
            "–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ "
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ "
            "–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."
        ),
        inline=False
    )
    
    view = NicknameSettingsView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)