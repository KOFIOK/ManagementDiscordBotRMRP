"""
Nickname auto-replacement settings configuration
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView
from utils.department_manager import DepartmentManager


class NicknameBaseView(BaseSettingsView):
    """Base view for nickname settings with display method"""
    
    async def display(self, interaction: discord.Interaction, embed=None):
        """Display the view with embed"""
        if embed is None:
            embed = discord.Embed(
                title="üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø—Ä–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.",
                color=discord.Color.blue()
            )
        await interaction.response.send_message(embed=embed, view=self, ephemeral=True)


class NicknameSettingsView(NicknameBaseView):
    """Main nickname settings interface"""
    
    def __init__(self):
        super().__init__()
        self.add_item(NicknameSettingsSelect())


class NicknameSettingsSelect(ui.Select):
    """Nickname settings dropdown menu"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                description="–ì–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                emoji="üåê",
                value="global_settings"
            ),
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ",
                emoji="üè¢",
                value="department_settings"
            ),
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
                emoji="‚öôÔ∏è",
                value="module_settings"
            ),
            discord.SelectOption(
                label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏",
                description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                emoji="üìã",
                value="positions_management"
            ),
            discord.SelectOption(
                label="–§–æ—Ä–º–∞—Ç—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤",
                emoji="üé®",
                value="format_settings"
            )
            #discord.SelectOption(
            #    label="–†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤",
            #    description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤",
            #    emoji="üîß",
            #    value="template_editor"
            #)
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="nickname_settings_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        
        if selected_option == "global_settings":
            await self.show_global_settings(interaction)
        elif selected_option == "department_settings":
            await self.show_department_settings(interaction)
        elif selected_option == "module_settings":
            await self.show_module_settings(interaction)
        elif selected_option == "positions_management":
            await self.show_positions_management(interaction)
        elif selected_option == "format_settings":
            await self.show_format_settings(interaction)
        elif selected_option == "template_editor":
            await self.show_template_editor(interaction)
    
    async def show_global_settings(self, interaction: discord.Interaction):
        """Show global nickname replacement settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        global_enabled = nickname_settings.get('enabled', True)
        
        embed = discord.Embed(
            title="üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã",
            description="–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if global_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if global_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤: **{status_text}**",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:",
            value=(
                "–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                "–ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–≤—ã—à–µ–Ω–∏–µ). "
                "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤."
            ),
            inline=False
        )
        
        view = GlobalNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_department_settings(self, interaction: discord.Interaction):
        """Show department-specific nickname settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        
        departments = DepartmentManager.get_all_departments()
        
        embed = discord.Embed(
            title="üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current settings for each department
        dept_status = []
        for dept_id, dept_data in departments.items():
            dept_name = dept_data.get('name', dept_id)
            is_enabled = department_settings.get(dept_id, True)  # Default enabled
            status_emoji = "‚úÖ" if is_enabled else "‚ùå"
            dept_status.append(f"{status_emoji} **{dept_name}**")
        
        if dept_status:
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                value="\n".join(dept_status),
                inline=False
            )
        else:
            embed.add_field(
                name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                value="‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                inline=False
            )
        
        view = DepartmentNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_module_settings(self, interaction: discord.Interaction):
        """Show module-specific nickname settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –º–æ–¥—É–ª—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        modules = {
            'dismissal': '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
            'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
            'promotion': '–ü–æ–≤—ã—à–µ–Ω–∏–µ',
            'demotion': '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        }
        
        # Show current settings for each module
        module_status = []
        for module_id, module_name in modules.items():
            is_enabled = module_settings.get(module_id, True)  # Default enabled
            status_emoji = "‚úÖ" if is_enabled else "‚ùå"
            module_status.append(f"{status_emoji} **{module_name}**")
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            value="\n".join(module_status),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:",
            value=(
                "‚Ä¢ **–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏\n"
                "‚Ä¢ **–ü–µ—Ä–µ–≤–æ–¥** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –¥—Ä—É–≥–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ\n"
                "‚Ä¢ **–ü–æ–≤—ã—à–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/–∑–≤–∞–Ω–∏–∏\n"
                "‚Ä¢ **–ü–æ–Ω–∏–∂–µ–Ω–∏–µ** - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏/–∑–≤–∞–Ω–∏–∏"
            ),
            inline=False
        )
        
        view = ModuleNicknameSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_format_settings(self, interaction: discord.Interaction):
        """Show nickname format settings"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        format_support = nickname_settings.get('format_support', {})
        
        embed = discord.Embed(
            title="üé® –§–æ—Ä–º–∞—Ç—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        formats = {
            'standard_with_subgroup': ('–° –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏', '–†–û–∏–û[–ü–ì] | –°—Ç. –õ-—Ç | –í–∏–∫—Ç–æ—Ä –í–µ—Ä–ø–æ–≤'),
            'positional_with_subgroup': ('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏', '–ì–®[–ê–¢] | –ó–∞–º. –ö–æ–º. | –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞'),
            'auto_detect_positions': ('–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π vs –∑–≤–∞–Ω–∏–π')
        }
        
        format_status = []
        for format_id, (format_name, example) in formats.items():
            is_enabled = format_support.get(format_id, True)
            status_emoji = "‚úÖ" if is_enabled else "‚ùå"
            format_status.append(f"{status_emoji} **{format_name}**\n    `{example}`")
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            value="\n\n".join(format_status),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤:",
            value=(
                "‚Ä¢ **–° –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ [–ü–ì], [–ê–¢]\n"
                "‚Ä¢ **–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏** - –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ + –ø–æ–¥–≥—Ä—É–ø–ø—ã\n"
                "‚Ä¢ **–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π** - —É–º–Ω–æ–µ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏ –∑–≤–∞–Ω–∏–π"
            ),
            inline=False
        )
        
        view = FormatSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_positions_management(self, interaction: discord.Interaction):
        """Show positions management interface"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        known_positions = nickname_settings.get('known_positions', [])
        
        embed = discord.Embed(
            title="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏",
            description="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name=f"–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ ({len(known_positions)}):",
            value=", ".join(f"`{pos}`" for pos in known_positions) if known_positions else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç",
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:",
            value=(
                "–î–æ–ª–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∑–≤–∞–Ω–∏–π —Ç–µ–º, —á—Ç–æ –æ–Ω–∏:\n"
                "‚Ä¢ –ù–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤ –∑–≤–∞–Ω–∏–∏\n"
                "‚Ä¢ –ò–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–ù–∞—á., –ó–∞–º., –ö–æ–º.)\n"
                "‚Ä¢ –û–±–æ–∑–Ω–∞—á–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –Ω–µ –∏–µ—Ä–∞—Ä—Ö–∏—é"
            ),
            inline=False
        )
        
        view = PositionsManagementView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_template_editor(self, interaction: discord.Interaction):
        """Show template editor interface"""
        embed = discord.Embed(
            title="üîß –†–µ–¥–∞–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:",
            value=(
                "‚Ä¢ **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π** - `–ü–û–î–† | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è`\n"
                "‚Ä¢ **–° –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏** - `–ü–û–î–†[–ü–ì] | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è`\n"
                "‚Ä¢ **–° –Ω–æ–º–µ—Ä–∞–º–∏** - `–ü–û–î–†[1] | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è`\n"
                "‚Ä¢ **–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π** - `–ü–û–î–† | –î–û–õ–ñ–ù–û–°–¢–¨ | –ò–º—è –§–∞–º–∏–ª–∏—è`\n"
                "‚Ä¢ **–ü—Ä–æ—Å—Ç–æ–π** - `–ò–º—è –§–∞–º–∏–ª–∏—è`"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞:",
            value=(
                "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏\n"
                "‚Ä¢ –£–∫–∞–∑–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ/–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"
            ),
            inline=False
        )
        
        view = TemplateEditorView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class GlobalNicknameSettingsView(NicknameBaseView):
    """View for global nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(GlobalToggleButton())


class DepartmentNicknameSettingsView(NicknameBaseView):
    """View for department-specific nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(DepartmentNicknameSelect())


class ModuleNicknameSettingsView(NicknameBaseView):
    """View for module-specific nickname settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(ModuleNicknameSelect())


class GlobalToggleButton(ui.Button):
    """Button to toggle global nickname replacement"""
    
    def __init__(self):
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        is_enabled = nickname_settings.get('enabled', True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id="toggle_global_nickname"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement'].get('enabled', True)
        config['nickname_auto_replacement']['enabled'] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['enabled']
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = GlobalNicknameSettingsView()
        await interaction.response.edit_message(embed=embed, view=view)


class DepartmentNicknameSelect(ui.Select):
    """Select for department-specific nickname settings"""
    
    def __init__(self):
        departments = DepartmentManager.get_all_departments()
        
        options = []
        for dept_id, dept_data in departments.items():
            dept_name = dept_data.get('name', dept_id)
            options.append(discord.SelectOption(
                label=dept_name,
                description=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è {dept_name}",
                value=dept_id
            ))
        
        if not options:
            options.append(discord.SelectOption(
                label="–ù–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
                description="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                value="none"
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="department_nickname_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_dept = self.values[0]
        
        if selected_dept == "none":
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, view=None, ephemeral=True)
            return
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        
        departments = DepartmentManager.get_all_departments()
        dept_name = departments.get(selected_dept, {}).get('name', selected_dept)
        is_enabled = department_settings.get(selected_dept, True)
        
        embed = discord.Embed(
            title=f"üè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {dept_name}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {dept_name}.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞: **{status_text}**",
            inline=False
        )
        
        view = DepartmentToggleView(selected_dept, dept_name)
        await interaction.response.edit_message(embed=embed, view=view)


class ModuleNicknameSelect(ui.Select):
    """Select for module-specific nickname settings"""
    
    def __init__(self):
        modules = {
            'dismissal': ('–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ', 'üìã'),
            'transfer': ('–ü–µ—Ä–µ–≤–æ–¥', 'üîÑ'),
            'promotion': ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '‚¨ÜÔ∏è'),
            'demotion': ('–ü–æ–Ω–∏–∂–µ–Ω–∏–µ', '‚¨áÔ∏è')
        }
        
        options = []
        for module_id, (module_name, emoji) in modules.items():
            options.append(discord.SelectOption(
                label=module_name,
                description=f"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {module_name.lower()}",
                emoji=emoji,
                value=module_id
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="module_nickname_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_module = self.values[0]
        
        modules = {
            'dismissal': '–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ',
            'transfer': '–ü–µ—Ä–µ–≤–æ–¥',
            'promotion': '–ü–æ–≤—ã—à–µ–Ω–∏–µ',
            'demotion': '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
        }
        
        module_name = modules.get(selected_module, selected_module)
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        is_enabled = module_settings.get(selected_module, True)
        
        embed = discord.Embed(
            title=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è: {module_name}",
            description=f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {module_name.lower()}.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed.add_field(
            name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:",
            value=f"{status_emoji} –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞: **{status_text}**",
            inline=False
        )
        
        view = ModuleToggleView(selected_module, module_name)
        await interaction.response.edit_message(embed=embed, view=view)


class DepartmentToggleView(NicknameBaseView):
    """View for toggling department nickname settings"""
    
    def __init__(self, dept_id, dept_name):
        super().__init__()
        self.dept_id = dept_id
        self.dept_name = dept_name
        self.add_item(DepartmentToggleButton(dept_id, dept_name))


class ModuleToggleView(NicknameBaseView):
    """View for toggling module nickname settings"""
    
    def __init__(self, module_id, module_name):
        super().__init__()
        self.module_id = module_id
        self.module_name = module_name
        self.add_item(ModuleToggleButton(module_id, module_name))


class DepartmentToggleButton(ui.Button):
    """Button to toggle department-specific nickname replacement"""
    
    def __init__(self, dept_id, dept_name):
        self.dept_id = dept_id
        self.dept_name = dept_name
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        department_settings = nickname_settings.get('departments', {})
        is_enabled = department_settings.get(dept_id, True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id=f"toggle_dept_{dept_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'departments' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['departments'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement']['departments'].get(self.dept_id, True)
        config['nickname_auto_replacement']['departments'][self.dept_id] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['departments'][self.dept_id]
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è {self.dept_name} {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = DepartmentToggleView(self.dept_id, self.dept_name)
        await interaction.response.edit_message(embed=embed, view=view)


class ModuleToggleButton(ui.Button):
    """Button to toggle module-specific nickname replacement"""
    
    def __init__(self, module_id, module_name):
        self.module_id = module_id
        self.module_name = module_name
        
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        module_settings = nickname_settings.get('modules', {})
        is_enabled = module_settings.get(module_id, True)
        
        label = "–û—Ç–∫–ª—é—á–∏—Ç—å" if is_enabled else "–í–∫–ª—é—á–∏—Ç—å"
        style = discord.ButtonStyle.danger if is_enabled else discord.ButtonStyle.success
        emoji = "‚ùå" if is_enabled else "‚úÖ"
        
        super().__init__(
            label=label,
            style=style,
            emoji=emoji,
            custom_id=f"toggle_module_{module_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # Initialize nickname settings if not exists
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'modules' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['modules'] = {}
        
        # Toggle the setting
        current_state = config['nickname_auto_replacement']['modules'].get(self.module_id, True)
        config['nickname_auto_replacement']['modules'][self.module_id] = not current_state
        
        save_config(config)
        
        new_state = config['nickname_auto_replacement']['modules'][self.module_id]
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π {self.module_name.lower()} {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        # Update the view with new button state
        view = ModuleToggleView(self.module_id, self.module_name)
        await interaction.response.edit_message(embed=embed, view=view)


# Main function to show nickname settings
async def show_nickname_settings_overview(interaction: discord.Interaction):
    """Show the main nickname settings overview"""
    embed = discord.Embed(
        title="üè∑Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤",
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø—Ä–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.",
        color=discord.Color.blue(),
        timestamp=discord.utils.utcnow()
    )
    
    config = load_config()
    nickname_settings = config.get('nickname_auto_replacement', {})
    global_enabled = nickname_settings.get('enabled', True)
    
    status_emoji = "‚úÖ" if global_enabled else "‚ùå"
    status_text = "–í–∫–ª—é—á–µ–Ω–∞" if global_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–∞"
    
    embed.add_field(
        name="–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:",
        value=f"{status_emoji} **{status_text}**",
        inline=True
    )
    
    embed.add_field(
        name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        value=(
            "‚Ä¢ **–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** - –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\n"
            "‚Ä¢ **–ü–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
            "‚Ä¢ **–ü–æ –º–æ–¥—É–ª—è–º** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π\n"
            "‚Ä¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏** - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π\n"
            "‚Ä¢ **–§–æ—Ä–º–∞—Ç—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"
        ),
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:",
        value=(
            "–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ "
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ "
            "–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫."
        ),
        inline=False
    )
    
    view = NicknameSettingsView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


# ============================================================================
# üé® VIEWS –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–û–†–ú–ê–¢–ê–ú–ò –ò –î–û–õ–ñ–ù–û–°–¢–Ø–ú–ò
# ============================================================================

class FormatSettingsView(NicknameBaseView):
    """View for format settings"""
    
    def __init__(self):
        super().__init__()
        self.add_item(FormatSettingsSelect())


class PositionsManagementView(NicknameBaseView):
    """View for positions management"""
    
    def __init__(self):
        super().__init__()
        self.add_item(PositionsManagementSelect())


class TemplateEditorView(NicknameBaseView):
    """View for template editing selection"""
    
    def __init__(self):
        super().__init__()
        self.add_item(TemplateEditorSelect())
    """View for template editing"""
    
    def __init__(self):
        super().__init__()
        self.add_item(TemplateEditorSelect())


class FormatSettingsSelect(ui.Select):
    """Select for format settings"""
    
    def __init__(self):
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        format_support = nickname_settings.get('format_support', {})
        
        formats = {
            'standard_with_subgroup': ('–° –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏', 'üîó'),
            'positional_with_subgroup': ('–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏', 'üìã'),
            'auto_detect_positions': ('–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π', 'ü§ñ')
        }
        
        options = []
        for format_id, (format_name, emoji) in formats.items():
            is_enabled = format_support.get(format_id, True)
            status = "‚úÖ" if is_enabled else "‚ùå"
            options.append(discord.SelectOption(
                label=f"{status} {format_name}",
                description=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ {format_name.lower()}",
                emoji=emoji,
                value=format_id
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="format_settings_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_format = self.values[0]
        
        config = load_config()
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'format_support' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['format_support'] = {}
        
        # Toggle the format
        current_state = config['nickname_auto_replacement']['format_support'].get(selected_format, True)
        config['nickname_auto_replacement']['format_support'][selected_format] = not current_state
        
        save_config(config)
        
        formats = {
            'standard_with_subgroup': '–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–≥—Ä—É–ø–ø',
            'positional_with_subgroup': '–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏',
            'auto_detect_positions': '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π'
        }
        
        format_name = formats.get(selected_format, selected_format)
        new_state = config['nickname_auto_replacement']['format_support'][selected_format]
        status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_state else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ '{format_name}' {status_text}.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        view = FormatSettingsView()
        await interaction.response.edit_message(embed=embed, view=view)


class PositionsManagementSelect(ui.Select):
    """Select for positions management"""
    
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
                description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫",
                emoji="‚ûï",
                value="add_position"
            ),
            discord.SelectOption(
                label="–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
                description="–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞",
                emoji="‚ûñ",
                value="remove_position"
            ),
            discord.SelectOption(
                label="–°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º",
                description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                emoji="üîÑ",
                value="reset_positions"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="positions_management_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_action = self.values[0]
        
        if selected_action == "add_position":
            await self.show_add_position_modal(interaction)
        elif selected_action == "remove_position":
            await self.show_remove_position_menu(interaction)
        elif selected_action == "reset_positions":
            await self.reset_positions(interaction)
    
    async def show_add_position_modal(self, interaction: discord.Interaction):
        """Show modal to add new position"""
        modal = AddPositionModal()
        await interaction.response.send_modal(modal)
    
    async def show_remove_position_menu(self, interaction: discord.Interaction):
        """Show menu to remove position"""
        config = load_config()
        nickname_settings = config.get('nickname_auto_replacement', {})
        known_positions = nickname_settings.get('known_positions', [])
        
        if not known_positions:
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        embed = discord.Embed(
            title="‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞.",
            color=discord.Color.orange(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:",
            value=", ".join(f"`{pos}`" for pos in known_positions),
            inline=False
        )
        
        view = RemovePositionView(known_positions)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def reset_positions(self, interaction: discord.Interaction):
        """Reset positions to default"""
        default_positions = [
            '–ù–∞—á.',
            '–ù–∞—á. –ø–æ –ö–†',
            '–ó–∞–º.', 
            '–ó–∞–º. –ö–æ–º.',
            '–ö–æ–º.',
            '–ö–æ–º. –ë—Ä–∏–≥',
            '–ù–∞—á. –®—Ç–∞–±–∞',
            '–ù–∞—á. –û—Ç–¥–µ–ª–∞',
            '–ó–∞–º. –ù–∞—á. –û—Ç–¥–µ–ª–∞'
        ]
        
        config = load_config()
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        
        config['nickname_auto_replacement']['known_positions'] = default_positions
        save_config(config)
        
        embed = discord.Embed(
            title="‚úÖ –°–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω",
            description=f"–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º ({len(default_positions)} –ø–æ–∑–∏—Ü–∏–π).",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:",
            value=", ".join(f"`{pos}`" for pos in default_positions),
            inline=False
        )
        
        view = PositionsManagementView()
        await interaction.response.edit_message(embed=embed, view=view)


class AddPositionModal(ui.Modal):
    """Modal for adding new position"""
    
    def __init__(self):
        super().__init__(title="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        
        self.position_input = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞—á. –æ—Ç–¥–µ–ª–∞, –ó–∞–º. –ö–æ–º. –ë—Ä–∏–≥, –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä...",
            min_length=1,
            max_length=50,
            required=True
        )
        self.add_item(self.position_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        new_position = self.position_input.value.strip()
        
        config = load_config()
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'known_positions' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['known_positions'] = []
        
        known_positions = config['nickname_auto_replacement']['known_positions']
        
        # Check if position already exists
        if new_position in known_positions:
            embed = discord.Embed(
                title="‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
                description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å `{new_position}` —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.",
                color=discord.Color.orange()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Add new position
        known_positions.append(new_position)
        config['nickname_auto_replacement']['known_positions'] = known_positions
        save_config(config)
        
        embed = discord.Embed(
            title="‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å `{new_position}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name=f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ ({len(known_positions)}):",
            value=", ".join(f"`{pos}`" for pos in known_positions),
            inline=False
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


class RemovePositionView(NicknameBaseView):
    """View for removing positions"""
    
    def __init__(self, positions):
        super().__init__()
        self.add_item(RemovePositionSelect(positions))


class RemovePositionSelect(ui.Select):
    """Select for removing specific position"""
    
    def __init__(self, positions):
        # Create options for each position
        options = []
        for pos in positions[:25]:  # Discord limit
            options.append(discord.SelectOption(
                label=pos,
                description=f"–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {pos}",
                value=pos
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="remove_position_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        position_to_remove = self.values[0]
        
        config = load_config()
        known_positions = config.get('nickname_auto_replacement', {}).get('known_positions', [])
        
        if position_to_remove in known_positions:
            known_positions.remove(position_to_remove)
            config['nickname_auto_replacement']['known_positions'] = known_positions
            save_config(config)
            
            embed = discord.Embed(
                title="‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞",
                description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å `{position_to_remove}` —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            if known_positions:
                embed.add_field(
                    name=f"–û—Å—Ç–∞–µ—Ç—Å—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π ({len(known_positions)}):",
                    value=", ".join(f"`{pos}`" for pos in known_positions),
                    inline=False
                )
            else:
                embed.add_field(
                    name="–†–µ–∑—É–ª—å—Ç–∞—Ç:",
                    value="–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø—É—Å—Ç.",
                    inline=False
                )
        else:
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–î–æ–ª–∂–Ω–æ—Å—Ç—å `{position_to_remove}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.",
                color=discord.Color.red()
            )
        
        await interaction.response.edit_message(embed=embed, view=None)


class TemplateEditorSelect(ui.Select):
    """Select for template editing"""
    
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã
        templates = {
            'standard': {
                'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
                'description': '–ü–û–î–† | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è', 
                'emoji': 'üìù'
            },
            'standard_with_subgroup': {
                'name': '–§–æ—Ä–º–∞—Ç —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏',
                'description': '–ü–û–î–†[–ü–ì] | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è',
                'emoji': 'üîó'
            },
            'positional': {
                'name': '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç', 
                'description': '–ü–û–î–† | –î–û–õ–ñ–ù–û–°–¢–¨ | –ò–º—è –§–∞–º–∏–ª–∏—è',
                'emoji': 'üìã'
            },
            'simple': {
                'name': '–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç',
                'description': '–ò–º—è –§–∞–º–∏–ª–∏—è',
                'emoji': 'üë§'
            },
            'dismissed': {
                'name': '–§–æ—Ä–º–∞—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏—è',
                'description': '–£–≤–æ–ª–µ–Ω | –ò–º—è –§–∞–º–∏–ª–∏—è', 
                'emoji': 'üì§'
            }
        }
        
        options = []
        for template_id, template_data in templates.items():
            options.append(discord.SelectOption(
                label=template_data['name'],
                description=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {template_data['description']}",
                emoji=template_data['emoji'],
                value=template_id
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="template_editor_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_template = self.values[0]
        await self.show_template_editor_form(interaction, selected_template)
    
    async def show_template_editor_form(self, interaction: discord.Interaction, template_id: str):
        """Show template editor form for specific template"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        config = load_config()
        custom_templates = config.get('nickname_auto_replacement', {}).get('custom_templates', {})
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤
        template_configs = {
            'standard': {
                'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç',
                'example': '–í–ê | –ö–∞–ø–∏—Ç–∞–Ω | –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                'structure': [
                    {'field': 'subdivision', 'name': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 'required': True, 'max_length': 15},
                    {'field': 'separator1', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 1', 'default': '|'},
                    {'field': 'rank', 'name': '–ó–≤–∞–Ω–∏–µ/–î–æ–ª–∂–Ω–æ—Å—Ç—å', 'required': True},
                    {'field': 'separator2', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 2', 'default': '|'},
                    {'field': 'name', 'name': '–ò–º—è –§–∞–º–∏–ª–∏—è', 'required': True}
                ]
            },
            'standard_with_subgroup': {
                'name': '–§–æ—Ä–º–∞—Ç —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏',
                'example': '–†–û–∏–û[–ü–ì] | –°—Ç. –õ-—Ç | –í–∏–∫—Ç–æ—Ä –í–µ—Ä–ø–æ–≤',
                'structure': [
                    {'field': 'subdivision', 'name': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 'required': True, 'max_length': 15},
                    {'field': 'subgroup', 'name': '–ü–æ–¥–≥—Ä—É–ø–ø–∞ [–ü–ì]', 'required': True, 'max_length': 10},
                    {'field': 'separator1', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 1', 'default': '|'},
                    {'field': 'rank', 'name': '–ó–≤–∞–Ω–∏–µ/–î–æ–ª–∂–Ω–æ—Å—Ç—å', 'required': True},
                    {'field': 'separator2', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 2', 'default': '|'},
                    {'field': 'name', 'name': '–ò–º—è –§–∞–º–∏–ª–∏—è', 'required': True}
                ]
            },
            'positional': {
                'name': '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç',
                'example': '–í–ö | –ù–∞—á. –ø–æ –ö–† | –ú–∞–∫—Å–∏–º –î–∞–≤—ã–¥–æ–≤',
                'structure': [
                    {'field': 'subdivision', 'name': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', 'required': True, 'max_length': 15},
                    {'field': 'separator1', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 1', 'default': '|'},
                    {'field': 'position', 'name': '–î–æ–ª–∂–Ω–æ—Å—Ç—å', 'required': True},
                    {'field': 'separator2', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å 2', 'default': '|'},
                    {'field': 'name', 'name': '–ò–º—è –§–∞–º–∏–ª–∏—è', 'required': True}
                ]
            },
            'simple': {
                'name': '–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç',
                'example': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                'structure': [
                    {'field': 'name', 'name': '–ò–º—è –§–∞–º–∏–ª–∏—è', 'required': True}
                ]
            },
            'dismissed': {
                'name': '–§–æ—Ä–º–∞—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏—è',
                'example': '–£–≤–æ–ª–µ–Ω | –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                'structure': [
                    {'field': 'status', 'name': '–°—Ç–∞—Ç—É—Å', 'default': '–£–≤–æ–ª–µ–Ω', 'required': True},
                    {'field': 'separator', 'name': '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å', 'default': '|'},
                    {'field': 'name', 'name': '–ò–º—è –§–∞–º–∏–ª–∏—è', 'required': True}
                ]
            }
        }
        
        if template_id not in template_configs:
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        template_config = template_configs[template_id]
        current_template = custom_templates.get(template_id, {})
        
        embed = discord.Embed(
            title=f"üîß –†–µ–¥–∞–∫—Ç–æ—Ä: {template_config['name']}",
            description=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üìù –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:",
            value=f"`{template_config['example']}`",
            inline=False
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
        structure_text = []
        for i, part in enumerate(template_config['structure'], 1):
            required_mark = "üî¥" if part.get('required') else "üü°"
            max_len = f" (–º–∞–∫—Å. {part['max_length']})" if part.get('max_length') else ""
            default_val = f" = `{part.get('default')}`" if part.get('default') else ""
            
            structure_text.append(f"{required_mark} **{i}. {part['name']}**{max_len}{default_val}")
        
        embed.add_field(
            name="üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —à–∞–±–ª–æ–Ω–∞:",
            value="\n".join(structure_text),
            inline=False
        )
        
        embed.add_field(
            name="üí° –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:",
            value="üî¥ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ  üü° –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ",
            inline=False
        )
        
        view = TemplateEditFormView(template_id, template_config)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class TemplateEditFormView(NicknameBaseView):
    """View for editing specific template"""
    
    def __init__(self, template_id: str, template_config: dict):
        super().__init__()
        self.template_id = template_id
        self.template_config = template_config
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.add_item(EditTemplateButton(template_id, template_config))
        self.add_item(ResetTemplateButton(template_id, template_config))
        self.add_item(TestTemplateButton(template_id))


class EditTemplateButton(ui.Button):
    """Button to edit template structure"""
    
    def __init__(self, template_id: str, template_config: dict):
        self.template_id = template_id
        self.template_config = template_config
        
        super().__init__(
            label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω",
            style=discord.ButtonStyle.primary,
            emoji="‚úèÔ∏è",
            custom_id=f"edit_template_{template_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        modal = TemplateEditModal(self.template_id, self.template_config)
        await interaction.response.send_modal(modal)


class ResetTemplateButton(ui.Button):
    """Button to reset template to default"""
    
    def __init__(self, template_id: str, template_config: dict):
        self.template_id = template_id
        self.template_config = template_config
        
        super().__init__(
            label="–°–±—Ä–æ—Å –∫ —É–º–æ–ª—á–∞–Ω–∏—é",
            style=discord.ButtonStyle.danger,
            emoji="üîÑ",
            custom_id=f"reset_template_{template_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        config = load_config()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—è—Å—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'nickname_auto_replacement' not in config:
            config['nickname_auto_replacement'] = {}
        if 'custom_templates' not in config['nickname_auto_replacement']:
            config['nickname_auto_replacement']['custom_templates'] = {}
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é
        if self.template_id in config['nickname_auto_replacement']['custom_templates']:
            del config['nickname_auto_replacement']['custom_templates'][self.template_id]
        
        save_config(config)
        
        embed = discord.Embed(
            title="‚úÖ –®–∞–±–ª–æ–Ω —Å–±—Ä–æ—à–µ–Ω",
            description=f"–®–∞–±–ª–æ–Ω '{self.template_config['name']}' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        
        await interaction.response.edit_message(embed=embed, view=None)


class TestTemplateButton(ui.Button):
    """Button to test template with examples"""
    
    def __init__(self, template_id: str):
        self.template_id = template_id
        
        super().__init__(
            label="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
            style=discord.ButtonStyle.secondary,
            emoji="üß™",
            custom_id=f"test_template_{template_id}"
        )
    
    async def callback(self, interaction: discord.Interaction):
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
        embed = discord.Embed(
            title="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
            description="–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.",
            color=discord.Color.orange()
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)


class TemplateEditModal(ui.Modal):
    """Modal for editing template parameters"""
    
    def __init__(self, template_id: str, template_config: dict):
        self.template_id = template_id
        self.template_config = template_config
        
        super().__init__(title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {template_config['name']}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = load_config()
        custom_templates = config.get('nickname_auto_replacement', {}).get('custom_templates', {})
        current_settings = custom_templates.get(template_id, {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
        if template_id == 'dismissed':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
            self.status_text = ui.TextInput(
                label="–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞",
                placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –£–≤–æ–ª–µ–Ω",
                default=current_settings.get('status_text', '–£–≤–æ–ª–µ–Ω'),
                max_length=20,
                required=False
            )
            self.add_item(self.status_text)
            
            self.separator_input = ui.TextInput(
                label="–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø—Ä–æ–±–µ–ª—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: |",
                default=(current_settings.get('separator') or '|').strip(),
                max_length=10,
                required=False
            )
            self.add_item(self.separator_input)
            
            # –ü–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö
            self.name_chars = ui.TextInput(
                label="–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö",
                placeholder="–ê-–Ø, –∞-—è, A-Z, a-z, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞, –¥–µ—Ñ–∏—Å",
                default=current_settings.get('name_chars', '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s'),
                max_length=100,
                required=False,
                style=discord.TextStyle.paragraph
            )
            self.add_item(self.name_chars)
            
        elif template_id in ['standard', 'standard_with_subgroup', 'positional']:
            # –ï–¥–∏–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –Ω–∏–∫–Ω–µ–π–º–∞
            self.separator_input = ui.TextInput(
                label="–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø—Ä–æ–±–µ–ª—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: |",
                default=(current_settings.get('separator') or current_settings.get('separator1') or '|').strip(),
                max_length=10,
                required=False
            )
            self.add_item(self.separator_input)
            
            if template_id == 'standard_with_subgroup':
                self.subgroup_brackets = ui.TextInput(
                    label="–°–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–¥–≥—Ä—É–ø–ø—ã",
                    placeholder="–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: [ ]",
                    default=current_settings.get('subgroup_brackets', '[ ]'),
                    max_length=5,
                    required=False
                )
                self.add_item(self.subgroup_brackets)
        
            # –ü–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö
            self.name_chars = ui.TextInput(
                label="–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö",
                placeholder="–ê-–Ø, –∞-—è, A-Z, a-z, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞, –¥–µ—Ñ–∏—Å",
                default=current_settings.get('name_chars', '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s'),
                max_length=100,
                required=False,
                style=discord.TextStyle.paragraph
            )
            self.add_item(self.name_chars)
            
            # –ü–æ–ª–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö
            self.subdivision_chars = ui.TextInput(
                label="–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö",
                placeholder="–ê-–Ø, –∞-—è, A-Z, —Ü–∏—Ñ—Ä—ã",
                default=current_settings.get('subdivision_chars', '–ê-–Ø–ÅA-Z–∞-—è—ë\\d'),
                max_length=50,
                required=False
            )
            self.add_item(self.subdivision_chars)
            
        elif template_id == 'simple':
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã –∏–º–µ–Ω
            self.name_chars = ui.TextInput(
                label="–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö",
                placeholder="–ê-–Ø, –∞-—è, A-Z, a-z, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞, –¥–µ—Ñ–∏—Å",
                default=current_settings.get('name_chars', '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s'),
                max_length=100,
                required=False,
                style=discord.TextStyle.paragraph
            )
            self.add_item(self.name_chars)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            config = load_config()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'nickname_auto_replacement' not in config:
                config['nickname_auto_replacement'] = {}
            if 'custom_templates' not in config['nickname_auto_replacement']:
                config['nickname_auto_replacement']['custom_templates'] = {}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            template_settings = {}
            
            if self.template_id == 'dismissed':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
                if hasattr(self, 'status_text'):
                    template_settings['status_text'] = self.status_text.value or '–£–≤–æ–ª–µ–Ω'
                
                if hasattr(self, 'separator_input'):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è - –æ–Ω–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    template_settings['separator'] = (self.separator_input.value or '|').strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω
                if hasattr(self, 'name_chars'):
                    template_settings['name_chars'] = self.name_chars.value or '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s'
                    
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤
                if hasattr(self, 'separator_input'):
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è - –æ–Ω–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    separator_value = (self.separator_input.value or '|').strip()
                    template_settings['separator'] = separator_value
                
                if hasattr(self, 'subgroup_brackets'):
                    template_settings['subgroup_brackets'] = self.subgroup_brackets.value or '[ ]'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã
                if hasattr(self, 'name_chars'):
                    template_settings['name_chars'] = self.name_chars.value or '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s'
                
                if hasattr(self, 'subdivision_chars'):
                    template_settings['subdivision_chars'] = self.subdivision_chars.value or '–ê-–Ø–ÅA-Z–∞-—è—ë\\d'
            
            config['nickname_auto_replacement']['custom_templates'][self.template_id] = template_settings
            save_config(config)
            
            embed = discord.Embed(
                title="‚úÖ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ '{self.template_config['name']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            changes = []
            for key, value in template_settings.items():
                if key == 'separator':
                    changes.append(f"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: `{value}`")
                elif key == 'subgroup_brackets':
                    changes.append(f"–°–∫–æ–±–∫–∏ –ø–æ–¥–≥—Ä—É–ø–ø—ã: `{value}`")
                elif key == 'name_chars':
                    changes.append(f"–°–∏–º–≤–æ–ª—ã –∏–º–µ–Ω: `{value}`")
                elif key == 'subdivision_chars':
                    changes.append(f"–°–∏–º–≤–æ–ª—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: `{value}`")
                elif key == 'status_text':
                    changes.append(f"–°—Ç–∞—Ç—É—Å —É–≤–æ–ª—å–Ω–µ–Ω–∏—è: `{value}`")
                    changes.append(f"–°–∏–º–≤–æ–ª—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: `{value}`")
            
            if changes:
                embed.add_field(
                    name="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                    value="\n".join(changes),
                    inline=False
                )
            
            embed.add_field(
                name="‚ö†Ô∏è –í–∞–∂–Ω–æ:",
                value="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞.",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            embed = discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)