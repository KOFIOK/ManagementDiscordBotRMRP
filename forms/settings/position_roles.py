"""
Simple Position Settings Form
Just add positions and assign Discord roles
"""

import discord
from discord import ui
from utils.database_manager.position_manager import position_manager

class PositionSettingsView(ui.View):
    """Simple position settings view"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
        min_values=1,
        max_values=1,
        options=[]
    )
    async def position_select(self, interaction: discord.Interaction, select: ui.Select):
        """Handle position selection"""
        position_id = int(select.values[0])
        
        # Get position data
        positions = position_manager.get_all_positions()
        position_data = next((p for p in positions if p['id'] == position_id), None)
        
        if not position_data:
            await interaction.response.send_message("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        
        # Show management view
        view = PositionManagementView(position_id, position_data)
        
        current_role = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        if position_data.get('role_id'):
            role = interaction.guild.get_role(int(position_data['role_id']))
            current_role = role.mention if role else "‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        embed = discord.Embed(
            title=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞: {position_data.get('name')}",
            description=f"**–†–æ–ª—å Discord:** {current_role}",
            color=discord.Color.blue()
        )
        
        await interaction.response.edit_message(embed=embed, view=view)
    
    @ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.success, emoji="‚ûï")
    async def add_position(self, interaction: discord.Interaction, button: ui.Button):
        """Add new position"""
        modal = AddPositionModal()
        await interaction.response.send_modal(modal)
    
    @ui.button(label="–û–±–Ω–æ–≤–∏—Ç—å", style=discord.ButtonStyle.secondary, emoji="üîÑ")
    async def refresh(self, interaction: discord.Interaction, button: ui.Button):
        """Refresh list"""
        await self.update_position_options(interaction.guild)
        embed = await create_position_settings_embed()
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def update_position_options(self, guild: discord.Guild):
        """Update position options"""
        positions = position_manager.get_all_positions()
        options = []
        
        for position in positions:
            name = position.get('name', f'Position {position["id"]}')
            
            # Check role status
            role_status = "‚ùå"
            if position.get('role_id'):
                role = guild.get_role(int(position['role_id']))
                role_status = "‚úÖ" if role else "‚ö†Ô∏è"
            
            options.append(discord.SelectOption(
                label=name[:95],  # Discord limit
                value=str(position['id']),
                description=f"{role_status} ID: {position['id']}",
                emoji="üìã"
            ))
        
        if not options:
            options.append(discord.SelectOption(
                label="–ù–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
                value="none",
                description="–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                emoji="‚ùå"
            ))
        
        self.position_select.options = options[:25]

class PositionManagementView(ui.View):
    """Manage individual position"""
    
    def __init__(self, position_id: int, position_data: dict):
        super().__init__(timeout=300)
        self.position_id = position_id
        self.position_data = position_data
    
    @ui.button(label="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", style=discord.ButtonStyle.primary, emoji="üé≠")
    async def assign_role(self, interaction: discord.Interaction, button: ui.Button):
        """Assign Discord role"""
        modal = AssignRoleModal(self.position_id, self.position_data)
        await interaction.response.send_modal(modal)
    
    @ui.button(label="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å", style=discord.ButtonStyle.danger, emoji="üóëÔ∏è")
    async def remove_role(self, interaction: discord.Interaction, button: ui.Button):
        """Remove Discord role"""
        success, message = position_manager.update_position_role(self.position_id, None)
        
        color = discord.Color.green() if success else discord.Color.red()
        emoji = "‚úÖ" if success else "‚ùå"
        
        embed = discord.Embed(
            title=f"{emoji} {'–†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞' if success else '–û—à–∏–±–∫–∞'}",
            description=message,
            color=color
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @ui.button(label="–£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def delete_position(self, interaction: discord.Interaction, button: ui.Button):
        """Delete position"""
        modal = DeletePositionModal(self.position_id, self.position_data)
        await interaction.response.send_modal(modal)
    
    @ui.button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.secondary, emoji="‚¨ÖÔ∏è")
    async def back(self, interaction: discord.Interaction, button: ui.Button):
        """Go back"""
        view = PositionSettingsView()
        await view.update_position_options(interaction.guild)
        embed = await create_position_settings_embed()
        await interaction.response.edit_message(embed=embed, view=view)

class AddPositionModal(ui.Modal):
    """Add new position modal"""
    
    def __init__(self):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        
        self.role_input = ui.TextInput(
            label="–†–æ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            placeholder="ID —Ä–æ–ª–∏, @—Ä–æ–ª—å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏...",
            required=True,
            max_length=200
        )
        
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle submission"""
        # Extract role info
        role_name, role_id = position_manager.extract_role_name_from_mention(
            self.role_input.value, 
            interaction.guild
        )
        
        if not role_name:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.", ephemeral=True)
            return
        
        # Add to database
        success, message = position_manager.add_position_to_database(role_name, role_id)
        
        color = discord.Color.green() if success else discord.Color.red()
        emoji = "‚úÖ" if success else "‚ùå"
        
        embed = discord.Embed(
            title=f"{emoji} {'–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞' if success else '–û—à–∏–±–∫–∞'}",
            description=message,
            color=color
        )
        
        if success and role_id:
            role = interaction.guild.get_role(role_id)
            if role:
                embed.add_field(name="Discord —Ä–æ–ª—å", value=role.mention, inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

class AssignRoleModal(ui.Modal):
    """Assign role modal"""
    
    def __init__(self, position_id: int, position_data: dict):
        super().__init__(title=f"–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å: {position_data.get('name')}")
        self.position_id = position_id
        
        self.role_input = ui.TextInput(
            label="Discord —Ä–æ–ª—å",
            placeholder="ID —Ä–æ–ª–∏ –∏–ª–∏ @—Ä–æ–ª—å...",
            required=True,
            max_length=50
        )
        
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle assignment"""
        _, role_id = position_manager.extract_role_name_from_mention(
            self.role_input.value, 
            interaction.guild
        )
        
        if not role_id:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ä–æ–ª–∏.", ephemeral=True)
            return
        
        role = interaction.guild.get_role(role_id)
        if not role:
            await interaction.response.send_message("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
            return
        
        success, message = position_manager.update_position_role(self.position_id, role_id)
        
        color = discord.Color.green() if success else discord.Color.red()
        emoji = "‚úÖ" if success else "‚ùå"
        
        embed = discord.Embed(
            title=f"{emoji} {'–†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞' if success else '–û—à–∏–±–∫–∞'}",
            description=message,
            color=color
        )
        
        if success:
            embed.add_field(name="–†–æ–ª—å", value=role.mention, inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

class DeletePositionModal(ui.Modal):
    """Delete position modal"""
    
    def __init__(self, position_id: int, position_data: dict):
        super().__init__(title=f"–£–¥–∞–ª–∏—Ç—å: {position_data.get('name')}")
        self.position_id = position_id
        
        self.confirmation = ui.TextInput(
            label="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            placeholder="–í–≤–µ–¥–∏—Ç–µ '–£–î–ê–õ–ò–¢–¨'...",
            required=True,
            max_length=10
        )
        
        self.add_item(self.confirmation)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle deletion"""
        if self.confirmation.value.upper() != "–£–î–ê–õ–ò–¢–¨":
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.", ephemeral=True)
            return
        
        success, message = position_manager.remove_position_from_database(self.position_id)
        
        color = discord.Color.green() if success else discord.Color.red()
        emoji = "‚úÖ" if success else "‚ùå"
        
        embed = discord.Embed(
            title=f"{emoji} {'–î–æ–ª–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' if success else '–û—à–∏–±–∫–∞'}",
            description=message,
            color=color
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

async def create_position_settings_embed() -> discord.Embed:
    """Create settings embed"""
    positions_count = len(position_manager.get_all_positions())
    
    embed = discord.Embed(
        title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
        description=(
            "**–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:**\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–µ—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n"
            "‚Ä¢ –ù–∞–∑–Ω–∞—á–∞–µ—Ç–µ Discord —Ä–æ–ª—å\n"
            "‚Ä¢ –†–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n\n"
            f"**–í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:** {positions_count}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é."
        ),
        color=discord.Color.blue()
    )
    
    return embed