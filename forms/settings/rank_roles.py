"""
Rank roles configuration management
"""
import discord
from discord import ui
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView, BaseSettingsModal


class RankRoleModal(BaseSettingsModal):
    """Modal for adding/editing rank roles"""
    
    def __init__(self, edit_rank=None):
        self.edit_rank = edit_rank
        title = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–≤–∞–Ω–∏–µ: {edit_rank}" if edit_rank else "–î–æ–±–∞–≤–∏—Ç—å –∑–≤–∞–Ω–∏–µ"
        super().__init__(title=title)
        
        config = load_config()
        rank_roles = config.get('rank_roles', {})
        
        # If editing, get current values
        current_role_id = ""
        current_rank_level = ""
        if edit_rank and edit_rank in rank_roles:
            rank_data = rank_roles[edit_rank]
            if isinstance(rank_data, dict):
                current_role_id = str(rank_data.get('role_id', ''))
                current_rank_level = str(rank_data.get('rank_level', ''))
            else:
                # Old format - just role_id
                current_role_id = str(rank_data)
        
        self.rank_name = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†—è–¥–æ–≤–æ–π, –ö–∞–ø–∏—Ç–∞–Ω, –ì–µ–Ω–µ—Ä–∞–ª-–º–∞–π–æ—Ä",
            min_length=2,
            max_length=50,
            required=True,
            default=edit_rank if edit_rank else ""
        )
        self.add_item(self.rank_name)
        
        self.role_id = ui.TextInput(
            label="ID —Ä–æ–ª–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @–†—è–¥–æ–≤–æ–π –∏–ª–∏ 1246114675574313021",
            min_length=1,
            max_length=100,
            required=True,
            default=current_role_id
        )
        self.add_item(self.role_id)
        
        self.rank_level = ui.TextInput(
            label="–†–∞–Ω–≥ –∑–≤–∞–Ω–∏—è (—á–∏—Å–ª–æ)",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1 –¥–ª—è –†—è–¥–æ–≤–æ–≥–æ, 12 –¥–ª—è –ö–∞–ø–∏—Ç–∞–Ω–∞",
            min_length=1,
            max_length=3,
            required=True,
            default=current_rank_level
        )
        self.add_item(self.rank_level)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            rank_name = self.rank_name.value.strip()
            role_input = self.role_id.value.strip()
            rank_level_input = self.rank_level.value.strip()
            
            # Parse and validate rank level
            try:
                rank_level = int(rank_level_input)
                if rank_level < 1 or rank_level > 50:
                    await self.send_error_message(
                        interaction,
                        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥",
                        "–†–∞–Ω–≥ –∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 50."
                    )
                    return
            except ValueError:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–Ω–≥–∞",
                    "–†–∞–Ω–≥ –∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
                )
                return
            
            # Parse role ID
            role_id = self._parse_role_input(role_input)
            if not role_id:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–ª–∏",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–æ–ª—å –∏–∑ '{role_input}'"
                )
                return
            
            # Verify role exists
            role = interaction.guild.get_role(role_id)
            if not role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–†–æ–ª—å —Å ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
                return
            
            # Check for duplicate ranks
            config = load_config()
            if 'rank_roles' not in config:
                config['rank_roles'] = {}
                
            for existing_rank, existing_data in config['rank_roles'].items():
                if existing_rank != self.edit_rank:  # Skip current rank when editing
                    existing_rank_level = existing_data.get('rank_level', 0) if isinstance(existing_data, dict) else 0
                    if existing_rank_level == rank_level:
                        await self.send_error_message(
                            interaction,
                            "–î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è —Ä–∞–Ω–≥",
                            f"–†–∞–Ω–≥ {rank_level} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–≤–∞–Ω–∏—è '{existing_rank}'. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–Ω–≥."
                        )
                        return
            
            # If editing and name changed, remove old entry
            if self.edit_rank and self.edit_rank != rank_name and self.edit_rank in config['rank_roles']:
                del config['rank_roles'][self.edit_rank]
            
            # Save new format with rank hierarchy
            config['rank_roles'][rank_name] = {
                'role_id': role_id,
                'rank_level': rank_level
            }
            save_config(config)
            
            # Success message
            action = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ" if self.edit_rank else "–¥–æ–±–∞–≤–ª–µ–Ω–æ"
            embed = discord.Embed(
                title="‚úÖ –ó–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ",
                description=f"–ó–≤–∞–Ω–∏–µ **{rank_name}** {action}!",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(
                name="üìã –î–µ—Ç–∞–ª–∏:",
                value=f"**–ó–≤–∞–Ω–∏–µ:** {rank_name}\n**–†–æ–ª—å:** {role.mention} (`{role_id}`)\n**–†–∞–Ω–≥:** {rank_level}",
                inline=False
            )
            
            view = RankRolesConfigView()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏—è: {e}"
            )
    
    def _parse_role_input(self, role_input: str) -> int:
        """Parse role input and extract role ID"""
        try:
            # Remove mention brackets if present
            role_input = role_input.strip()
            if role_input.startswith('<@&') and role_input.endswith('>'):
                role_input = role_input[3:-1]
            
            # Try to convert to int
            return int(role_input)
        except ValueError:
            return None


class KeyRoleModal(BaseSettingsModal):
    """Modal for setting the key role for rank synchronization"""
    
    def __init__(self):
        super().__init__(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª–∏")
        
        config = load_config()
        current_key_role_id = config.get('rank_sync_key_role')
        current_key_role_display = str(current_key_role_id) if current_key_role_id else ""
        
        self.role_input = ui.TextInput(
            label="ID —Ä–æ–ª–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: @–í–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏–µ –∏–ª–∏ 1234567890123456789",
            min_length=1,
            max_length=100,
            required=True,
            default=current_key_role_display
        )
        self.add_item(self.role_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            role_input = self.role_input.value.strip()
            
            # Parse role ID
            role_id = self._parse_role_input(role_input)
            if not role_id:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–ª–∏",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–æ–ª—å –∏–∑ '{role_input}'"
                )
                return
            
            # Verify role exists
            role = interaction.guild.get_role(role_id)
            if not role:
                await self.send_error_message(
                    interaction,
                    "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    f"–†–æ–ª—å —Å ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
                )
                return
            
            # Save to config
            config = load_config()
            config['rank_sync_key_role'] = role_id
            save_config(config)
            
            embed = discord.Embed(
                title="‚úÖ –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                description=f"–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–æ–ª—å—é **{role.name}**",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(
                name="üîë –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                value=f"{role.mention} (`{role_id}`)",
                inline=False
            )
            embed.add_field(
                name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
                value=(
                    "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ–∑ —ç—Ç–æ–π —Ä–æ–ª–∏ –Ω–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–≤–∞–Ω–∏–π.\n"
                    "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö."
                ),
                inline=False
            )
            
            view = RankRolesConfigView()
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª–∏: {e}"
            )
    
    def _parse_role_input(self, role_input: str) -> int:
        """Parse role input and extract role ID"""
        try:
            # Remove mention brackets if present
            role_input = role_input.strip()
            if role_input.startswith('<@&') and role_input.endswith('>'):
                role_input = role_input[3:-1]
            
            # Try to convert to int
            return int(role_input)
        except ValueError:
            return None


class RankRoleDeleteConfirmModal(BaseSettingsModal):
    """Confirmation modal for deleting rank roles"""
    
    def __init__(self, rank_name: str):
        self.rank_name = rank_name
        super().__init__(title=f"–£–¥–∞–ª–∏—Ç—å –∑–≤–∞–Ω–∏–µ: {rank_name}")
        
        self.confirmation = ui.TextInput(
            label=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            placeholder=f"{rank_name}",
            min_length=len(rank_name),
            max_length=len(rank_name) + 10,
            required=True
        )
        self.add_item(self.confirmation)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            if self.confirmation.value.strip() != self.rank_name:
                await self.send_error_message(
                    interaction,
                    "–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{self.rank_name}'"
                )
                return
            
            # Remove from config
            config = load_config()
            if 'rank_roles' in config and self.rank_name in config['rank_roles']:
                del config['rank_roles'][self.rank_name]
                save_config(config)
                
                embed = discord.Embed(
                    title="‚úÖ –ó–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                    description=f"–ó–≤–∞–Ω–∏–µ **{self.rank_name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                    color=discord.Color.green(),
                    timestamp=discord.utils.utcnow()
                )
                
                view = RankRolesConfigView()
                await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            else:
                await self.send_error_message(
                    interaction,
                    "–ó–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    f"–ó–≤–∞–Ω–∏–µ '{self.rank_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
                )
                
        except Exception as e:
            await self.send_error_message(
                interaction,
                "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–≤–∞–Ω–∏—è: {e}"
            )


class RankRolesSelect(ui.Select):
    """Select menu for managing rank roles"""
    
    def __init__(self):
        try:
            config = load_config()
            rank_roles = config.get('rank_roles', {})
            
            options = [
                discord.SelectOption(
                    label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤–∞–Ω–∏–µ",
                    description="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ",
                    emoji="‚ûï",
                    value="add_rank"
                ),
                discord.SelectOption(
                    label="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å",
                    description="–†–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤",
                    emoji="üîë",
                    value="set_key_role"
                )
            ]
            
            # Add existing ranks for editing/deletion
            for rank_name in sorted(rank_roles.keys()):
                if len(options) < 25:  # Discord limit
                    options.append(
                        discord.SelectOption(
                            label=f"‚úèÔ∏è {rank_name}",
                            description=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–≤–∞–Ω–∏–µ {rank_name}",
                            emoji="‚úèÔ∏è",
                            value=f"edit_{rank_name}"
                        )
                    )
            
            super().__init__(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="rank_roles_select"
            )
        except Exception as e:
            print(f"‚ùå Error in RankRolesSelect.__init__: {e}")
            import traceback
            traceback.print_exc()
            # Fallback options
            options = [
                discord.SelectOption(
                    label="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    emoji="‚ùå",
                    value="error"
                )
            ]
            super().__init__(
                placeholder="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="rank_roles_select"
            )
    
    async def callback(self, interaction: discord.Interaction):
        try:
            selected_value = self.values[0]
            
            if selected_value == "error":
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", ephemeral=True)
                return
            
            if selected_value == "add_rank":
                modal = RankRoleModal()
                await interaction.response.send_modal(modal)
            elif selected_value == "set_key_role":
                modal = KeyRoleModal()
                await interaction.response.send_modal(modal)
            elif selected_value.startswith("edit_"):
                rank_name = selected_value[5:]  # Remove "edit_" prefix
                modal = RankRoleModal(edit_rank=rank_name)
                await interaction.response.send_modal(modal)
        except Exception as e:
            print(f"‚ùå Error in RankRolesSelect.callback: {e}")
            import traceback
            traceback.print_exc()
            try:
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è", ephemeral=True)
            except:
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è", ephemeral=True)


class RankRoleDeleteSelect(ui.Select):
    """Select menu for deleting rank roles"""
    
    def __init__(self):
        config = load_config()
        rank_roles = config.get('rank_roles', {})
        
        options = []
        
        # Add existing ranks for deletion
        for rank_name in sorted(rank_roles.keys()):
            if len(options) < 25:  # Discord limit
                options.append(
                    discord.SelectOption(
                        label=f"üóëÔ∏è {rank_name}",
                        description=f"–£–¥–∞–ª–∏—Ç—å –∑–≤–∞–Ω–∏–µ {rank_name}",
                        emoji="üóëÔ∏è",
                        value=rank_name
                    )
                )
        
        if not options:
            options.append(
                discord.SelectOption(
                    label="–ù–µ—Ç –∑–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    description="–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–≤–∞–Ω–∏—è",
                    emoji="‚ùå",
                    value="none"
                )
            )
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="rank_roles_delete_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_rank = self.values[0]
        
        if selected_rank == "none":
            embed = discord.Embed(
                title="‚ùå –ù–µ—Ç –∑–≤–∞–Ω–∏–π",
                description="–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        modal = RankRoleDeleteConfirmModal(selected_rank)
        await interaction.response.send_modal(modal)


class RankRolesConfigView(BaseSettingsView):
    """Main view for rank roles configuration"""
    
    def __init__(self):
        super().__init__()
        self.add_item(RankRolesSelect())
        self.add_item(RankRoleDeleteSelect())


async def show_rank_roles_config(interaction: discord.Interaction):
    """Show rank roles configuration interface"""
    try:
        config = load_config()
        rank_roles = config.get('rank_roles', {})
        key_role_id = config.get('rank_sync_key_role')
        
        embed = discord.Embed(
            title="üéñÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –∑–≤–∞–Ω–∏–π",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º –∑–≤–∞–Ω–∏–π —Å —Ä–æ–ª—è–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
            color=discord.Color.gold(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show key role
        if key_role_id:
            key_role = interaction.guild.get_role(key_role_id)
            if key_role:
                embed.add_field(
                    name="üîë –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                    value=f"{key_role.mention} - —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —ç—Ç–æ–π —Ä–æ–ª—å—é –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π",
                    inline=False
                )
            else:
                embed.add_field(
                    name="üîë –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å:",
                    value=f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {key_role_id})",
                    inline=False
                )
        else:
            embed.add_field(
                name="‚ö†Ô∏è –ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                value="–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)",
                inline=False
            )
        
        if rank_roles:
            ranks_list = []
            for rank_name, rank_data in sorted(rank_roles.items()):
                # Handle both old format (direct role_id) and new format (dict with role_id)
                if isinstance(rank_data, dict):
                    role_id = rank_data.get('role_id')
                else:
                    role_id = rank_data
                
                if role_id:
                    role = interaction.guild.get_role(int(role_id))
                    if role:
                        ranks_list.append(f"‚Ä¢ **{rank_name}** ‚Üí {role.mention}")
                    else:
                        ranks_list.append(f"‚Ä¢ **{rank_name}** ‚Üí `{role_id}` ‚ùå (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
                else:
                    ranks_list.append(f"‚Ä¢ **{rank_name}** ‚Üí ‚ùå (role_id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            
            embed.add_field(
                name="üìã –¢–µ–∫—É—â–∏–µ –∑–≤–∞–Ω–∏—è:",
                value="\n".join(ranks_list) if ranks_list else "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–≤–∞–Ω–∏–π",
                inline=False
            )
        else:
            embed.add_field(
                name="‚ùå –ó–≤–∞–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                value="–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                inline=False
            )
        
        embed.add_field(
            name="üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å** - —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å –∑–≤–∞–Ω–∏–µ** - —Å–≤—è–∑–∞—Ç—å –Ω–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ —Å —Ä–æ–ª—å—é\n"
                "‚Ä¢ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–≤–∞–Ω–∏–µ** - –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–≤–∞–Ω–∏–µ\n"
                "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å –∑–≤–∞–Ω–∏–µ** - —É–¥–∞–ª–∏—Ç—å –∑–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
            value=(
                "–ó–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π "
                "–ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–¥—Ä–æ–≤–æ–≥–æ —É—á—ë—Ç–∞.\n\n"
                "**–ö–ª—é—á–µ–≤–∞—è —Ä–æ–ª—å** –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ä–æ–ª—å—é, "
                "—á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö."
            ),
            inline=False
        )
        
        view = RankRolesConfigView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    except Exception as e:
        print(f"‚ùå Error in show_rank_roles_config: {e}")
        import traceback
        traceback.print_exc()
        
        error_embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–ª–µ–π –∑–≤–∞–Ω–∏–π: {str(e)}",
            color=discord.Color.red()
        )
        try:
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
        except:
            await interaction.followup.send(embed=error_embed, ephemeral=True)
def initialize_default_ranks():
    """Initialize default rank roles in config if not present"""
    config = load_config()
    changes_made = False
    
    if 'rank_roles' not in config or not config['rank_roles']:
        default_ranks = {
            "–†—è–¥–æ–≤–æ–π": {"role_id": 1246114675574313021, "rank_level": 1},
            "–ï—Ñ—Ä–µ–π—Ç–æ—Ä": {"role_id": 1246114674638983270, "rank_level": 2},
            "–ú–ª. –°–µ—Ä–∂–∞–Ω—Ç": {"role_id": 1261982952275972187, "rank_level": 3},
            "–°–µ—Ä–∂–∞–Ω—Ç": {"role_id": 1246114673997123595, "rank_level": 4},
            "–°—Ç. –°–µ—Ä–∂–∞–Ω—Ç": {"role_id": 1246114672352952403, "rank_level": 5},
            "–°—Ç–∞—Ä—à–∏–Ω–∞": {"role_id": 1246114604958879754, "rank_level": 6},
            "–ü—Ä–∞–ø–æ—Ä—â–∏–∫": {"role_id": 1246114604329865327, "rank_level": 7},
            "–°—Ç. –ü—Ä–∞–ø–æ—Ä—â–∏–∫": {"role_id": 1251045305793773648, "rank_level": 8},
            "–ú–ª. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {"role_id": 1251045263062335590, "rank_level": 9},
            "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {"role_id": 1246115365746901094, "rank_level": 10},
            "–°—Ç. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": {"role_id": 1246114469340250214, "rank_level": 11},
            "–ö–∞–ø–∏—Ç–∞–Ω": {"role_id": 1246114469336322169, "rank_level": 12},
            "–ú–∞–π–æ—Ä": {"role_id": 1246114042821607424, "rank_level": 13},
            "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫": {"role_id": 1246114038744875090, "rank_level": 14},
            "–ü–æ–ª–∫–æ–≤–Ω–∏–∫": {"role_id": 1246113825791672431, "rank_level": 15}
        }
        
        config['rank_roles'] = default_ranks
        changes_made = True
        print("‚úÖ Initialized default rank roles with hierarchy in config")
    
    # Initialize default key role if not present (military role from config)
    if 'rank_sync_key_role' not in config and config.get('military_role'):
        config['rank_sync_key_role'] = config['military_role']
        changes_made = True
        print("‚úÖ Initialized default key role for rank sync from military role")
    
    if changes_made:
        save_config(config)
        return True
    
    return False
