import discord
from discord.ext import commands
from typing import Optional, Dict, Any
from utils.config_manager import load_config, save_config
from .base import BaseSettingsView


class SuppliesSettingsView(BaseSettingsView):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∞–≤–æ–∫"""
    
    def __init__(self):
        super().__init__()
        self.create_buttons()
    
    async def get_current_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞–≤–æ–∫"""
        config = load_config()
        return config.get('supplies', {})
    
    def create_embed(self) -> discord.Embed:
        """–°–æ–∑–¥–∞–µ—Ç embed —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        config = load_config()
        supplies_config = config.get('supplies', {})
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —á–∞—Å–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
        if 'timer_duration_hours' in supplies_config and 'timer_duration_minutes' not in supplies_config:
            old_hours = supplies_config['timer_duration_hours']
            supplies_config['timer_duration_minutes'] = old_hours * 60
            config['supplies'] = supplies_config
            save_config(config)
            print(f"üîÑ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–∞–π–º–µ—Ä–∞: {old_hours}—á ‚Üí {old_hours * 60}–º–∏–Ω")
        
        embed = discord.Embed(
            title="üöö –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∞–≤–æ–∫",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö",
            color=discord.Color.blue()
        )
        
        # –ö–∞–Ω–∞–ª—ã
        control_channel_id = supplies_config.get('control_channel_id')
        notification_channel_id = supplies_config.get('notification_channel_id') 
        subscription_channel_id = supplies_config.get('subscription_channel_id')
        
        embed.add_field(
            name="üì∫ –ö–∞–Ω–∞–ª—ã",
            value=(
                f"üéÆ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {f'<#{control_channel_id}>' if control_channel_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"üì¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** {f'<#{notification_channel_id}>' if notification_channel_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
                f"üîî **–ü–æ–¥–ø–∏—Å–∫–∞:** {f'<#{subscription_channel_id}>' if subscription_channel_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
            ),
            inline=False
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        timer_duration_minutes = supplies_config.get('timer_duration_minutes', supplies_config.get('timer_duration_hours', 4) * 60)
        warning_minutes = supplies_config.get('warning_minutes', 20)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        hours = timer_duration_minutes // 60
        remaining_minutes = timer_duration_minutes % 60
        
        if hours > 0 and remaining_minutes > 0:
            time_display = f"{hours}—á {remaining_minutes}–º"
        elif hours > 0:
            time_display = f"{hours}—á"
        else:
            time_display = f"{remaining_minutes}–º"
        
        embed.add_field(
            name="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏",
            value=(
                f"‚è≥ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞:** {timer_duration_minutes} –º–∏–Ω ({time_display})\n"
                f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞:** {warning_minutes} –º–∏–Ω—É—Ç"
            ),
            inline=True
        )
        
        # –†–æ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_role_id = supplies_config.get('subscription_role_id')
        embed.add_field(
            name="üë• –†–æ–ª–∏",
            value=(
                f"üîî **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:** "
                f"{f'<@&{subscription_role_id}>' if subscription_role_id else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}"
            ),
            inline=True
        )
        
        # –í–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—Å—Ç–∞—Ç–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        embed.add_field(
            name="üè≠ –í–æ–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã",
            value=(
                "üè≠ **–û–±—ä–µ–∫—Ç ‚Ññ7** - –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å\n"
                "üì¶ **–í–æ–µ–Ω–Ω—ã–µ –°–∫–ª–∞–¥—ã** - –°–∫–ª–∞–¥—Å–∫–∞—è –±–∞–∑–∞\n"
                "üì° **–†–õ–° –û—Ä–±–∏—Ç–∞** - –†–∞–¥–∏–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è"
            ),
            inline=False
        )
        
        embed.set_footer(text="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª—ã –∏ —Ä–æ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∞–≤–æ–∫")
        return embed
    
    def create_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        self.add_item(ChannelControlButton())
        self.add_item(ChannelNotificationButton())
        self.add_item(ChannelSubscriptionButton())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.add_item(TimerDurationButton())
        self.add_item(WarningTimeButton())
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π
        self.add_item(SubscriptionRoleButton())


class ChannelControlSelectView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(timeout=30)
        
        select = discord.ui.ChannelSelect(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏",
            channel_types=[discord.ChannelType.text],
            min_values=1,
            max_values=1
        )
        select.callback = self.channel_select
        self.add_item(select)
    
    async def channel_select(self, interaction: discord.Interaction):
        select = interaction.data['values'][0]
        channel_id = int(select)
        
        config = load_config()
        if 'supplies' not in config:
            config['supplies'] = {}
        config['supplies']['control_channel_id'] = channel_id
        
        if save_config(config):
            await interaction.response.send_message(
                f"‚úÖ –ö–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: <#{channel_id}>",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                ephemeral=True
            )


class ChannelControlButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(
            label="–ö–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            emoji="üéÆ",
            style=discord.ButtonStyle.primary,
            custom_id="supplies_channel_control"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = ChannelControlSelectView()
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", view=view, ephemeral=True)


class ChannelNotificationSelectView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        super().__init__(timeout=30)
        
        select = discord.ui.ChannelSelect(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö",
            channel_types=[discord.ChannelType.text],
            min_values=1,
            max_values=1
        )
        select.callback = self.channel_select
        self.add_item(select)
    
    async def channel_select(self, interaction: discord.Interaction):
        select = interaction.data['values'][0]
        channel_id = int(select)
        
        config = load_config()
        if 'supplies' not in config:
            config['supplies'] = {}
        config['supplies']['notification_channel_id'] = channel_id
        
        if save_config(config):
            await interaction.response.send_message(
                f"‚úÖ –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω: <#{channel_id}>",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                ephemeral=True
            )


class ChannelNotificationButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        super().__init__(
            label="–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            emoji="üì¢",
            style=discord.ButtonStyle.primary,
            custom_id="supplies_channel_notification"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = ChannelNotificationSelectView()
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", view=view, ephemeral=True)


class ChannelSubscriptionSelectView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def __init__(self):
        super().__init__(timeout=30)
        
        select = discord.ui.ChannelSelect(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            channel_types=[discord.ChannelType.text],
            min_values=1,
            max_values=1
        )
        select.callback = self.channel_select
        self.add_item(select)
    
    async def channel_select(self, interaction: discord.Interaction):
        select = interaction.data['values'][0]
        channel_id = int(select)
        
        config = load_config()
        if 'supplies' not in config:
            config['supplies'] = {}
        config['supplies']['subscription_channel_id'] = channel_id
        
        if save_config(config):
            await interaction.response.send_message(
                f"‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: <#{channel_id}>",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                ephemeral=True
            )


class ChannelSubscriptionButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def __init__(self):
        super().__init__(
            label="–ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏",
            emoji="üîî",
            style=discord.ButtonStyle.primary,
            custom_id="supplies_channel_subscription"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = ChannelSubscriptionSelectView()
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", view=view, ephemeral=True)


class TimerDurationButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞"""
    
    def __init__(self):
        super().__init__(
            label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞",
            emoji="‚è≥",
            style=discord.ButtonStyle.secondary,
            custom_id="supplies_timer_duration"
        )
    
    async def callback(self, interaction: discord.Interaction):
        modal = TimerDurationModal()
        await interaction.response.send_modal(modal)


class WarningTimeButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(
            label="–í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
            emoji="‚ö†Ô∏è",
            style=discord.ButtonStyle.secondary,
            custom_id="supplies_warning_time"
        )
    
    async def callback(self, interaction: discord.Interaction):
        modal = WarningTimeModal()
        await interaction.response.send_modal(modal)


class SubscriptionRoleSelectView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def __init__(self):
        super().__init__(timeout=30)
        
        select = discord.ui.RoleSelect(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            min_values=1,
            max_values=1
        )
        select.callback = self.role_select
        self.add_item(select)
    
    async def role_select(self, interaction: discord.Interaction):
        select = interaction.data['values'][0]
        role_id = int(select)
        
        config = load_config()
        if 'supplies' not in config:
            config['supplies'] = {}
        config['supplies']['subscription_role_id'] = role_id
        
        if save_config(config):
            await interaction.response.send_message(
                f"‚úÖ –†–æ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: <@&{role_id}>",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                ephemeral=True
            )


class SubscriptionRoleButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    def __init__(self):
        super().__init__(
            label="–†–æ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏",
            emoji="üîî",
            style=discord.ButtonStyle.success,
            custom_id="supplies_subscription_role"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = SubscriptionRoleSelectView()
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", view=view, ephemeral=True)


class BackToMainButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    
    def __init__(self):
        super().__init__(
            label="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            style=discord.ButtonStyle.danger,
            custom_id="supplies_back_to_main"
        )
    
    async def callback(self, interaction: discord.Interaction):
        from .main import SettingsView
        view = SettingsView()
        
        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        embed = discord.Embed(
            title="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞",
            description="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            value=(
                "‚Ä¢ **üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n"
                "‚Ä¢ **üöö –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–∞–≤–æ–∫** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏\n"
                "‚Ä¢ **üõ°Ô∏è –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è** - —Ä–æ–ª–∏, –Ω–µ —Å–Ω–∏–º–∞–µ–º—ã–µ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏\n"
                "‚Ä¢ **‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            ),
            inline=False
        )
        
        await interaction.response.edit_message(embed=embed, view=view)


class TimerDurationModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞"""
    
    def __init__(self):
        super().__init__(title="‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞")
        
        self.duration_input = discord.ui.TextInput(
            label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 240 –¥–ª—è 4—á)",
            min_length=1,
            max_length=4
        )
        self.add_item(self.duration_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            minutes = int(self.duration_input.value)
            
            if minutes < 1 or minutes > 1440:  # –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ = 1440 –º–∏–Ω—É—Ç
                await interaction.response.send_message(
                    "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)",
                    ephemeral=True
                )
                return
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            hours = minutes // 60
            remaining_minutes = minutes % 60
            
            if hours > 0 and remaining_minutes > 0:
                time_display = f"{hours}—á {remaining_minutes}–º"
            elif hours > 0:
                time_display = f"{hours}—á"
            else:
                time_display = f"{remaining_minutes}–º"
            
            config = load_config()
            if 'supplies' not in config:
                config['supplies'] = {}
            config['supplies']['timer_duration_minutes'] = minutes
            
            if save_config(config):
                await interaction.response.send_message(
                    f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: **{minutes} –º–∏–Ω—É—Ç** ({time_display})",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    ephemeral=True
                )
                
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
                ephemeral=True
            )


class WarningTimeModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(title="‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        
        self.warning_input = discord.ui.TextInput(
            label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ (–º–∏–Ω—É—Ç)",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20)",
            min_length=1,
            max_length=3
        )
        self.add_item(self.warning_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            minutes = int(self.warning_input.value)
            
            if minutes < 1 or minutes > 240:  # –î–æ 4 —á–∞—Å–æ–≤
                await interaction.response.send_message(
                    "‚ùå –í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 240 –º–∏–Ω—É—Ç",
                    ephemeral=True
                )
                return
            
            config = load_config()
            if 'supplies' not in config:
                config['supplies'] = {}
            config['supplies']['warning_minutes'] = minutes
            
            if save_config(config):
                await interaction.response.send_message(
                    f"‚úÖ –í—Ä–µ–º—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: **{minutes} –º–∏–Ω—É—Ç**",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                    ephemeral=True
                )
                
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
                ephemeral=True
            )
