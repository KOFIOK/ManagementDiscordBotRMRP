"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å /settings
–í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏, –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º/–∑–≤–∞–Ω–∏—è–º –∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã
"""

import discord
from discord.ext import commands
from typing import Dict, List, Optional, Any
from utils.config_manager import load_config, save_config


class WarehouseSettingsView(discord.ui.View):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="–ö–∞–Ω–∞–ª—ã —Å–∫–ª–∞–¥–∞", style=discord.ButtonStyle.primary, emoji="üì¶")
    async def channels_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–∫–ª–∞–¥–∞"""
        view = WarehouseChannelsView()
        await view.show_settings(interaction)
    
    @discord.ui.button(label="–ö—É–ª–¥–∞—É–Ω", style=discord.ButtonStyle.secondary, emoji="‚è∞")
    async def cooldown_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        modal = WarehouseCooldownModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="–†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤", style=discord.ButtonStyle.secondary, emoji="üéØ")
    async def limits_mode_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        view = WarehouseLimitsModeView()
        await view.show_settings(interaction)
    
    @discord.ui.button(label="–õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π", style=discord.ButtonStyle.secondary, emoji="üíº")
    async def position_limits_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
        view = WarehousePositionLimitsView()
        await view.show_settings(interaction)
    
    @discord.ui.button(label="–õ–∏–º–∏—Ç—ã –∑–≤–∞–Ω–∏–π", style=discord.ButtonStyle.secondary, emoji="üéñÔ∏è")
    async def rank_limits_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∑–≤–∞–Ω–∏—è–º"""
        view = WarehouseRankLimitsView()
        await view.show_settings(interaction)


class WarehouseChannelsView(discord.ui.View):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    async def show_settings(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        config = load_config()
        
        embed = discord.Embed(
            title="üì¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å–∫–ª–∞–¥–∞",
            description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á—ë—Ç–∞",
            color=discord.Color.blue()
        )
          # –ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤
        request_channel_id = config.get('warehouse_request_channel')
        if request_channel_id:
            channel = interaction.guild.get_channel(request_channel_id)
            request_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {request_channel_id})"
        else:
            request_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        embed.add_field(
            name="üì¶ –ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤:",
            value=request_text,
            inline=False
        )
        
        # –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
        submission_channel_id = config.get('warehouse_submission_channel')
        if submission_channel_id:
            channel = interaction.guild.get_channel(submission_channel_id)
            submission_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {submission_channel_id})"
        else:
            submission_text = "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        embed.add_field(
            name="üì§ –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫:",
            value=submission_text,
            inline=False
        )
        
        # –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞
        audit_channel_id = config.get('warehouse_audit_channel')
        if audit_channel_id:
            channel = interaction.guild.get_channel(audit_channel_id)
            audit_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {audit_channel_id})"
        else:
            audit_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        embed.add_field(
            name="üìä –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞:",
            value=audit_text,
            inline=False
        )
        
        # –ö—É—Ä–∞—Ç–æ—Ä—ã –∞—É–¥–∏—Ç–∞
        curators = config.get('warehouse_audit_curators', [])
        if curators:
            curator_mentions = []
            for curator in curators:
                if isinstance(curator, str) and curator.isdigit():
                    curator_mentions.append(f"<@{curator}>")
                elif isinstance(curator, str) and curator.startswith('<@&') and curator.endswith('>'):
                    curator_mentions.append(curator)
                else:
                    curator_mentions.append(str(curator))
            
            curators_text = ", ".join(curator_mentions[:3])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
            if len(curator_mentions) > 3:
                curators_text += f" –∏ –µ—â–µ {len(curator_mentions) - 3}"
        else:
            curators_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(
            name="üëë –ö—É—Ä–∞—Ç–æ—Ä—ã –∞—É–¥–∏—Ç–∞:",
            value=curators_text,
            inline=False
        )
        
        view = WarehouseChannelsButtonsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class WarehouseChannelsButtonsView(discord.ui.View):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="üì¶ –ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤", style=discord.ButtonStyle.green)
    async def set_request_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = WarehouseChannelModal("warehouse_request_channel", "–ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–ª–∞–¥–∞")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üì§ –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫", style=discord.ButtonStyle.primary)
    async def set_submission_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = WarehouseChannelModal("warehouse_submission_channel", "–ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìä –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞", style=discord.ButtonStyle.secondary)
    async def set_audit_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = WarehouseChannelModal("warehouse_audit_channel", "–ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞")
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üëë –ö—É—Ä–∞—Ç–æ—Ä—ã –∞—É–¥–∏—Ç–∞", style=discord.ButtonStyle.blurple)
    async def set_audit_curators(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞—É–¥–∏—Ç–∞ —á–∏—Å—Ç–∫–∏ —Å–∫–ª–∞–¥–∞"""
        modal = WarehouseAuditCuratorsModal()
        await interaction.response.send_modal(modal)


class WarehouseChannelModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self, config_key: str, title: str):
        super().__init__(title=title)
        self.config_key = config_key
        
        self.channel_input = discord.ui.TextInput(
            label="ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            placeholder="#–∫–∞–Ω–∞–ª-—Å–∫–ª–∞–¥–∞ –∏–ª–∏ 1234567890123456789",
            max_length=100,
            required=True
        )
        self.add_item(self.channel_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            channel_text = self.channel_input.value.strip()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
            from .base import ChannelParser
            channel = ChannelParser.parse_channel_input(channel_text, interaction.guild)
            
            if not channel:
                await interaction.response.send_message(
                    f"‚ùå –ö–∞–Ω–∞–ª '{channel_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = load_config()
            config[self.config_key] = channel.id
            save_config(config)
              # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
            if self.config_key == "warehouse_request_channel":
                try:
                    from utils.warehouse_utils import send_warehouse_message
                    await send_warehouse_message(channel)
                    message = f"‚úÖ –ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {channel.mention}\nüìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞: {e}")
                    message = f"‚úÖ –ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {channel.mention}\n‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            elif self.config_key == "warehouse_submission_channel":
                message = f"‚úÖ –ö–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {channel.mention}\nüì§ –í—Å–µ –∑–∞—è–≤–∫–∏ —Å–∫–ª–∞–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª!"
            elif self.config_key == "warehouse_audit_channel":
                message = f"‚úÖ –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {channel.mention}"
            else:
                message = f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {channel.mention}"
            
            await interaction.response.send_message(message, ephemeral=True)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True
            )


class WarehouseCooldownModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞"""
    
    def __init__(self):
        super().__init__(title="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞")
        
        config = load_config()
        current_cooldown = config.get('warehouse_cooldown_hours', 6)        
        self.cooldown_input = discord.ui.TextInput(
            label="–ö—É–ª–¥–∞—É–Ω –≤ —á–∞—Å–∞—Ö",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6 –∏–ª–∏ 0.083 (5 –º–∏–Ω)",
            default=str(current_cooldown),
            max_length=5,
            required=True
        )
        self.add_item(self.cooldown_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            cooldown_str = self.cooldown_input.value.strip().replace(',', '.')
            
            try:
                cooldown = float(cooldown_str)
            except ValueError:
                await interaction.response.send_message(
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6 –∏–ª–∏ 0.5)!", ephemeral=True
                )
                return
            
            if cooldown < 0 or cooldown > 168:  # –ú–∞–∫—Å–∏–º—É–º –Ω–µ–¥–µ–ª—è
                await interaction.response.send_message(
                    "‚ùå –ö—É–ª–¥–∞—É–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 168 —á–∞—Å–æ–≤!", ephemeral=True
                )
                return
            
            config = load_config()
            config['warehouse_cooldown_hours'] = cooldown
            save_config(config)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            if cooldown == int(cooldown):
                cooldown_display = str(int(cooldown))
            else:
                cooldown_display = str(cooldown)
            
            await interaction.response.send_message(
                f"‚úÖ –ö—É–ª–¥–∞—É–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {cooldown_display} —á–∞—Å–æ–≤", ephemeral=True
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ WarehouseCooldownModal: {e}")
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É–ª–¥–∞—É–Ω–∞: {str(e)}", ephemeral=True
            )


class WarehouseLimitsModeView(discord.ui.View):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    async def show_settings(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        config = load_config()
        limits_mode = config.get('warehouse_limits_mode', {
            'positions_enabled': True,
            'ranks_enabled': False
        })
        
        embed = discord.Embed(
            title="üéØ –†–µ–∂–∏–º –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥–∞",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –∏/–∏–ª–∏ –∑–≤–∞–Ω–∏—è–º",
            color=discord.Color.gold()
        )
        
        pos_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if limits_mode.get('positions_enabled', True) else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        rank_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if limits_mode.get('ranks_enabled', False) else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        
        embed.add_field(
            name="üíº –õ–∏–º–∏—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º:",
            value=pos_status,
            inline=True
        )
        
        embed.add_field(
            name="üéñÔ∏è –õ–∏–º–∏—Ç—ã –ø–æ –∑–≤–∞–Ω–∏—è–º:",
            value=rank_status,
            inline=True
        )
        
        if not limits_mode.get('positions_enabled', True) and not limits_mode.get('ranks_enabled', False):
            embed.add_field(
                name="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:",
                value="–í—Å–µ –ª–∏–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.",
                inline=False
            )
        
        view = WarehouseLimitsModeButtonsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class WarehouseLimitsModeButtonsView(discord.ui.View):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="üíº –î–æ–ª–∂–Ω–æ—Å—Ç–∏", style=discord.ButtonStyle.green)
    async def toggle_positions(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        limits_mode = config.get('warehouse_limits_mode', {
            'positions_enabled': True,
            'ranks_enabled': False
        })
        
        limits_mode['positions_enabled'] = not limits_mode.get('positions_enabled', True)
        config['warehouse_limits_mode'] = limits_mode
        save_config(config)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if limits_mode['positions_enabled'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await interaction.response.send_message(
            f"‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º {status}", ephemeral=True
        )
    
    @discord.ui.button(label="üéñÔ∏è –ó–≤–∞–Ω–∏—è", style=discord.ButtonStyle.secondary)
    async def toggle_ranks(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        limits_mode = config.get('warehouse_limits_mode', {
            'positions_enabled': True,
            'ranks_enabled': False
        })
        
        limits_mode['ranks_enabled'] = not limits_mode.get('ranks_enabled', False)
        config['warehouse_limits_mode'] = limits_mode
        save_config(config)
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if limits_mode['ranks_enabled'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await interaction.response.send_message(
            f"‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ –∑–≤–∞–Ω–∏—è–º {status}", ephemeral=True
        )


class WarehousePositionLimitsView(discord.ui.View):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    async def show_settings(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
        config = load_config()
        position_limits = config.get('warehouse_limits_positions', {})
        
        embed = discord.Embed(
            title="üíº –õ–∏–º–∏—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π",
            color=discord.Color.blue()
        )
        
        if position_limits:
            for position, limits in position_limits.items():
                weapon_limit = limits.get('–æ—Ä—É–∂–∏–µ', 3)
                armor_limit = limits.get('–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã', 10)
                medkit_limit = limits.get('–∞–ø—Ç–µ—á–∫–∏', 20)
                
                embed.add_field(
                    name=f"üë§ {position}",
                    value=f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\nüõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\nüíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                    inline=True
                )
        else:
            embed.add_field(
                name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value="–õ–∏–º–∏—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö.",
                inline=False
            )
        
        view = WarehousePositionLimitsButtonsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class WarehousePositionLimitsButtonsView(discord.ui.View):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.green)
    async def add_position(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = WarehouseAddPositionModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã", style=discord.ButtonStyle.secondary)
    async def edit_position(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        positions = list(config.get('warehouse_limits_positions', {}).keys())
        
        if not positions:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", ephemeral=True
            )
            return
        
        view = WarehouseSelectPositionView(positions, "edit")
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", view=view, ephemeral=True
        )
    
    @discord.ui.button(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", style=discord.ButtonStyle.red)
    async def remove_position(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        positions = list(config.get('warehouse_limits_positions', {}).keys())
        
        if not positions:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", ephemeral=True
            )
            return
        
        view = WarehouseSelectPositionView(positions, "delete")
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", view=view, ephemeral=True
        )


class WarehouseAddPositionModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        super().__init__(title="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        
        self.position_input = discord.ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫ –°–°–û",
            max_length=100,
            required=True
        )
        self.add_item(self.position_input)
        
        self.weapon_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –æ—Ä—É–∂–∏—è",
            placeholder="3",
            default="3",
            max_length=3,
            required=True
        )
        self.add_item(self.weapon_input)
        
        self.armor_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç–æ–≤",
            placeholder="10",
            default="10",
            max_length=3,
            required=True
        )
        self.add_item(self.armor_input)
        
        self.medkit_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –∞–ø—Ç–µ—á–µ–∫",
            placeholder="20",
            default="20",
            max_length=3,
            required=True
        )
        self.add_item(self.medkit_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            position = self.position_input.value.strip()
            weapon_limit = int(self.weapon_input.value.strip())
            armor_limit = int(self.armor_input.value.strip())
            medkit_limit = int(self.medkit_input.value.strip())
            
            config = load_config()
            if 'warehouse_limits_positions' not in config:
                config['warehouse_limits_positions'] = {}
            
            config['warehouse_limits_positions'][position] = {
                '–æ—Ä—É–∂–∏–µ': weapon_limit,
                '–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã': armor_limit,
                '–∞–ø—Ç–µ—á–∫–∏': medkit_limit,
                '–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ': 8,
                '–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã': 4,
                'weapon_restrictions': []
            }
            
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{position}** –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n"
                f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\n"
                f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\n"
                f"üíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                ephemeral=True
            )
            
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True
            )


class WarehouseSelectPositionView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, positions: List[str], action: str):
        super().__init__(timeout=300)
        self.positions = positions
        self.action = action
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
        self.add_item(WarehousePositionSelect(positions, action))


class WarehousePositionSelect(discord.ui.Select):
    """–°–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, positions: List[str], action: str):
        self.action = action
        
        options = []
        for position in positions[:25]:  # Discord –ª–∏–º–∏—Ç 25 –æ–ø—Ü–∏–π
            options.append(discord.SelectOption(
                label=position,
                value=position
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_position = self.values[0]
        
        if self.action == "edit":
            modal = WarehouseEditPositionModal(selected_position)
            await interaction.response.send_modal(modal)
        elif self.action == "delete":
            config = load_config()
            del config['warehouse_limits_positions'][selected_position]
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{selected_position}** —É–¥–∞–ª–µ–Ω—ã.",
                ephemeral=True
            )


class WarehouseEditPositionModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, position_name: str):
        super().__init__(title=f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {position_name[:30]}")
        self.position_name = position_name
        
        config = load_config()
        current_limits = config.get('warehouse_limits_positions', {}).get(position_name, {})
        
        self.weapon_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –æ—Ä—É–∂–∏—è",
            default=str(current_limits.get('–æ—Ä—É–∂–∏–µ', 3)),
            max_length=3,
            required=True
        )
        self.add_item(self.weapon_input)
        
        self.armor_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç–æ–≤",
            default=str(current_limits.get('–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã', 10)),
            max_length=3,
            required=True
        )
        self.add_item(self.armor_input)
        
        self.medkit_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –∞–ø—Ç–µ—á–µ–∫",
            default=str(current_limits.get('–∞–ø—Ç–µ—á–∫–∏', 20)),
            max_length=3,
            required=True
        )
        self.add_item(self.medkit_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            weapon_limit = int(self.weapon_input.value.strip())
            armor_limit = int(self.armor_input.value.strip())
            medkit_limit = int(self.medkit_input.value.strip())
            
            config = load_config()
            if 'warehouse_limits_positions' not in config:
                config['warehouse_limits_positions'] = {}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ä—É–∂–∏—è
            current_limits = config['warehouse_limits_positions'].get(self.position_name, {})
            weapon_restrictions = current_limits.get('weapon_restrictions', [])
            
            config['warehouse_limits_positions'][self.position_name] = {
                '–æ—Ä—É–∂–∏–µ': weapon_limit,
                '–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã': armor_limit,
                '–∞–ø—Ç–µ—á–∫–∏': medkit_limit,
                '–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ': current_limits.get('–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ', 8),
                '–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã': current_limits.get('–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã', 4),
                'weapon_restrictions': weapon_restrictions
            }
            
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ **{self.position_name}** –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\n"
                f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\n"
                f"üíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                ephemeral=True
            )
            
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True
            )


class WarehouseRankLimitsView(discord.ui.View):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∑–≤–∞–Ω–∏—è–º"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    async def show_settings(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∑–≤–∞–Ω–∏—è–º"""
        config = load_config()
        rank_limits = config.get('warehouse_limits_ranks', {})
        
        embed = discord.Embed(
            title="üéñÔ∏è –õ–∏–º–∏—Ç—ã –ø–æ –∑–≤–∞–Ω–∏—è–º",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –∑–≤–∞–Ω–∏–π",
            color=discord.Color.purple()
        )
        
        if rank_limits:
            for rank, limits in rank_limits.items():
                weapon_limit = limits.get('–æ—Ä—É–∂–∏–µ', 3)
                armor_limit = limits.get('–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã', 10)
                medkit_limit = limits.get('–∞–ø—Ç–µ—á–∫–∏', 20)
                
                embed.add_field(
                    name=f"üéñÔ∏è {rank}",
                    value=f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\nüõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\nüíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                    inline=True
                )
        else:
            embed.add_field(
                name="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value="–õ–∏–º–∏—Ç—ã –ø–æ –∑–≤–∞–Ω–∏—è–º –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö.",
                inline=False
            )
        
        view = WarehouseRankLimitsButtonsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)


class WarehouseRankLimitsButtonsView(discord.ui.View):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –∑–≤–∞–Ω–∏–π"""
    
    def __init__(self):
        super().__init__(timeout=300)
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–≤–∞–Ω–∏–µ", style=discord.ButtonStyle.green)
    async def add_rank(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = WarehouseAddRankModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã", style=discord.ButtonStyle.secondary)
    async def edit_rank(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        ranks = list(config.get('warehouse_limits_ranks', {}).keys())
        
        if not ranks:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", ephemeral=True
            )
            return
        
        view = WarehouseSelectRankView(ranks, "edit")
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", view=view, ephemeral=True
        )
    
    @discord.ui.button(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–≤–∞–Ω–∏–µ", style=discord.ButtonStyle.red)
    async def remove_rank(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        ranks = list(config.get('warehouse_limits_ranks', {}).keys())
        
        if not ranks:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∑–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", ephemeral=True
            )
            return
        
        view = WarehouseSelectRankView(ranks, "delete")
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", view=view, ephemeral=True
        )


class WarehouseAddRankModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        super().__init__(title="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è")
        
        self.rank_input = discord.ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–π–æ—Ä",
            max_length=100,
            required=True
        )
        self.add_item(self.rank_input)
        
        self.weapon_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –æ—Ä—É–∂–∏—è",
            placeholder="3",
            default="3",
            max_length=3,
            required=True
        )
        self.add_item(self.weapon_input)
        
        self.armor_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç–æ–≤",
            placeholder="10",
            default="10",
            max_length=3,
            required=True
        )
        self.add_item(self.armor_input)
        
        self.medkit_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –∞–ø—Ç–µ—á–µ–∫",
            placeholder="20",
            default="20",
            max_length=3,
            required=True
        )
        self.add_item(self.medkit_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            rank = self.rank_input.value.strip()
            weapon_limit = int(self.weapon_input.value.strip())
            armor_limit = int(self.armor_input.value.strip())
            medkit_limit = int(self.medkit_input.value.strip())
            
            config = load_config()
            if 'warehouse_limits_ranks' not in config:
                config['warehouse_limits_ranks'] = {}
            
            config['warehouse_limits_ranks'][rank] = {
                '–æ—Ä—É–∂–∏–µ': weapon_limit,
                '–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã': armor_limit,
                '–∞–ø—Ç–µ—á–∫–∏': medkit_limit,
                '–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ': 8,
                '–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã': 4,
                'weapon_restrictions': []
            }
            
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∑–≤–∞–Ω–∏—è **{rank}** –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n"
                f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\n"
                f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\n"
                f"üíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                ephemeral=True
            )
            
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True
            )


class WarehouseSelectRankView(discord.ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è"""
    
    def __init__(self, ranks: List[str], action: str):
        super().__init__(timeout=300)
        self.ranks = ranks
        self.action = action
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç —Å–æ –∑–≤–∞–Ω–∏—è–º–∏
        self.add_item(WarehouseRankSelect(ranks, action))


class WarehouseRankSelect(discord.ui.Select):
    """–°–µ–ª–µ–∫—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è"""
    
    def __init__(self, ranks: List[str], action: str):
        self.action = action
        
        options = []
        for rank in ranks[:25]:  # Discord –ª–∏–º–∏—Ç 25 –æ–ø—Ü–∏–π
            options.append(discord.SelectOption(
                label=rank,
                value=rank
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ...",
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_rank = self.values[0]
        
        if self.action == "edit":
            modal = WarehouseEditRankModal(selected_rank)
            await interaction.response.send_modal(modal)
        elif self.action == "delete":
            config = load_config()
            del config['warehouse_limits_ranks'][selected_rank]
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∑–≤–∞–Ω–∏—è **{selected_rank}** —É–¥–∞–ª–µ–Ω—ã.",
                ephemeral=True
            )


class WarehouseEditRankModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–∞–Ω–∏—è"""
    
    def __init__(self, rank_name: str):
        super().__init__(title=f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {rank_name[:30]}")
        self.rank_name = rank_name
        
        config = load_config()
        current_limits = config.get('warehouse_limits_ranks', {}).get(rank_name, {})
        
        self.weapon_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –æ—Ä—É–∂–∏—è",
            default=str(current_limits.get('–æ—Ä—É–∂–∏–µ', 3)),
            max_length=3,
            required=True
        )
        self.add_item(self.weapon_input)
        
        self.armor_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç–æ–≤",
            default=str(current_limits.get('–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã', 10)),
            max_length=3,
            required=True
        )
        self.add_item(self.armor_input)
        
        self.medkit_input = discord.ui.TextInput(
            label="–õ–∏–º–∏—Ç –∞–ø—Ç–µ—á–µ–∫",
            default=str(current_limits.get('–∞–ø—Ç–µ—á–∫–∏', 20)),
            max_length=3,
            required=True
        )
        self.add_item(self.medkit_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            weapon_limit = int(self.weapon_input.value.strip())
            armor_limit = int(self.armor_input.value.strip())
            medkit_limit = int(self.medkit_input.value.strip())
            
            config = load_config()
            if 'warehouse_limits_ranks' not in config:
                config['warehouse_limits_ranks'] = {}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ä—É–∂–∏—è
            current_limits = config['warehouse_limits_ranks'].get(self.rank_name, {})
            weapon_restrictions = current_limits.get('weapon_restrictions', [])
            
            config['warehouse_limits_ranks'][self.rank_name] = {
                '–æ—Ä—É–∂–∏–µ': weapon_limit,
                '–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã': armor_limit,
                '–∞–ø—Ç–µ—á–∫–∏': medkit_limit,
                '–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ': current_limits.get('–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ', 8),
                '–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã': current_limits.get('–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã', 4),
                'weapon_restrictions': weapon_restrictions
            }
            
            save_config(config)
            
            await interaction.response.send_message(
                f"‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è –∑–≤–∞–Ω–∏—è **{self.rank_name}** –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
                f"üî´ –û—Ä—É–∂–∏–µ: {weapon_limit}\n"
                f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {armor_limit}\n"
                f"üíä –ê–ø—Ç–µ—á–∫–∏: {medkit_limit}",
                ephemeral=True
            )
            
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –õ–∏–º–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ephemeral=True
            )


class WarehouseAuditCuratorsModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self):
        super().__init__(title="üëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∞—É–¥–∏—Ç–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = load_config()
        current_curators = config.get('warehouse_audit_curators', [])
        current_text = ", ".join(str(c) for c in current_curators) if current_curators else ""
        
        self.curators_input = discord.ui.TextInput(
            label="–ö—É—Ä–∞—Ç–æ—Ä—ã –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
            placeholder="@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1, @—Ä–æ–ª—å1, ID1, @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2, ID2...",
            style=discord.TextStyle.paragraph,
            max_length=1000,
            required=False,
            default=current_text
        )
        self.add_item(self.curators_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            await interaction.response.defer(ephemeral=True)
            
            config = load_config()
            curators_text = self.curators_input.value.strip()
            
            if not curators_text:
                # –û—á–∏—â–∞–µ–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
                config['warehouse_audit_curators'] = []
                save_config(config)
                
                await interaction.followup.send(
                    "‚úÖ –ö—É—Ä–∞—Ç–æ—Ä—ã –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞ –æ—á–∏—â–µ–Ω—ã!", ephemeral=True
                )
                return
            
            # –ü–∞—Ä—Å–∏–º –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
            curators = []
            parts = [part.strip() for part in curators_text.split(',')]
            
            for part in parts:
                if not part:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                if part.startswith('<@&') and part.endswith('>'):
                    # –†–æ–ª—å
                    role_id = part[3:-1]
                    role = interaction.guild.get_role(int(role_id))
                    if role:
                        curators.append(part)
                    else:
                        await interaction.followup.send(
                            f"‚ùå –†–æ–ª—å {part} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True
                        )
                        return
                        
                elif part.startswith('<@') and part.endswith('>'):
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
                    user_id = part[2:-1]
                    if user_id.startswith('!'):
                        user_id = user_id[1:]
                    
                    try:
                        user = await interaction.guild.fetch_member(int(user_id))
                        curators.append(user_id)
                    except (discord.NotFound, discord.HTTPException):
                        await interaction.followup.send(
                            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {part} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!", ephemeral=True
                        )
                        return
                        
                elif part.isdigit():
                    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–æ–ª–∏
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = await interaction.guild.fetch_member(int(part))
                        curators.append(part)
                    except (discord.NotFound, discord.HTTPException):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Ä–æ–ª—å
                        role = interaction.guild.get_role(int(part))
                        if role:
                            curators.append(f"<@&{part}>")
                        else:
                            await interaction.followup.send(
                                f"‚ùå ID {part} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!", 
                                ephemeral=True
                            )
                            return
                else:
                    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    curators.append(part)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config['warehouse_audit_curators'] = curators
            save_config(config)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            result_text = []
            for curator in curators:
                if curator.isdigit():
                    result_text.append(f"<@{curator}>")
                else:
                    result_text.append(curator)
            
            await interaction.followup.send(
                f"‚úÖ –ö—É—Ä–∞—Ç–æ—Ä—ã –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:\n{', '.join(result_text[:5])}"
                + (f"\n –∏ –µ—â–µ {len(result_text) - 5}" if len(result_text) > 5 else ""),
                ephemeral=True
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∞—É–¥–∏—Ç–∞: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫!", ephemeral=True
            )
