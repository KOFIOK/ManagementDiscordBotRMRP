import discord
import re
from discord import ui
from utils.config_manager import load_config, save_config
from forms.dismissal_form import send_dismissal_button_message

class MainSettingsSelect(ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –±–æ—Ç–∞",
                emoji="üìÇ",
                value="channels"
            ),            discord.SelectOption(
                label="–†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–Ω–∏–º–∞—é—Ç—Å—è –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏",
                emoji="üõ°Ô∏è",
                value="excluded_roles"
            ),
            discord.SelectOption(
                label="–ü–∏–Ω–≥–∏",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∏–Ω–≥–∏ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–ø–æ—Ä—Ç–∞—Ö",
                emoji="üì¢",
                value="pings"
            ),
            discord.SelectOption(
                label="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                emoji="‚öôÔ∏è",
                value="show_config"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...",
            min_values=1,
            max_values=1,
            options=options,        custom_id="main_settings_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        
        if selected_option == "channels":
            await self.show_channels_menu(interaction)
        elif selected_option == "show_config":
            await self.show_current_config(interaction)
        elif selected_option == "excluded_roles":
            await self.show_excluded_roles_config(interaction)
        elif selected_option == "pings":
            await self.show_pings_config(interaction)
    
    async def show_channels_menu(self, interaction: discord.Interaction):
        """Show submenu for channel configuration"""
        embed = discord.Embed(
            title="üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
            value=(
                "‚Ä¢ **–ö–∞–Ω–∞–ª —É–≤–æ–ª—å–Ω–µ–Ω–∏–π** - –¥–ª—è —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ\n"
                "‚Ä¢ **–ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞** - –¥–ª—è –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞\n"
                "‚Ä¢ **–ö–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞** - –¥–ª—è –∑–∞–ø–∏—Å–µ–π —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            ),
            inline=False
        )
        
        embed.add_field(
            name="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
            value="1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\n2. –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª (ID, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)\n3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–∏—Ç –∫–Ω–æ–ø–∫–∏",
            inline=False
        )
        view = ChannelsConfigView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    async def show_current_config(self, interaction: discord.Interaction):
        config = load_config()
        
        embed = discord.Embed(
            title="‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Dismissal channel
        dismissal_id = config.get('dismissal_channel')
        if dismissal_id:
            channel = interaction.guild.get_channel(dismissal_id)
            dismissal_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {dismissal_id})"
        else:
            dismissal_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        # Audit channel
        audit_id = config.get('audit_channel')
        if audit_id:
            channel = interaction.guild.get_channel(audit_id)
            audit_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {audit_id})"
        else:
            audit_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
          # Blacklist channel
        blacklist_id = config.get('blacklist_channel')
        if blacklist_id:
            channel = interaction.guild.get_channel(blacklist_id)
            blacklist_text = channel.mention if channel else f"‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {blacklist_id})"
        else:
            blacklist_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        embed.add_field(name="üìù –ö–∞–Ω–∞–ª —É–≤–æ–ª—å–Ω–µ–Ω–∏–π", value=dismissal_text, inline=False)
        embed.add_field(name="üîç –ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞", value=audit_text, inline=False)
        embed.add_field(name="üö´ –ö–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", value=blacklist_text, inline=False)
        
        # Excluded roles
        excluded_roles_ids = config.get('excluded_roles', [])
        if excluded_roles_ids:
            excluded_roles = []
            for role_id in excluded_roles_ids:
                role = interaction.guild.get_role(role_id)
                if role:
                    excluded_roles.append(role.mention)
                else:
                    excluded_roles.append(f"‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {role_id})")
            excluded_text = "\n".join(excluded_roles) if excluded_roles else "‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            excluded_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(name="üõ°Ô∏è –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è", value=excluded_text, inline=False)
        
        # Ping settings
        ping_settings = config.get('ping_settings', {})
        if ping_settings:
            ping_text = ""
            for department_role_id, ping_roles_ids in ping_settings.items():
                department_role = interaction.guild.get_role(int(department_role_id))
                if department_role:
                    ping_roles = []
                    for ping_role_id in ping_roles_ids:
                        ping_role = interaction.guild.get_role(ping_role_id)
                        if ping_role:
                            ping_roles.append(ping_role.mention)
                    if ping_roles:
                        ping_text += f"‚Ä¢ {department_role.mention} ‚Üí {', '.join(ping_roles)}\n"
            ping_text = ping_text or "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            ping_text = "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(name="üì¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤", value=ping_text, inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    async def show_excluded_roles_config(self, interaction: discord.Interaction):
        """Show interface for managing excluded roles"""
        config = load_config()
        excluded_roles_ids = config.get('excluded_roles', [])
        
        embed = discord.Embed(
            title="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏",
            description="–†–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ä–∞–ø–æ—Ä—Ç–∞ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current excluded roles
        if excluded_roles_ids:
            excluded_roles = []
            for role_id in excluded_roles_ids:
                role = interaction.guild.get_role(role_id)
                if role:
                    excluded_roles.append(f"‚Ä¢ {role.mention}")
                else:
                    excluded_roles.append(f"‚Ä¢ ‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (ID: {role_id})")
            
            excluded_text = "\n".join(excluded_roles)
        else:
            excluded_text = "‚ùå –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(name="–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è:", value=excluded_text, inline=False)
        
        embed.add_field(
            name="‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏** - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
                "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª–∏** - —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n"
                "‚Ä¢ **–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫** - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è"
            ),
            inline=False
        )
        
        view = ExcludedRolesView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    async def show_pings_config(self, interaction: discord.Interaction):
        """Show interface for managing ping settings for departments"""
        config = load_config()
        ping_settings = config.get('ping_settings', {})
        
        embed = discord.Embed(
            title="üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏–Ω–≥–∞–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–¥–∞—á–µ —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∞—é—â–µ–≥–æ.",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        
        # Show current ping settings
        if ping_settings:
            ping_text = ""
            for department_role_id, ping_roles_ids in ping_settings.items():
                department_role = interaction.guild.get_role(int(department_role_id))
                if department_role:
                    ping_roles = []
                    for ping_role_id in ping_roles_ids:
                        ping_role = interaction.guild.get_role(ping_role_id)
                        if ping_role:
                            ping_roles.append(ping_role.mention)
                    if ping_roles:
                        ping_text += f"‚Ä¢ {department_role.mention} ‚Üí {', '.join(ping_roles)}\n"
            
            ping_text = ping_text or "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            ping_text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        embed.add_field(name="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤:", value=ping_text, inline=False)
        
        embed.add_field(
            name="‚ÑπÔ∏è –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:",
            value=(
                "–ü—Ä–∏ –ø–æ–¥–∞—á–µ —Ä–∞–ø–æ—Ä—Ç–∞ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ä–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —É –ø–æ–¥–∞—é—â–µ–≥–æ "
                "–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª—è–º."
            ),
            inline=False
        )
        
        embed.add_field(
            name="üéØ –î–µ–π—Å—Ç–≤–∏—è:",
            value=(
                "‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É** - —Å–≤—è–∑–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –ø–∏–Ω–≥–∞\n"
                "‚Ä¢ **–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É** - —É–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
                "‚Ä¢ **–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ** - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤"
            ),
            inline=False
        )
        
        view = PingSettingsView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class ChannelsConfigView(ui.View):
    def __init__(self):
        super().__init__(timeout=300)  # 5 minutes timeout
        self.add_item(ChannelConfigSelect())

class ChannelConfigSelect(ui.Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª —É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
                emoji="üìù",
                value="dismissal"
            ),
            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞",
                emoji="üîç",
                value="audit"
            ),            discord.SelectOption(
                label="–ö–∞–Ω–∞–ª —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                emoji="üö´",
                value="blacklist"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="channel_config_select"
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_option = self.values[0]
        await self.show_channel_selection(interaction, selected_option)
    
    async def show_channel_selection(self, interaction: discord.Interaction, config_type: str):
        # Create channel selection modal
        modal = ChannelSelectionModal(config_type)
        await interaction.response.send_modal(modal)

class ChannelSelectionModal(ui.Modal):
    def __init__(self, config_type: str):
        self.config_type = config_type
        
        type_names = {
            "dismissal": "—É–≤–æ–ª—å–Ω–µ–Ω–∏–π",
            "audit": "–∞—É–¥–∏—Ç–∞", 
            "blacklist": "—á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        }
        
        super().__init__(title=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ {type_names.get(config_type, config_type)}")
        
        self.channel_input = ui.TextInput(
            label="ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: #–∫–∞–Ω–∞–ª-—É–≤–æ–ª—å–Ω–µ–Ω–∏–π –∏–ª–∏ 1234567890123456789",
            min_length=1,
            max_length=100,
            required=True        )
        self.add_item(self.channel_input)
    
    def _normalize_channel_name(self, channel_name, is_text_channel=True):
        """
        Normalize channel name by removing cosmetic elements and # prefix.
        For text channels, spaces are converted to hyphens.
        For voice channels, spaces remain as spaces.
        
        Examples:
        - "#‚îú„Äåüö®„Äç–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" -> "–Ω–∞–∑–≤–∞–Ω–∏–µ-–∫–∞–Ω–∞–ª–∞" (text channel)
        - "#‚îú„Äåüö®„Äç–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" -> "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞" (voice channel)
        - "#–Ω–∞–∑–≤–∞–Ω–∏–µ-–∫–∞–Ω–∞–ª–∞" -> "–Ω–∞–∑–≤–∞–Ω–∏–µ-–∫–∞–Ω–∞–ª–∞"
        - "‚îú„Äåüö®„Äç–Ω–∞–∑–≤–∞–Ω–∏–µ" -> "–Ω–∞–∑–≤–∞–Ω–∏–µ"
        """
        import re
        
        # Remove # prefix if present
        if channel_name.startswith('#'):
            channel_name = channel_name[1:]
        
        # Remove common cosmetic patterns at the beginning
        # Pattern matches: ‚îú„Äåemoji„Äç, ‚îú, „Äåemoji„Äç, ‚îî, ‚î¨, ‚î¥, etc.
        cosmetic_patterns = [
            r'^[‚îú‚îî‚î¨‚î¥‚îÇ‚îå‚îê‚îò‚î§‚îº‚îÄ‚î¥‚î¨]+[„Äå„Äé„Äê\[].*?[„Äç„Äè„Äë\]][^a-zA-Z–∞-—è—ë0-9\-_\s]*',  # ‚îú„Äåüö®„Äç
            r'^[‚îú‚îî‚î¨‚î¥‚îÇ‚îå‚îê‚îò‚î§‚îº‚îÄ‚î¥‚î¨]+[^a-zA-Z–∞-—è—ë0-9\-_\s]*',  # ‚îú
            r'^[„Äå„Äé„Äê\[].*?[„Äç„Äè„Äë\]][^a-zA-Z–∞-—è—ë0-9\-_\s]*',  # „Äåüö®„Äç
            r'^[^\w\-–∞-—è—ë\s]*',  # any other non-word characters at start
        ]
        
        for pattern in cosmetic_patterns:
            channel_name = re.sub(pattern, '', channel_name, flags=re.UNICODE)
        
        # Remove trailing non-word characters (but keep spaces for now)
        channel_name = re.sub(r'[^\w\-–∞-—è—ë\s]*$', '', channel_name, flags=re.UNICODE)
        
        # Convert spaces to hyphens for text channels
        if is_text_channel:
            channel_name = channel_name.replace(' ', '-')
        
        return channel_name.strip()
    
    def _find_channel_by_name(self, guild, search_name):
        """
        Smart channel search that ignores cosmetic elements.
        Searches both text and voice channels, with proper space/hyphen handling.
        """
        # First, try to find text channels (spaces converted to hyphens)
        normalized_search_text = self._normalize_channel_name(search_name, is_text_channel=True).lower()
        
        # If the normalized search is not empty, search text channels
        if normalized_search_text:
            # First, try exact match with normalized names in text channels
            for channel in guild.text_channels:
                normalized_channel_name = self._normalize_channel_name(channel.name, is_text_channel=True).lower()
                if normalized_channel_name == normalized_search_text:
                    return channel
            
            # If no exact match, try partial match in text channels
            for channel in guild.text_channels:
                normalized_channel_name = self._normalize_channel_name(channel.name, is_text_channel=True).lower()
                if normalized_search_text in normalized_channel_name or normalized_channel_name in normalized_search_text:
                    return channel
        
        # Then, try to find voice channels (spaces preserved)
        normalized_search_voice = self._normalize_channel_name(search_name, is_text_channel=False).lower()
        
        if normalized_search_voice:
            # First, try exact match with normalized names in voice channels
            for channel in guild.voice_channels:
                normalized_channel_name = self._normalize_channel_name(channel.name, is_text_channel=False).lower()
                if normalized_channel_name == normalized_search_voice:
                    return channel
            
            # If no exact match, try partial match in voice channels
            for channel in guild.voice_channels:
                normalized_channel_name = self._normalize_channel_name(channel.name, is_text_channel=False).lower()
                if normalized_search_voice in normalized_channel_name or normalized_channel_name in normalized_search_voice:
                    return channel
        
        # If still no match, try original Discord search as fallback (text channels only for compatibility)
        return discord.utils.get(guild.text_channels, name=search_name)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            channel_text = self.channel_input.value.strip()
            
            # Try to parse channel mention or ID
            channel = None
            
            # Check if it's a mention
            if channel_text.startswith('<#') and channel_text.endswith('>'):
                channel_id = int(channel_text[2:-1])
                channel = interaction.guild.get_channel(channel_id)
            else:
                # Try to parse as ID
                try:
                    channel_id = int(channel_text)
                    channel = interaction.guild.get_channel(channel_id)
                except ValueError:
                    # Try to find by name using smart search
                    channel = self._find_channel_by_name(interaction.guild, channel_text)
            
            if not channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ ID, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.",
                    ephemeral=True
                )
                return
            
            if not isinstance(channel, discord.TextChannel):
                await interaction.response.send_message(
                    "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º.",
                    ephemeral=True
                )
                return
              # Save configuration
            config = load_config()
            config[f'{self.config_type}_channel'] = channel.id
            save_config(config)
            
            # Define type names and handle button messages
            type_names = {
                "dismissal": "—Ä–∞–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ",
                "audit": "–∫–∞–¥—Ä–æ–≤–æ–≥–æ –∞—É–¥–∏—Ç–∞",
                "blacklist": "—á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            }
            type_name = type_names.get(self.config_type, self.config_type)
            
            # Send appropriate button message to the channel
            button_message_added = False
            if self.config_type == "dismissal":
                await send_dismissal_button_message(channel)
                button_message_added = True
            
            embed = discord.Embed(
                title="‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ",
                description=f"–ö–∞–Ω–∞–ª –¥–ª—è {type_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            # Customize the description based on whether button was added
            if button_message_added:
                embed.add_field(
                    name="–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:",
                    value=f"‚Ä¢ –ö–∞–Ω–∞–ª {channel.mention} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {type_name}\n‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª",
                    inline=False
                )
            else:
                embed.add_field(
                    name="–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:",
                    value=f"‚Ä¢ –ö–∞–Ω–∞–ª {channel.mention} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è {type_name}",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in channel configuration: {e}")
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞: {e}",
                ephemeral=True
            )

class SettingsView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # Persistent view
        self.add_item(MainSettingsSelect())
    
    async def on_timeout(self):
        # This won't be called for persistent views, but good to have
        for item in self.children:
            item.disabled = True

class ExcludedRolesView(ui.View):
    def __init__(self):
        super().__init__(timeout=300)  # 5 minutes timeout
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏", style=discord.ButtonStyle.green)
    async def add_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AddExcludedRolesModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª–∏", style=discord.ButtonStyle.red)
    async def remove_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        excluded_roles_ids = config.get('excluded_roles', [])
        
        if not excluded_roles_ids:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π-–∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                ephemeral=True
            )
            return
        
        modal = RemoveExcludedRolesModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", style=discord.ButtonStyle.danger)
    async def clear_all_roles(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        config['excluded_roles'] = []
        save_config(config)
        
        embed = discord.Embed(
            title="‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω",
            description="–í—Å–µ —Ä–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ –±—É–¥—É—Ç —Å–Ω–∏–º–∞—Ç—å—Å—è –≤—Å–µ —Ä–æ–ª–∏ –∫—Ä–æ–º–µ @everyone.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )        
        await interaction.response.send_message(embed=embed, ephemeral=True)

class AddExcludedRolesModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="@–†–æ–ª—å1, @–†–æ–ª—å2, 123456789012345678 –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π",
            style=discord.TextStyle.paragraph,
            min_length=1,
            max_length=1000,
            required=True
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            role_inputs = [r.strip() for r in roles_text.split(',')]
            
            config = load_config()
            excluded_roles = config.get('excluded_roles', [])
            
            added_roles = []
            failed_roles = []
            
            for role_input in role_inputs:
                if not role_input:
                    continue
                    
                role = None
                
                # Try to parse role mention
                if role_input.startswith('<@&') and role_input.endswith('>'):
                    try:
                        role_id = int(role_input[3:-1])
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        pass
                else:
                    # Try to parse as ID
                    try:
                        role_id = int(role_input)
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        # Try to find by name
                        role = discord.utils.get(interaction.guild.roles, name=role_input)
                
                if role:
                    if role.id not in excluded_roles:
                        excluded_roles.append(role.id)
                        added_roles.append(role.mention)
                    else:
                        failed_roles.append(f"{role_input} (—É–∂–µ –≤ —Å–ø–∏—Å–∫–µ)")
                else:
                    failed_roles.append(f"{role_input} (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
            # Save updated config
            config['excluded_roles'] = excluded_roles
            save_config(config)
            
            # Create response embed
            embed = discord.Embed(
                title="‚úÖ –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            if added_roles:
                embed.add_field(
                    name="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:",
                    value="\n".join([f"‚Ä¢ {role}" for role in added_roles]),
                    inline=False
                )
            
            if failed_roles:
                embed.add_field(
                    name="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:",
                    value="\n".join([f"‚Ä¢ {role}" for role in failed_roles]),
                    inline=False
                )
            
            if not added_roles and not failed_roles:
                embed.description = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏."
                embed.color = discord.Color.red()
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in add excluded roles: {e}")
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}",
                ephemeral=True
            )

class RemoveExcludedRolesModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è")
        
        self.roles_input = ui.TextInput(
            label="–†–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="@–†–æ–ª—å1, @–†–æ–ª—å2, 123456789012345678 –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π",
            style=discord.TextStyle.paragraph,
            min_length=1,
            max_length=1000,
            required=True
        )
        self.add_item(self.roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            roles_text = self.roles_input.value.strip()
            role_inputs = [r.strip() for r in roles_text.split(',')]
            
            config = load_config()
            excluded_roles = config.get('excluded_roles', [])
            
            removed_roles = []
            failed_roles = []
            
            for role_input in role_inputs:
                if not role_input:
                    continue
                    
                role = None
                
                # Try to parse role mention
                if role_input.startswith('<@&') and role_input.endswith('>'):
                    try:
                        role_id = int(role_input[3:-1])
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        pass
                else:
                    # Try to parse as ID
                    try:
                        role_id = int(role_input)
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        # Try to find by name
                        role = discord.utils.get(interaction.guild.roles, name=role_input)
                
                if role and role.id in excluded_roles:
                    excluded_roles.remove(role.id)
                    removed_roles.append(role.mention)
                else:
                    if role:
                        failed_roles.append(f"{role_input} (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)")
                    else:
                        failed_roles.append(f"{role_input} (—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
            
            # Save updated config
            config['excluded_roles'] = excluded_roles
            save_config(config)
            
            # Create response embed
            embed = discord.Embed(
                title="‚úÖ –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            if removed_roles:
                embed.add_field(
                    name="‚ûñ –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏:",
                    value="\n".join([f"‚Ä¢ {role}" for role in removed_roles]),
                    inline=False
                )
            
            if failed_roles:                embed.add_field(
                    name="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:",
                    value="\n".join([f"‚Ä¢ {role}" for role in failed_roles]),
                    inline=False
                )
            
            if not removed_roles and not failed_roles:
                embed.description = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏."
                embed.color = discord.Color.red()
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in remove excluded roles: {e}")
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}",
                ephemeral=True
            )

class PingSettingsView(ui.View):
    def __init__(self):
        super().__init__(timeout=300)  # 5 minutes timeout
    
    @discord.ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", style=discord.ButtonStyle.green)
    async def add_ping_setting(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AddPingSettingModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="‚ûñ –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", style=discord.ButtonStyle.red)
    async def remove_ping_setting(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        ping_settings = config.get('ping_settings', {})
        
        if not ping_settings:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                ephemeral=True
            )
            return
        
        modal = RemovePingSettingModal()
        await interaction.response.send_modal(modal)
    
    @discord.ui.button(label="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", style=discord.ButtonStyle.danger)
    async def clear_all_pings(self, interaction: discord.Interaction, button: discord.ui.Button):
        config = load_config()
        config['ping_settings'] = {}
        save_config(config)
        
        embed = discord.Embed(
            title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤ –æ—á–∏—â–µ–Ω—ã",
            description="–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–¥–∞—á–µ —Ä–∞–ø–æ—Ä—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )        
        await interaction.response.send_message(embed=embed, ephemeral=True)

class AddPingSettingModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∏–Ω–≥–æ–≤")
        
        self.department_input = ui.TextInput(
            label="–†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
            placeholder="@–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏ –∏–ª–∏ ID —Ä–æ–ª–∏",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.department_input)
        
        self.ping_roles_input = ui.TextInput(
            label="–†–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            placeholder="@–ö–æ–º–∞–Ω–¥–∏—Ä –£–í–ü, @–ó–∞–º. –ö–æ–º–∞–Ω–¥–∏—Ä–∞ –£–í–ü –∏–ª–∏ ID —Ä–æ–ª–µ–π",
            style=discord.TextStyle.paragraph,
            min_length=1,
            max_length=1000,
            required=True
        )
        self.add_item(self.ping_roles_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Parse department role
            department_text = self.department_input.value.strip()
            department_role = None
            
            if department_text.startswith('<@&') and department_text.endswith('>'):
                try:
                    role_id = int(department_text[3:-1])
                    department_role = interaction.guild.get_role(role_id)
                except ValueError:
                    pass
            else:
                try:
                    role_id = int(department_text)
                    department_role = interaction.guild.get_role(role_id)
                except ValueError:
                    department_role = discord.utils.get(interaction.guild.roles, name=department_text)
            
            if not department_role:
                await interaction.response.send_message(
                    "‚ùå –†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ä–æ–ª—å.",
                    ephemeral=True
                )
                return
            
            # Parse ping roles
            ping_roles_text = self.ping_roles_input.value.strip()
            ping_role_inputs = [r.strip() for r in ping_roles_text.split(',')]
            
            ping_roles = []
            failed_roles = []
            
            for role_input in ping_role_inputs:
                if not role_input:
                    continue
                    
                role = None
                
                if role_input.startswith('<@&') and role_input.endswith('>'):
                    try:
                        role_id = int(role_input[3:-1])
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        pass
                else:
                    try:
                        role_id = int(role_input)
                        role = interaction.guild.get_role(role_id)
                    except ValueError:
                        role = discord.utils.get(interaction.guild.roles, name=role_input)
                
                if role:
                    ping_roles.append(role)
                else:
                    failed_roles.append(role_input)
            
            if not ping_roles:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞.",
                    ephemeral=True
                )
                return
            
            # Save configuration
            config = load_config()
            ping_settings = config.get('ping_settings', {})
            ping_settings[str(department_role.id)] = [role.id for role in ping_roles]
            config['ping_settings'] = ping_settings
            save_config(config)
            
            # Create response embed
            embed = discord.Embed(
                title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            
            embed.add_field(
                name="–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:",
                value=department_role.mention,
                inline=False
            )
            
            embed.add_field(
                name="–†–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞:",
                value=", ".join([role.mention for role in ping_roles]),
                inline=False
            )
            
            if failed_roles:
                embed.add_field(
                    name="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:",
                    value="\n".join([f"‚Ä¢ {role}" for role in failed_roles]),
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except Exception as e:
            print(f"Error in add ping setting: {e}")
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}",
                ephemeral=True
            )

class RemovePingSettingModal(ui.Modal):
    def __init__(self):
        super().__init__(title="–£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∏–Ω–≥–æ–≤")
        
        self.department_input = ui.TextInput(
            label="–†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            placeholder="@–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏ –∏–ª–∏ ID —Ä–æ–ª–∏",
            min_length=1,
            max_length=100,
            required=True
        )
        self.add_item(self.department_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            # Parse department role
            department_text = self.department_input.value.strip()
            department_role = None
            
            if department_text.startswith('<@&') and department_text.endswith('>'):
                try:
                    role_id = int(department_text[3:-1])
                    department_role = interaction.guild.get_role(role_id)
                except ValueError:
                    pass
            else:
                try:
                    role_id = int(department_text)
                    department_role = interaction.guild.get_role(role_id)
                except ValueError:
                    department_role = discord.utils.get(interaction.guild.roles, name=department_text)
            
            if not department_role:
                await interaction.response.send_message(
                    "‚ùå –†–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ä–æ–ª—å.",
                    ephemeral=True
                )
                return
            
            # Remove from configuration
            config = load_config()
            ping_settings = config.get('ping_settings', {})
            
            if str(department_role.id) in ping_settings:
                del ping_settings[str(department_role.id)]
                config['ping_settings'] = ping_settings
                save_config(config)
                
                embed = discord.Embed(
                    title="‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–≥–æ–≤ —É–¥–∞–ª–µ–Ω–∞",
                    description=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–≥–æ–≤ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {department_role.mention} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    color=discord.Color.green(),
                    timestamp=discord.utils.utcnow()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message(
                    f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏–Ω–≥–æ–≤ –¥–ª—è {department_role.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                    ephemeral=True
                )
            
        except Exception as e:
            print(f"Error in remove ping setting: {e}")
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}",
                ephemeral=True
            )

# Function to send settings message
async def send_settings_message(interaction: discord.Interaction):
    embed = discord.Embed(        title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord –±–æ—Ç–∞",
        description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.",
        color=discord.Color.blue(),
        timestamp=discord.utils.utcnow()
    )
    embed.add_field(
        name="üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        value=(
            "‚Ä¢ **üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n"
            "‚Ä¢ **üõ°Ô∏è –†–æ–ª–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è** - —Ä–æ–ª–∏, –Ω–µ —Å–Ω–∏–º–∞–µ–º—ã–µ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏\n"
            "‚Ä¢ **üì¢ –ü–∏–Ω–≥–∏** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π\n"
            "‚Ä¢ **‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏** - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        ),
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        value="1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        inline=False
    )
    
    embed.set_footer(text="–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
    
    view = SettingsView()
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# Function to get user's department role for ping notifications
def get_user_department_role(user, ping_settings):
    """Get the user's department role that has ping settings configured"""
    for department_role_id in ping_settings.keys():
        department_role = user.guild.get_role(int(department_role_id))
        if department_role and department_role in user.roles:
            return department_role
    return None

# Function to get ping roles for department
def get_ping_roles_for_department(department_role, ping_settings, guild):
    """Get ping roles for a specific department"""
    if not department_role:
        return []
    
    ping_role_ids = ping_settings.get(str(department_role.id), [])
    ping_roles = []
    
    for role_id in ping_role_ids:
        role = guild.get_role(role_id)
        if role:
            ping_roles.append(role)
    
    return ping_roles
