import json
import os
import discord
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from utils.config_manager import load_config


class SuppliesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.data_file = "data/supplies_timers.json"
        self._ensure_data_file()
        
        # –û–±—ä–µ–∫—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è = —Ä—è–¥ –∫–Ω–æ–ø–æ–∫)
        self.categories = {
            "army": {
                "object_7": {
                    "name": "–û–±—ä–µ–∫—Ç ‚Ññ7", 
                    "emoji": "üè≠"
                },
                "military_warehouses": {
                    "name": "–í–æ–µ–Ω–Ω—ã–µ –°–∫–ª–∞–¥—ã",
                    "emoji": "üì¶" 
                },
                "radar_orbit": {
                    "name": "–†–õ–° –û—Ä–±–∏—Ç–∞",
                    "emoji": "üì°"
                }
            },
            "medical": {
                "gsmo": {
                    "name": "–ì–°–ú–û",
                    "emoji": "üíâ"
                },
                "zmh": {
                    "name": "–ó–ú–•",
                    "emoji": "üßë‚Äç‚öïÔ∏è"
                },
                "ms": {
                    "name": "–ú–°", 
                    "emoji": "üò∑"
                },
                "cms": {
                    "name": "–¶–ú–°", 
                    "emoji": "‚öïÔ∏è"
                }
            },
            "gov": {
                "finka": {
                    "name": "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞",
                    "emoji": "üí∞"
                }
            }
        }
        
        # –ü–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.objects = {}
        for category_key, category_objects in self.categories.items():
            self.objects.update(category_objects)
    
    def _ensure_data_file(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
        os.makedirs("data", exist_ok=True)
        
        if not os.path.exists(self.data_file):
            initial_data = {
                "active_timers": {}
            }
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(initial_data, f, ensure_ascii=False, indent=2)
    
    def _load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
            return {"active_timers": {}}
    
    def _save_data(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
    
    def get_categories(self) -> Dict[str, Dict[str, Dict[str, str]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏"""
        return self.categories
    
    def get_category_objects(self, category_key: str) -> Dict[str, Dict[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.categories.get(category_key, {})
    
    def get_all_objects_for_choices(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è discord.app_commands.Choice"""
        choices = []
        for category_key, category_objects in self.categories.items():
            for object_key, object_info in category_objects.items():
                choice_name = f"{object_info['emoji']} {object_info['name']}"
                choices.append({
                    'name': choice_name,
                    'value': object_key
                })
        return choices
    
    async def start_timer(self, object_key: str, user) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—ä–µ–∫—Ç–∞"""
        try:
            if object_key not in self.objects:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç: {object_key}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            config = load_config()
            notification_channel_id = config.get('supplies', {}).get('notification_channel_id')
            notification_channel = None
            
            if notification_channel_id and hasattr(user, 'guild'):
                notification_channel = user.guild.get_channel(notification_channel_id)
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            await self._delete_all_messages_for_object(object_key, notification_channel)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            if self.is_timer_active(object_key):
                print(f"‚ö†Ô∏è –¢–∞–π–º–µ—Ä –¥–ª—è {object_key} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return False
            
            config = load_config()
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            timer_duration_minutes = config.get('supplies', {}).get('timer_duration_minutes', 
                                             config.get('supplies', {}).get('timer_duration_hours', 4) * 60)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä–∞
            now = datetime.now()
            end_time = now + timedelta(minutes=timer_duration_minutes)
            
            timer_data = {
                "started_by": user.id,
                "started_by_name": user.display_name,
                "start_time": now.isoformat(),
                "end_time": end_time.isoformat(),
                "duration_minutes": timer_duration_minutes,
                "warning_sent": False,
                "object_name": self.objects[object_key]["name"],
                "emoji": self.objects[object_key]["emoji"],
                "notification_messages": {
                    "start_message_id": None,
                    "warning_message_id": None
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            data = self._load_data()
            data["active_timers"][object_key] = timer_data
            self._save_data(data)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª–æ–≥–∞
            hours = timer_duration_minutes // 60
            remaining_minutes = timer_duration_minutes % 60
            if hours > 0 and remaining_minutes > 0:
                duration_str = f"{hours}—á {remaining_minutes}–º"
            elif hours > 0:
                duration_str = f"{hours}—á"
            else:
                duration_str = f"{remaining_minutes}–º"
            
            print(f"‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è {object_key} –Ω–∞ {duration_str}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è {object_key}: {e}")
            return False
    
    def is_timer_active(self, object_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—ä–µ–∫—Ç–∞"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if object_key not in active_timers:
                return False
            
            timer_info = active_timers[object_key]
            end_time = datetime.fromisoformat(timer_info["end_time"])
            
            # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if datetime.now() > end_time:
                del active_timers[object_key]
                self._save_data(data)
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–µ—Ä–∞ {object_key}: {e}")
            return False
    
    def get_remaining_time(self, object_key: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if object_key not in active_timers:
                return "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
            
            timer_info = active_timers[object_key]
            end_time = datetime.fromisoformat(timer_info["end_time"])
            now = datetime.now()
            
            if now > end_time:
                return "–ò—Å—Ç–µ–∫"
            
            remaining = end_time - now
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            
            if hours > 0:
                return f"{hours}—á {minutes}–º"
            else:
                return f"{minutes}–º"
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {object_key}: {e}")
            return "–û—à–∏–±–∫–∞"
    
    def get_active_timers(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã
            current_time = datetime.now()
            expired_timers = []
            
            for object_key, timer_info in active_timers.items():
                end_time = datetime.fromisoformat(timer_info["end_time"])
                if current_time > end_time:
                    expired_timers.append(object_key)
            
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã
            if expired_timers:
                for expired in expired_timers:
                    del active_timers[expired]
                self._save_data(data)
            
            return active_timers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
            return {}
    
    async def cancel_timer_with_cleanup(self, object_key: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            config = load_config()
            notification_channel_id = config.get('supplies', {}).get('notification_channel_id')
            
            if notification_channel_id and self.bot:
                channel = self.bot.get_channel(notification_channel_id)
                if channel:
                    await self._delete_all_messages_for_object(object_key, channel)
            
            # –ó–∞—Ç–µ–º –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if object_key in active_timers:
                del active_timers[object_key]
                self._save_data(data)
                print(f"‚úÖ –¢–∞–π–º–µ—Ä –¥–ª—è {object_key} –æ—Ç–º–µ–Ω–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")
                return True
            else:
                print(f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è {object_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –¥–ª—è {object_key}: {e}")
            return False
    
    def get_timer_info(self, object_key: str) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞–π–º–µ—Ä–µ"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            return active_timers.get(object_key)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º–µ—Ä–µ {object_key}: {e}")
            return None
    
    def get_expired_timers(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            current_time = datetime.now()
            expired_timers = {}
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã
            for object_key, timer_info in list(active_timers.items()):
                end_time = datetime.fromisoformat(timer_info["end_time"])
                if current_time > end_time:
                    expired_timers[object_key] = timer_info
                    del active_timers[object_key]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if expired_timers:
                self._save_data(data)
            
            return expired_timers
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {e}")
            return {}
    
    async def save_notification_message(self, object_key: str, message_id: int, message_type: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if object_key in active_timers:
                if "notification_messages" not in active_timers[object_key]:
                    active_timers[object_key]["notification_messages"] = {}
                
                active_timers[object_key]["notification_messages"][f"{message_type}_message_id"] = message_id
                self._save_data(data)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {message_type} –¥–ª—è {object_key}: {message_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def clear_warning_messages(self, channel):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (—Å –ø–∏–Ω–≥–∞–º–∏ —Ä–æ–ª–µ–π)"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            for object_key, timer_info in active_timers.items():
                notification_messages = timer_info.get("notification_messages", {})
                warning_message_id = notification_messages.get("warning_message_id")
                
                if warning_message_id:
                    try:
                        message = await channel.fetch_message(warning_message_id)
                        await message.delete()
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –¥–ª—è {object_key}")
                    except discord.NotFound:
                        pass
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {warning_message_id}: {e}")
                    
                    # –û—á–∏—â–∞–µ–º ID
                    notification_messages["warning_message_id"] = None
            
            self._save_data(data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def clear_start_message(self, object_key: str, channel):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if object_key in active_timers:
                notification_messages = active_timers[object_key].get("notification_messages", {})
                start_message_id = notification_messages.get("start_message_id")
                
                if start_message_id:
                    try:
                        message = await channel.fetch_message(start_message_id)
                        await message.delete()
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {object_key}")
                    except discord.NotFound:
                        pass
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {start_message_id}: {e}")
                    
                    # –û—á–∏—â–∞–µ–º ID
                    notification_messages["start_message_id"] = None
                    self._save_data(data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _delete_all_messages_for_object(self, object_key: str, channel=None):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
        try:
            config = load_config()
            
            # –ï—Å–ª–∏ channel –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not channel:
                channel_id = config.get('supplies', {}).get('notification_channel_id')
                
                if not channel_id or not self.bot:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π {object_key}")
                    return
                
                channel = self.bot.get_channel(channel_id)
                if not channel:
                    print(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            object_info = self.objects.get(object_key, {})
            object_name = object_info.get('name', object_key)
            
            print(f"üîç –ò—â–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{object_name}' –≤ –∫–∞–Ω–∞–ª–µ")
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            deleted_count = 0
            async for message in channel.history(limit=50):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
                if message.author == channel.guild.me and message.embeds:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π embed –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                    for embed in message.embeds:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º title –∏ description
                        embed_text = (embed.title or '') + ' ' + (embed.description or '')
                        
                        if object_name in embed_text:
                            try:
                                await message.delete()
                                deleted_count += 1
                                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {object_name}: {message.id}")
                                break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                            except (discord.NotFound, discord.HTTPException) as e:
                                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}: {e}")
                                
            if deleted_count > 0:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è '{object_name}'")
            else:
                print(f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è '{object_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {object_key}: {e}")

    async def update_notification_messages(self, channel):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            if not active_timers:
                return
            
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {len(active_timers)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π...")
            
            for object_key, timer_info in active_timers.items():
                notification_messages = timer_info.get("notification_messages", {})
                start_message_id = notification_messages.get("start_message_id")
                
                if not start_message_id:
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await channel.fetch_message(start_message_id)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    remaining_time = self.get_remaining_time(object_key)
                    
                    if remaining_time == "–ò—Å—Ç–µ–∫" or remaining_time == "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω":
                        continue  # –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ—Ä–æ —É–¥–∞–ª–∏—Ç—Å—è
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
                    object_name = timer_info.get("object_name", object_key)
                    emoji = timer_info.get("emoji", "üì¶")
                    started_by_name = timer_info.get("started_by_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
                    embed = discord.Embed(
                        title=f"{emoji} –ü–æ—Å—Ç–∞–≤–∫–∞ **{object_name}** –∑–∞–ø—É—â–µ–Ω–∞",
                        description="",
                        color=discord.Color.blue(),
                        timestamp=datetime.now()
                    )
                    
                    embed.add_field(
                        name=f"‚è∞ –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: **{remaining_time}**",
                        value="",
                        inline=False
                    )
                    
                    embed.add_field(
                        name="üë§ –ó–∞–ø—É—Å—Ç–∏–ª",
                        value=started_by_name,
                        inline=True
                    )
                    
                    embed.set_footer(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–∞–π–º–µ—Ä–∞")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    await message.edit(embed=embed)
                    
                except discord.NotFound:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –æ—á–∏—â–∞–µ–º ID
                    notification_messages["start_message_id"] = None
                    print(f"‚ö†Ô∏è –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {start_message_id} –¥–ª—è {object_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {start_message_id} –¥–ª—è {object_key}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã ID)
            self._save_data(data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {e}")

    async def update_warning_messages(self, channel):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            data = self._load_data()
            active_timers = data.get("active_timers", {})
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
            for object_key, timer_info in active_timers.items():
                await self._update_warning_message_for_timer(channel, object_key, timer_info, data)
            
            # –ó–∞—Ç–µ–º –∏—â–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤
            await self._update_expired_warning_messages(channel)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã ID)
            self._save_data(data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {e}")
    
    async def _update_warning_message_for_timer(self, channel, object_key, timer_info, data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç warning —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞"""
        try:
            notification_messages = timer_info.get("notification_messages", {})
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π, —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã ID
            warning_message_id = notification_messages.get("warning_message_id")
            warning_message_ids = notification_messages.get("warning_message_ids", [])
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            all_warning_ids = []
            if warning_message_id:
                all_warning_ids.append(warning_message_id)
            all_warning_ids.extend(warning_message_ids)
            
            if not all_warning_ids:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            remaining_time = self.get_remaining_time(object_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
            object_name = timer_info.get("object_name", object_key)
            emoji = timer_info.get("emoji", "üì¶")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            for message_id in all_warning_ids[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                print(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å warning —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await channel.fetch_message(message_id)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
                    if remaining_time == "–ò—Å—Ç–µ–∫" or remaining_time == "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω":
                        # –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ - –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–µ–ª–µ–Ω—ã–º
                        embed = discord.Embed(
                            title="‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!",
                            description=f"{emoji} **{object_name}** –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!",
                            color=discord.Color.green(),
                            timestamp=datetime.now()
                        )
                        
                        embed.add_field(
                            name="üéØ –°—Ç–∞—Ç—É—Å",
                            value=(
                                f"**–û–±—ä–µ–∫—Ç:** {object_name}\n"
                                f"**–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É\n"
                            ),
                            inline=False
                        )
                    else:
                        # –¢–∞–π–º–µ—Ä –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                        # –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if "—á" in remaining_time and "–º" in remaining_time:
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –≤–∏–¥–∞ "1—á 30–º"
                            parts = remaining_time.replace("—á", "").replace("–º", "").split()
                            hours = int(parts[0]) if len(parts) > 0 else 0
                            minutes = int(parts[1]) if len(parts) > 1 else 0
                            total_minutes = hours * 60 + minutes
                        elif "—á" in remaining_time:
                            # –¢–æ–ª—å–∫–æ —á–∞—Å—ã "2—á"
                            hours = int(remaining_time.replace("—á", ""))
                            total_minutes = hours * 60
                        elif "–º" in remaining_time:
                            # –¢–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã "15–º"
                            total_minutes = int(remaining_time.replace("–º", ""))
                        else:
                            total_minutes = 0
                        
                        embed = discord.Embed(
                            title="‚ö†Ô∏è –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞!",
                            description=f"{emoji} **{object_name}** –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ **{total_minutes} –º–∏–Ω—É—Ç**!",
                            color=discord.Color.orange(),
                            timestamp=datetime.now()
                        )
                        
                        embed.add_field(
                            name="‚è∞ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                            value=(
                                f"**–û–±—ä–µ–∫—Ç:** {object_name}\n"
                                f"**–û—Å—Ç–∞–ª–æ—Å—å:** {remaining_time}\n"
                            ),
                            inline=False
                        )
                    
                    embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    await message.edit(embed=embed)
                    
                except discord.NotFound:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, —É–±–∏—Ä–∞–µ–º ID –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
                    if message_id == warning_message_id:
                        notification_messages["warning_message_id"] = None
                        print(f"‚ö†Ô∏è –û—á–∏—â–µ–Ω warning_message_id {message_id} –¥–ª—è {object_key}")
                    if message_id in warning_message_ids:
                        warning_message_ids.remove(message_id)
                        print(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω –∏–∑ warning_message_ids {message_id} –¥–ª—è {object_key}")
                    print(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {message_id} –¥–ª—è {object_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è {message_id} –¥–ª—è {object_key}: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è warning —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {object_key}: {e}")
    
    async def _update_expired_warning_messages(self, channel):
        """–ò—â–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç warning —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        try:
            print("üîç –ò—â–µ–º warning —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤...")
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            async for message in channel.history(limit=100):
                if (message.author == channel.guild.me and message.embeds and 
                    len(message.embeds) > 0 and message.embeds[0].title and
                    "‚ö†Ô∏è –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞!" in message.embeds[0].title):
                    
                    embed = message.embeds[0]
                    description = embed.description or ""
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    for object_key, object_info in self.objects.items():
                        object_name = object_info["name"]
                        emoji = object_info["emoji"]
                        
                        if object_name in description and emoji in description:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                            remaining_time = self.get_remaining_time(object_key)
                            
                            if remaining_time == "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω" or remaining_time == "–ò—Å—Ç–µ–∫":
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ —Å—Ç–∞—Ç—É—Å–∞ "–≥–æ—Ç–æ–≤–æ"
                                print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–µ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {object_name}")
                                
                                new_embed = discord.Embed(
                                    title="‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!",
                                    description=f"{emoji} **{object_name}** –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!",
                                    color=discord.Color.green(),
                                    timestamp=datetime.now()
                                )
                                
                                new_embed.add_field(
                                    name="üéØ –°—Ç–∞—Ç—É—Å",
                                    value=(
                                        f"**–û–±—ä–µ–∫—Ç:** {object_name}\n"
                                        f"**–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É\n"
                                    ),
                                    inline=False
                                )
                                
                                new_embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
                                
                                try:
                                    await message.edit(embed=new_embed)
                                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ warning —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {object_name}")
                                except Exception as e:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–µ–≥–æ warning —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            break
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö warning —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
