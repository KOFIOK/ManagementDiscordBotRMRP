"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–ª–∞–¥–∞
"""

import discord
from datetime import datetime
from typing import Optional, Dict, List


class WarehouseRequestItem:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    
    def __init__(self, category: str, item_name: str, quantity: int, user_name: str, 
                 user_static: str, position: str, rank: str):
        self.category = category
        self.item_name = item_name
        self.quantity = quantity
        self.user_name = user_name
        self.user_static = user_static
        self.position = position
        self.rank = rank
        self.timestamp = datetime.now()
    
    def __str__(self):
        return f"**{self.item_name}** √ó {self.quantity}"


class WarehouseRequestCart:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.items: List[WarehouseRequestItem] = []
        self.created_at = datetime.now()
    
    def add_item(self, item: WarehouseRequestItem):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
        for existing_item in self.items:
            if (existing_item.category == item.category and 
                existing_item.item_name == item.item_name):
                # –ï—Å–ª–∏ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                existing_item.quantity += item.quantity
                return
        # –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        self.items.append(item)
    
    def remove_item_by_index(self, index: int):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É (0-based)"""
        if 0 <= index < len(self.items):
            self.items.pop(index)
            return True
        return False
    
    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
        self.items.clear()
    
    def is_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—É—Å—Ç–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞"""
        return len(self.items) == 0
    
    def get_total_items(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        return sum(item.quantity for item in self.items)
    
    def get_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
        if self.is_empty():
            return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        
        summary = []
        for i, item in enumerate(self.items, 1):
            summary.append(f"{i}. {str(item)}")
        
        return "\n".join(summary)
    
    def get_summary_without_numbers(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤ (–¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–∏)"""
        if self.is_empty():
            return "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        
        summary = []
        for item in self.items:
            summary.append(str(item))
        
        return "\n".join(summary)
    
    def get_item_quantity(self, category: str, item_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
        for item in self.items:
            if item.category == category and item.item_name == item_name:
                return item.quantity
        return 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts: Dict[int, WarehouseRequestCart] = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
user_cart_messages: Dict[int, discord.Message] = {}


def get_user_cart(user_id: int) -> WarehouseRequestCart:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_carts:
        user_carts[user_id] = WarehouseRequestCart(user_id)
    return user_carts[user_id]


def clear_user_cart(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
    try:
        cart_cleared = False
        message_cleared = False
        
        if user_id in user_carts:
            del user_carts[user_id]
            cart_cleared = True
            
        if user_id in user_cart_messages:
            del user_cart_messages[user_id]
            message_cleared = True
            
        if cart_cleared or message_cleared:
            print(f"üßπ CART CLEANUP: –û—á–∏—â–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∫–æ—Ä–∑–∏–Ω–∞: {'‚úÖ' if cart_cleared else '‚ùå'}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ' if message_cleared else '‚ùå'})")
        
    except Exception as e:
        print(f"‚ùå CART CLEANUP ERROR: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è {user_id}: {e}")


def clear_user_cart_safe(user_id: int, reason: str = "unknown"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        print(f"üßπ CART SAFE CLEAR: –ù–∞—á–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
        clear_user_cart(user_id)
    except Exception as e:
        print(f"‚ùå CART SAFE CLEAR ERROR: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è {user_id}: {e}")


def get_user_cart_message(user_id: int) -> Optional[discord.Message]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_cart_messages.get(user_id)


def set_user_cart_message(user_id: int, message: discord.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_cart_messages[user_id] = message
