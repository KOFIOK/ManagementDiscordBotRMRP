"""
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å–∫–ª–∞–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

import re
import discord
from typing import List


class WarehouseEditSelectView(discord.ui.View):
    """View —Å Select Menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, original_message: discord.Message):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤—ã–±–æ—Ä
        self.original_message = original_message
        
        # –°–æ–∑–¥–∞–µ–º select menu —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–∑ –∑–∞—è–≤–∫–∏
        self.add_item(WarehouseEditSelect(original_message))


class WarehouseEditSelect(discord.ui.Select):
    """Select –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, original_message: discord.Message):
        self.original_message = original_message
        
        # –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ embed –∑–∞—è–≤–∫–∏
        items = self._parse_items_from_embed()
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è select menu
        options = []
        for i, (item_text, item_name, quantity) in enumerate(items):
            if i < 25:  # Discord –ª–∏–º–∏—Ç –Ω–∞ select options
                options.append(discord.SelectOption(
                    label=f"{i+1}. {item_name}",
                    description=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}",
                    value=str(i),
                    emoji="üì¶"
                ))
        
        if not options:
            options.append(discord.SelectOption(
                label="–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                description="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏",
                value="error"
            ))
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...",
            options=options,
            custom_id="warehouse_edit_select"
        )
        
        self.parsed_items = items
    
    def _parse_items_from_embed(self) -> List[tuple]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ embed –∑–∞—è–≤–∫–∏"""
        items = []
        
        try:
            embed = self.original_message.embeds[0]
            
            # –ò—â–µ–º –ø–æ–ª–µ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
            for field in embed.fields:
                if "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã" in field.name.lower() or "–ø—Ä–µ–¥–º–µ—Ç" in field.name.lower():
                    field_value = field.value
                    
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. **AK-74M** √ó 2"
                    lines = field_value.split('\n')
                    for line in lines:
                        line = line.strip()
                        if '√ó' in line or 'x' in line:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "1. **–Ω–∞–∑–≤–∞–Ω–∏–µ** √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                            match = re.match(r'(\d+)\.\s*\*\*(.*?)\*\*\s*[√óx]\s*(\d+)', line)
                            if match:
                                number, item_name, quantity = match.groups()
                                items.append((line, item_name.strip(), int(quantity)))
                            else:
                                # Fallback –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
                                if '**' in line and ('√ó' in line or 'x' in line):
                                    parts = line.split('**')
                                    if len(parts) >= 3:
                                        item_name = parts[1].strip()
                                        quantity_part = line.split('√ó')[-1] if '√ó' in line else line.split('x')[-1]
                                        try:
                                            quantity = int(quantity_part.strip())
                                            items.append((line, item_name, quantity))
                                        except ValueError:
                                            pass
                    break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ embed: {e}")
        
        return items
    
    async def callback(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            if self.values[0] == "error":
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            item_index = int(self.values[0])
            if item_index >= len(self.parsed_items):
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral=True
                )
                return
            
            item_text, item_name, current_quantity = self.parsed_items[item_index]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            view = WarehouseEditActionView(
                self.original_message, 
                item_index, 
                item_text, 
                item_name, 
                current_quantity
            )
            
            embed = discord.Embed(
                title="üîß –î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º",
                description=f"**–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:** {item_name}\n**–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {current_quantity}",
                color=discord.Color.orange()
            )
            
            await interaction.response.edit_message(embed=embed, view=view)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.",
                ephemeral=True
            )


class WarehouseEditActionView(discord.ui.View):
    """View —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
    
    def __init__(self, original_message: discord.Message, item_index: int, 
                 item_text: str, item_name: str, current_quantity: int):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ
        self.original_message = original_message
        self.item_index = item_index
        self.item_text = item_text
        self.item_name = item_name
        self.current_quantity = current_quantity
    
    @discord.ui.button(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", style=discord.ButtonStyle.danger)
    async def delete_item(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∑–∞—è–≤–∫–∏ (–∑–∞—á–µ—Ä–∫–Ω—É—Ç—å)"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            await self._update_original_message_remove_item(interaction)
            
            await interaction.followup.send(
                f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç **{self.item_name}** —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞.",
                ephemeral=True
            )
    
    @discord.ui.button(label="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", style=discord.ButtonStyle.primary)
    async def edit_quantity(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            modal = WarehouseEditQuantityModal(
                self.original_message,
                self.item_index,
                self.item_text,
                self.item_name,
                self.current_quantity
            )
            await interaction.response.send_modal(modal)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã.",
                ephemeral=True
            )
    
    async def _update_original_message_remove_item(self, interaction: discord.Interaction):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"""
        try:
            embed = self.original_message.embeds[0]
            original_view = None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π view
            if self.original_message.components:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø view –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ custom_id
                embed_text = str(embed.to_dict())
                is_multi_request = False
                for field in embed.fields:
                    if "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã" in field.name.lower() and "–ø–æ–∑.)" in field.name:
                        is_multi_request = True
                        break
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π view
                if is_multi_request:
                    from .persistent_views import WarehousePersistentMultiRequestView
                    original_view = WarehousePersistentMultiRequestView()
                else:
                    from .persistent_views import WarehousePersistentRequestView
                    original_view = WarehousePersistentRequestView()
            
            # –ò—â–µ–º –ø–æ–ª–µ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
            for i, field in enumerate(embed.fields):
                if "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã" in field.name.lower():
                    lines = field.value.split('\n')
                    
                    # –ù–∞–π–¥–µ–º –∏ –∑–∞—á–µ—Ä–∫–Ω–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    for j, line in enumerate(lines):
                        if line.strip() == self.item_text:
                            # –ó–∞—á–µ—Ä–∫–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                            lines[j] = f"‚ùå ~~{self.item_text}~~"
                            break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
                    new_value = '\n'.join(lines)
                    embed.set_field_at(i, name=field.name, value=new_value, inline=field.inline)
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º view
            await self.original_message.edit(embed=embed, view=original_view)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise


class WarehouseEditQuantityModal(discord.ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    
    def __init__(self, original_message: discord.Message, item_index: int,
                 item_text: str, item_name: str, current_quantity: int):
        super().__init__(title=f"–ò–∑–º–µ–Ω–∏—Ç—å: {item_name[:40]}")
        self.original_message = original_message
        self.item_index = item_index
        self.item_text = item_text
        self.item_name = item_name
        self.current_quantity = current_quantity
        
        # –ü–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        self.quantity_input = discord.ui.TextInput(
            label="–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            placeholder=f"–¢–µ–∫—É—â–µ–µ: {current_quantity}",
            default=str(current_quantity),
            min_length=1,
            max_length=10,
            required=True
        )
        
        self.add_item(self.quantity_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            await interaction.response.defer(ephemeral=True)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            try:
                new_quantity = int(self.quantity_input.value.strip())
                if new_quantity <= 0:
                    await interaction.followup.send(
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!",
                        ephemeral=True
                    )
                    return
            except ValueError:
                await interaction.followup.send(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                    ephemeral=True
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._update_original_message_quantity(interaction, new_quantity)
            
            await interaction.followup.send(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ **{self.item_name}** –∏–∑–º–µ–Ω–µ–Ω–æ —Å {self.current_quantity} –Ω–∞ {new_quantity}.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            await interaction.followup.send(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
                ephemeral=True
            )
    
    async def _update_original_message_quantity(self, interaction: discord.Interaction, new_quantity: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        try:
            embed = self.original_message.embeds[0]
            
            # –ò—â–µ–º –ø–æ–ª–µ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
            for i, field in enumerate(embed.fields):
                if "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã" in field.name.lower():
                    lines = field.value.split('\n')
                    
                    # –ù–∞–π–¥–µ–º –∏ –æ–±–Ω–æ–≤–∏–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    for j, line in enumerate(lines):
                        if line.strip() == self.item_text:
                            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                            # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
                            match = re.match(r'(\d+\.\s*\*\*.*?\*\*)\s*[√óx]\s*(\d+)', self.item_text)
                            if match:
                                item_part = match.group(1)
                                lines[j] = f"{item_part} √ó {new_quantity} *(–∏–∑ {self.current_quantity})*"
                            else:
                                # Fallback
                                lines[j] = self.item_text.replace(f"√ó {self.current_quantity}", f"√ó {new_quantity} *(–∏–∑ {self.current_quantity})*")
                            break
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
                    new_value = '\n'.join(lines)
                    embed.set_field_at(i, name=field.name, value=new_value, inline=field.inline)
                    break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º view
            original_view = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø view –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É embed
            if self.original_message.components:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø view –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ custom_id
                embed_text = str(embed.to_dict())
                is_multi_request = False
                for field in embed.fields:
                    if "–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã" in field.name.lower() and "–ø–æ–∑.)" in field.name:
                        is_multi_request = True
                        break
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π view
                if is_multi_request:
                    from .persistent_views import WarehousePersistentMultiRequestView
                    original_view = WarehousePersistentMultiRequestView()
                else:
                    from .persistent_views import WarehousePersistentRequestView
                    original_view = WarehousePersistentRequestView()
            
            await self.original_message.edit(embed=embed, view=original_view)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {e}")
            raise
