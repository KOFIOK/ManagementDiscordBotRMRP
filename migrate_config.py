"""
üîÑ –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
===============================

–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π config.json –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:

–ò–ó–ú–ï–ù–ï–ù–ò–Ø:
‚Ä¢ –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è rank_roles (—Ä–∞–Ω–≥–∏ —Ç–µ–ø–µ—Ä—å –≤ PostgreSQL)
‚Ä¢ –£–¥–∞–ª—è–µ—Ç position_role_ids –∏ assignable_position_role_ids –∏–∑ departments 
‚Ä¢ –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ª–∏–º–∏—Ç—ã —Å–∫–ª–∞–¥–∞ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É departments —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ Discord-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python migrate_config.py --input old_config.json --output new_config.json
"""

import json
import argparse
import os
import shutil
from datetime import datetime
from typing import Dict, Any

def backup_file(filepath: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"{filepath}.backup_{timestamp}"
    if os.path.exists(filepath):
        shutil.copy2(filepath, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return ""

def migrate_departments(old_departments: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ú–∏–≥—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ departments: —É–¥–∞–ª—è–µ–º position_role_ids –∏ assignable_position_role_ids
    """
    new_departments = {}
    
    print("üèõÔ∏è –ú–ò–ì–†–ê–¶–ò–Ø –ü–û–î–†–ê–ó–î–ï–õ–ï–ù–ò–ô:")
    
    for dept_key, dept_data in old_departments.items():
        print(f"  üìÅ {dept_key} ({dept_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')})")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–µ–π
        new_dept = {}
        
        for key, value in dept_data.items():
            if key in ['position_role_ids', 'assignable_position_role_ids']:
                print(f"    ‚ùå –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ: {key}")
                continue
            else:
                new_dept[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if 'color' in new_dept and isinstance(new_dept['color'], str):
            if new_dept['color'] == "—Å–∏–Ω–∏–π":
                new_dept['color'] = 3447003  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
                print(f"    üé® –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Ü–≤–µ—Ç '—Å–∏–Ω–∏–π' -> {new_dept['color']}")
        
        new_departments[dept_key] = new_dept
        print(f"    ‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ")
    
    return new_departments

def remove_warehouse_legacy_fields(config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥–∞ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    fields_to_remove = []
    
    print("üè™ –û–ß–ò–°–¢–ö–ê –£–°–¢–ê–†–ï–í–®–ò–• –ü–û–õ–ï–ô –°–ö–õ–ê–î–ê:")
    
    # –ò—â–µ–º –ø–æ–ª—è —Å –∏–º–µ–Ω–∞–º–∏ –∑–≤–∞–Ω–∏–π/–¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤ –∫–æ—Ä–Ω–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for key in config.keys():
        if isinstance(config[key], dict) and any(
            subkey in config[key] 
            for subkey in ['–æ—Ä—É–∂–∏–µ', '–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã', '–∞–ø—Ç–µ—á–∫–∏', '–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ', '–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã']
        ):
            fields_to_remove.append(key)
            print(f"  ‚ùå –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ –ª–∏–º–∏—Ç–æ–≤: {key}")
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    for field in fields_to_remove:
        del config[field]
    
    return config

def migrate_config(old_config: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    print("üîÑ –ù–ê–ß–ê–õ–û –ú–ò–ì–†–ê–¶–ò–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    new_config = old_config.copy()
    
    # 1. –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é rank_roles (—Ä–∞–Ω–≥–∏ —Ç–µ–ø–µ—Ä—å –≤ PostgreSQL)
    if 'rank_roles' in new_config:
        print("üèÜ –ú–ò–ì–†–ê–¶–ò–Ø –†–ê–ù–ì–û–í:")
        print(f"  ‚ùå –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ü–∏—é rank_roles ({len(new_config['rank_roles'])} —Ä–∞–Ω–≥–æ–≤)")
        print("  üìä –†–∞–Ω–≥–∏ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ PostgreSQL")
        del new_config['rank_roles']
    
    # 2. –£–¥–∞–ª—è–µ–º rank_sync_key_role –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'rank_sync_key_role' in new_config:
        print(f"  ‚ùå –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ rank_sync_key_role")
        del new_config['rank_sync_key_role']
    
    # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if 'departments' in new_config:
        new_config['departments'] = migrate_departments(new_config['departments'])
    
    # 4. –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ —Å–∫–ª–∞–¥–∞
    new_config = remove_warehouse_legacy_fields(new_config)
    
    # 5. –û–±–Ω–æ–≤–ª—è–µ–º supplies —Å–µ–∫—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if 'supplies' in new_config:
        print("üì¶ –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ü–û–°–¢–ê–í–û–ö:")
        supplies = new_config['supplies']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if 'timer_duration_hours' not in supplies:
            supplies['timer_duration_hours'] = 4
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ timer_duration_hours: 4")
        
        if 'timer_duration_minutes' not in supplies:
            supplies['timer_duration_minutes'] = 2  
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ timer_duration_minutes: 2")
    
    # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
    if 'nickname_auto_replacement' not in new_config:
        print("üè∑Ô∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ê–í–¢–û–ó–ê–ú–ï–ù–´ –ù–ò–ö–ù–ï–ô–ú–û–í:")
        new_config['nickname_auto_replacement'] = {
            'enabled': True,
            'departments': {},
            'modules': {
                'dismissal': True,
                'transfer': True,
                'promotion': True,
                'demotion': True
            }
        }
        print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤")
        print("  ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞: True")
        print("  ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã: dismissal, transfer, promotion, demotion")
    else:
        print("üè∑Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ê–í–¢–û–ó–ê–ú–ï–ù–´ –ù–ò–ö–ù–ï–ô–ú–û–í:")
        nickname_settings = new_config['nickname_auto_replacement']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if 'enabled' not in nickname_settings:
            nickname_settings['enabled'] = True
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ enabled: True")
        
        if 'departments' not in nickname_settings:
            nickname_settings['departments'] = {}
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è departments")
        
        if 'modules' not in nickname_settings:
            nickname_settings['modules'] = {
                'dismissal': True,
                'transfer': True,
                'promotion': True,
                'demotion': True
            }
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è modules")
        else:
            modules = nickname_settings['modules']
            required_modules = ['dismissal', 'transfer', 'promotion', 'demotion']
            for module in required_modules:
                if module not in modules:
                    modules[module] = True
                    print(f"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ–¥—É–ª—å {module}: True")
    
    print("\nüéØ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    return new_config

def validate_migrated_config(config: Dict[str, Any]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    print("\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ò–ì–†–ò–†–û–í–ê–ù–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    print("-" * 40)
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–ª—è
    if 'rank_roles' in config:
        issues.append("‚ùå rank_roles –Ω–µ —É–¥–∞–ª–µ–Ω–∞")
    else:
        print("‚úÖ rank_roles —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º departments
    if 'departments' in config:
        print(f"üìÅ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {len(config['departments'])}")
        
        for dept_key, dept_data in config['departments'].items():
            if 'position_role_ids' in dept_data:
                issues.append(f"‚ùå {dept_key} —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ position_role_ids")
            if 'assignable_position_role_ids' in dept_data:
                issues.append(f"‚ùå {dept_key} —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –ø–æ–ª–µ assignable_position_role_ids")
        
        if not issues:
            print("‚úÖ –í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–ª–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = [
        'dismissal_channel', 'audit_channel', 'role_assignment_channel',
        'departments', 'moderators', 'administrators', 'nickname_auto_replacement'
    ]
    
    for field in required_fields:
        if field not in config:
            issues.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
        else:
            print(f"‚úÖ {field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
    if 'nickname_auto_replacement' in config:
        print("üè∑Ô∏è –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ê–í–¢–û–ó–ê–ú–ï–ù–´ –ù–ò–ö–ù–ï–ô–ú–û–í:")
        nickname_settings = config['nickname_auto_replacement']
        
        required_nickname_fields = ['enabled', 'departments', 'modules']
        for field in required_nickname_fields:
            if field not in nickname_settings:
                issues.append(f"‚ùå nickname_auto_replacement.{field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"  ‚úÖ {field}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        if 'modules' in nickname_settings:
            required_modules = ['dismissal', 'transfer', 'promotion', 'demotion']
            modules = nickname_settings['modules']
            for module in required_modules:
                if module not in modules:
                    issues.append(f"‚ùå nickname_auto_replacement.modules.{module} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"  ‚úÖ –º–æ–¥—É–ª—å {module}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if issues:
        print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û {len(issues)} –ü–†–û–ë–õ–ï–ú:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("\nüéâ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –í–ê–õ–ò–î–ù–ê!")
        return True

def print_migration_summary(old_config: Dict[str, Any], new_config: Dict[str, Any]):
    """
    –ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
    """
    print("\nüìä –°–í–û–î–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:")
    print("=" * 50)
    
    # –ü–æ–¥—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    old_fields = set(old_config.keys())
    new_fields = set(new_config.keys())
    removed_fields = old_fields - new_fields
    
    if removed_fields:
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ–π: {len(removed_fields)}")
        for field in sorted(removed_fields):
            print(f"  ‚Ä¢ {field}")
    
    # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    if 'departments' in old_config and 'departments' in new_config:
        old_dept_count = len(old_config['departments'])
        new_dept_count = len(new_config['departments'])
        print(f"\nüèõÔ∏è –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {old_dept_count} -> {new_dept_count}")
        
        # –ü–æ–¥—Å—á–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö
        total_removed_dept_fields = 0
        for dept_key in old_config['departments']:
            if dept_key in new_config['departments']:
                old_dept_fields = set(old_config['departments'][dept_key].keys())
                new_dept_fields = set(new_config['departments'][dept_key].keys())
                total_removed_dept_fields += len(old_dept_fields - new_dept_fields)
        
        if total_removed_dept_fields > 0:
            print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ–π –∏–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {total_removed_dept_fields}")
    
    print(f"\nüíæ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"  ‚Ä¢ –î–æ: {len(json.dumps(old_config))} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  ‚Ä¢ –ü–æ—Å–ª–µ: {len(json.dumps(new_config))} —Å–∏–º–≤–æ–ª–æ–≤")

def main():
    parser = argparse.ArgumentParser(description='–ú–∏–≥—Ä–∞—Ü–∏—è config.json –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç')
    parser.add_argument('--input', '-i', default='old_config.json', 
                       help='–ü—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–º—É config.json')
    parser.add_argument('--output', '-o', default='data/config.json',
                       help='–ü—É—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ config.json')
    parser.add_argument('--backup', '-b', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
    parser.add_argument('--validate-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.input):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if args.backup and os.path.exists(args.output):
        backup_file(args.output)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑: {args.input}")
    try:
        with open(args.input, 'r', encoding='utf-8') as f:
            old_config = json.load(f)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({len(old_config)} –ø–æ–ª–µ–π)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    try:
        new_config = migrate_config(old_config)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not validate_migrated_config(new_config):
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É
    print_migration_summary(old_config, new_config)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not args.validate_only:
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(args.output), exist_ok=True)
            
            with open(args.output, 'w', encoding='utf-8') as f:
                json.dump(new_config, f, indent=4, ensure_ascii=False)
            
            print(f"\nüíæ –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {args.output}")
            print("üéØ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    else:
        print("\nüîç –†–µ–∂–∏–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —Ñ–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

if __name__ == "__main__":
    main()