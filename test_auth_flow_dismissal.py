#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
"""

import asyncio
import sys
import os

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from utils.google_sheets import sheets_manager

class MockUser:
    def __init__(self, display_name):
        self.display_name = display_name
        self.id = 123456789

async def test_auth_flow():
    """Test the complete authorization flow for dismissal"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è...")
    print("=" * 60)
    
    # Test case 1: Moderator found in system
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    mock_user_found = MockUser("–í–ê | –ú–∞—Ä–∫–æ –¢–æ–ª–µ–¥–æ")
    
    try:
        auth_result = await sheets_manager.check_moderator_authorization(mock_user_found)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {auth_result}")
        
        if auth_result["found"]:
            print(f"   ‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {auth_result['info']}")
            print(f"   üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π")
            signed_by_name = auth_result["info"]
            print(f"   üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è: {signed_by_name}")
        else:
            print(f"   ‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω")
            print(f"   üìã –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    
    # Test case 2: Moderator NOT found in system
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    mock_user_not_found = MockUser("UnknownUser")
    
    try:
        auth_result = await sheets_manager.check_moderator_authorization(mock_user_not_found)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {auth_result}")
        
        if auth_result["found"]:
            print(f"   ‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {auth_result['info']}")
        else:
            print(f"   ‚ùå –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω")
            print(f"   üìã –ù–£–ñ–ù–û –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
            print(f"   ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –ü–ï–†–ï–î defer()")
            
            # Simulate manual input
            manual_data = {
                "name": "–ú–∞—Ä–∫–æ –¢–æ–ª–µ–¥–æ",
                "static": "123-456",
                "full_info": "–ú–∞—Ä–∫–æ –¢–æ–ª–µ–¥–æ | 123-456"
            }
            
            print(f"   üìù –°–∏–º—É–ª—è—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {manual_data}")
            signed_by_name = manual_data["full_info"]
            print(f"   üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {signed_by_name}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö/–Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –î–û defer() –≤ dismissal_form.py")
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    asyncio.run(test_auth_flow())
