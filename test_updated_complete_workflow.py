#!/usr/bin/env python3
"""
Complete workflow test for updated early dismissal penalty system.
This script tests the full updated workflow with new requirements:
1) –°—Ä–æ–∫: "14 –¥–Ω–µ–π" 
2) –ü—Ä–∏—á–∏–Ω–∞: "–ù–µ—É—Å—Ç–æ–π–∫–∞"
3) –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è: –¥–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è + 14 –¥–Ω–µ–π
4) –ö–µ–º –≤–Ω–µ—Å—ë–Ω: –ø–æ–∏—Å–∫ –ø–æ –ª–∏—Å—Ç—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# Add the current directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.google_sheets import GoogleSheetsManager

async def test_updated_complete_workflow():
    """Test the complete updated early dismissal penalty workflow."""
    print("üöÄ Updated Complete Early Dismissal Penalty Workflow Test")
    print("=" * 75)
    
    sheets_manager = GoogleSheetsManager()
    
    # Use a test static that should exist in your sheets
    test_static = "123-456"  # Adjust this to match your test data
    
    print(f"üîç Testing with static: {test_static}")
    print()
    
    try:
        # Step 1: Look for hiring record
        print("Step 1: üîç Looking for hiring record...")
        hiring_record = await sheets_manager.get_latest_hiring_record_by_static(test_static)
        
        if hiring_record:
            print("‚úÖ Hiring record found!")
            print(f"   Name: {hiring_record.get('–ò–º—è–§–∞–º–∏–ª–∏—è', 'N/A')}")
            print(f"   Action: {hiring_record.get('–î–µ–π—Å—Ç–≤–∏–µ', 'N/A')}")
            print(f"   Date: {hiring_record.get('–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è', 'N/A')}")
            
            # Step 2: Calculate service days
            hire_date_str = str(hiring_record.get('–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è', '')).strip()
            if hire_date_str:
                print(f"\nStep 2: üßÆ Calculating service duration...")
                print(f"   Hire date string: {hire_date_str}")
                
                # Parse hire date (same logic as in dismissal_form.py)
                hire_date = None
                current_time = datetime.now()
                
                # If date contains time, extract date part
                if ' ' in hire_date_str:
                    date_part = hire_date_str.split(' ')[0]
                else:
                    date_part = hire_date_str
                
                # Try different date formats
                try:
                    hire_date = datetime.strptime(date_part, '%d.%m.%Y')
                except ValueError:
                    try:
                        hire_date = datetime.strptime(date_part, '%d-%m-%Y')
                    except ValueError:
                        # Try full datetime format
                        try:
                            hire_date = datetime.strptime(hire_date_str, '%d.%m.%Y %H:%M:%S')
                        except ValueError:
                            hire_date = datetime.strptime(hire_date_str, '%d-%m-%Y %H:%M:%S')
                
                if hire_date:
                    days_difference = (current_time - hire_date).days
                    print(f"   Hire date: {hire_date.strftime('%d.%m.%Y')}")
                    print(f"   Current date: {current_time.strftime('%d.%m.%Y')}")
                    print(f"   Days of service: {days_difference}")
                    
                    # Step 3: Check if early dismissal and test updated penalty logging
                    if days_difference < 5:
                        print(f"\nStep 3: ‚ö†Ô∏è EARLY DISMISSAL DETECTED!")
                        print(f"   Service duration: {days_difference} days (< 5 days)")
                        print(f"   Penalty required with UPDATED RULES")
                        
                        # Mock form data and users
                        form_data = {
                            'name': hiring_record.get('–ò–º—è–§–∞–º–∏–ª–∏—è', '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                            'static': test_static,
                            'reason': '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ'
                        }
                        
                        class MockUser:
                            def __init__(self, name):
                                self.id = 123456789012345678
                                self.display_name = name
                        
                        class MockApprovingUser:
                            def __init__(self):
                                self.id = 987654321098765432
                                # Use a surname that should exist in your "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" sheet
                                self.display_name = "[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä] –¢–µ—Å—Ç –ê–¥–º–∏–Ω–æ–≤–∏—á"
                        
                        dismissed_user = MockUser(form_data['name'])
                        approving_user = MockApprovingUser()
                        
                        print(f"\nStep 4: üìù Testing UPDATED penalty logging...")
                        print(f"   Form data: {form_data}")
                        print(f"   Approving user: {approving_user.display_name}")
                        print()
                        
                        # Step 4: Test updated blacklist record logging
                        penalty_logged = await sheets_manager.add_blacklist_record(
                            form_data=form_data,
                            dismissed_user=dismissed_user,
                            approving_user=approving_user,
                            dismissal_time=current_time,
                            days_difference=days_difference
                        )
                        
                        if penalty_logged:
                            print("‚úÖ UPDATED Penalty successfully logged to blacklist sheet!")
                            
                            enforcement_date = (current_time + timedelta(days=14)).strftime('%d.%m.%Y')
                            
                            print("\nüìä UPDATED Penalty Record Details:")
                            print(f"   –°—Ä–æ–∫: 14 –¥–Ω–µ–π (UPDATED from '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ')")
                            print(f"   –ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫: {form_data['name']} | {form_data['static']}")
                            print(f"   –ü—Ä–∏—á–∏–Ω–∞: –ù–µ—É—Å—Ç–æ–π–∫–∞ (UPDATED from previous reason)")
                            print(f"   –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: {current_time.strftime('%d.%m.%Y')}")
                            print(f"   –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è: {enforcement_date} (UPDATED: +14 –¥–Ω–µ–π)")
                            print(f"   –ö–µ–º –≤–Ω–µ—Å—ë–Ω: [Lookup from '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet by surname '–ê–¥–º–∏–Ω–æ–≤–∏—á']")
                            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ ({days_difference} –¥–Ω. —Å–ª—É–∂–±—ã)")
                            
                            print(f"\nüéØ KEY UPDATES APPLIED:")
                            print(f"   ‚úÖ Term changed to '14 –¥–Ω–µ–π'")
                            print(f"   ‚úÖ Reason standardized to '–ù–µ—É—Å—Ç–æ–π–∫–∞'")
                            print(f"   ‚úÖ Enforcement date calculated as entry date + 14 days")
                            print(f"   ‚úÖ '–ö–µ–º –≤–Ω–µ—Å—ë–Ω' uses '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet lookup system")
                        else:
                            print("‚ùå Failed to log UPDATED penalty to blacklist sheet")
                            
                    else:
                        print(f"\nStep 3: ‚úÖ NORMAL DISMISSAL")
                        print(f"   Service duration: {days_difference} days (>= 5 days)")
                        print(f"   No penalty required")
                    
                else:
                    print("‚ùå Could not parse hire date")
            else:
                print("‚ùå No hire date found in record")
                
        else:
            print(f"‚ùå No hiring record found for static {test_static}")
            print("üí° Make sure the static exists in your '–û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π' sheet")
            print("üí° And that there's a record with action '–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É'")
            
    except Exception as e:
        print(f"‚ùå Error during updated workflow test: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\nüèÅ Updated workflow test completed!")

async def test_blacklist_notification():
    """Test the blacklist channel notification (unchanged)."""
    print(f"\nüîî Testing Blacklist Channel Notification...")
    print("=" * 50)
    
    # Mock form data for notification test
    form_data = {
        'name': '–¢–µ—Å—Ç –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        'static': '999-888',
    }
    
    days_difference = 2
    
    # Note: This would require a real Discord guild object
    # For testing purposes, we'll just show what would happen
    print(f"üìã Notification would be sent with:")
    print(f"   Title: ‚ö†Ô∏è –ù–µ—É—Å—Ç–æ–π–∫–∞ –∑–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ")
    print(f"   Name: {form_data['name']}")
    print(f"   Static: {form_data['static']}")
    print(f"   Reason: –î–æ—Å—Ä–æ—á–Ω–æ–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ (–º–µ–Ω–µ–µ 5 –¥–Ω–µ–π —Å–ª—É–∂–±—ã - {days_difference} –¥–Ω.)")
    print(f"   Type: –ù–µ—É—Å—Ç–æ–π–∫–∞")
    print(f"   Footer: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    print(f"‚úÖ Notification system remains unchanged")

async def main():
    """Main test function."""
    await test_updated_complete_workflow()
    await test_blacklist_notification()

if __name__ == "__main__":
    asyncio.run(main())
