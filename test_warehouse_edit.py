#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å–∫–ª–∞–¥–∞
"""

import re

def test_item_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ embed –ø–æ–ª—è"""
    
    test_field_value = """1. **AK-74M** √ó 2
2. **–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç 6–ë23-1** √ó 1
3. **–ê–ø—Ç–µ—á–∫–∞ –≤–æ–π—Å–∫–æ–≤–∞—è** √ó 10
4. **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã** √ó 500"""

    items = []
    lines = test_field_value.split('\n')
    
    for line in lines:
        line = line.strip()
        if '√ó' in line or 'x' in line:
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "1. **–Ω–∞–∑–≤–∞–Ω–∏–µ** √ó –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            match = re.match(r'(\d+)\.\s*\*\*(.*?)\*\*\s*[√óx]\s*(\d+)', line)
            if match:
                number, item_name, quantity = match.groups()
                items.append((line, item_name.strip(), int(quantity)))
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: '{item_name}' √ó {quantity}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å: '{line}'")
    
    return items

def test_item_parsing_with_deleted():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ"""
    
    print("\\n=== –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê –° –£–î–ê–õ–ï–ù–ù–´–ú–ò –ü–†–ï–î–ú–ï–¢–ê–ú–ò ===")
    
    test_field_value = """‚ùå ~~1. **AK-74M** √ó 2~~
2. **–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç 6–ë23-1** √ó 3 *(–∏–∑ 1)*
‚ùå ~~3. **–ê–ø—Ç–µ—á–∫–∞ –≤–æ–π—Å–∫–æ–≤–∞—è** √ó 10~~
4. **–ú–∞—Ç–µ—Ä–∏–∞–ª—ã** √ó 500"""

    items = []
    lines = test_field_value.split('\n')
    
    for line in lines:
        line = line.strip()
        if '√ó' in line or 'x' in line:
            is_deleted = False
            original_line = line
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç (–∑–∞—á–µ—Ä–∫–Ω—É—Ç)
            if line.startswith('‚ùå ~~') and line.endswith('~~'):
                is_deleted = True
                # –£–±–∏—Ä–∞–µ–º –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                line = line[5:-2]  # –£–±–∏—Ä–∞–µ–º "‚ùå ~~" –≤ –Ω–∞—á–∞–ª–µ –∏ "~~" –≤ –∫–æ–Ω—Ü–µ
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            match = re.match(r'(\d+)\.\s*\*\*(.*?)\*\*\s*[√óx]\s*(\d+)', line)
            if match:
                number, item_name, quantity = match.groups()
                status = "–£–î–ê–õ–ï–ù" if is_deleted else "–ê–ö–¢–ò–í–ï–ù"
                items.append((original_line, item_name.strip(), int(quantity), is_deleted))
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥: '{item_name}' √ó {quantity} [{status}]")
            else:
                # Fallback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
                if '**' in line and ('√ó' in line or 'x' in line):
                    parts = line.split('**')
                    if len(parts) >= 3:
                        item_name = parts[1].strip()
                        quantity_part = line.split('√ó')[-1] if '√ó' in line else line.split('x')[-1]
                        try:
                            quantity_part = quantity_part.split('*')[0].strip()
                            quantity = int(quantity_part.strip())
                            status = "–£–î–ê–õ–ï–ù" if is_deleted else "–ê–ö–¢–ò–í–ï–ù"
                            items.append((original_line, item_name, quantity, is_deleted))
                            print(f"‚úÖ Fallback –ø–∞—Ä—Å–∏–Ω–≥: '{item_name}' √ó {quantity} [{status}]")
                        except ValueError:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤: '{line}'")
    
    return items

def test_quantity_update():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ"""
    
    original_text = "1. **AK-74M** √ó 2"
    new_quantity = 5
    old_quantity = 2
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
    match = re.match(r'(\d+\.\s*\*\*.*?\*\*)\s*[√óx]\s*(\d+)', original_text)
    if match:
        item_part = match.group(1)
        new_text = f"{item_part} √ó {new_quantity} *(–∏–∑ {old_quantity})*"
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: '{original_text}' ‚Üí '{new_text}'")
        return new_text
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤: '{original_text}'")
        return original_text

def test_item_deletion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ (–∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ) –ø—Ä–µ–¥–º–µ—Ç–∞"""
    
    original_text = "2. **–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç 6–ë23-1** √ó 1"
    deleted_text = f"‚ùå ~~{original_text}~~"
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: '{original_text}' ‚Üí '{deleted_text}'")
    return deleted_text

def test_restoration_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    
    print("\\n=== –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–†–ï–î–ú–ï–¢–û–í ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    deleted_items = [
        ("‚ùå ~~1. **AK-74M** √ó 2~~", 1),
        ("‚ùå ~~3. **–ê–ø—Ç–µ—á–∫–∞ –≤–æ–π—Å–∫–æ–≤–∞—è** √ó 10~~", 3),
        ("‚ùå ~~5. **–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω—ã–π –±—ã–∫** √ó 1~~", 5),
        ("‚ùå ~~**–ë–µ–∑ –Ω–æ–º–µ—Ä–∞** √ó 1~~", 2)  # –°–ª—É—á–∞–π –∫–æ–≥–¥–∞ –Ω–æ–º–µ—Ä –ø–æ—Ç–µ—Ä—è–ª—Å—è
    ]
    
    import re
    
    for deleted_line, expected_index in deleted_items:
        print(f"–£–¥–∞–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {deleted_line}")
        
        # –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∫ –≤ –∫–æ–¥–µ)
        if deleted_line.startswith('‚ùå ~~') and deleted_line.endswith('~~'):
            content = deleted_line[5:-2]  # –£–±–∏—Ä–∞–µ–º "‚ùå ~~" –∏ "~~"
            
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ—Ç–µ—Ä—è–ª—Å—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
            if not content.strip().startswith(str(expected_index) + '.'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ
                match = re.match(r'^(\d+)\.\s*(.*)$', content.strip())
                if match:
                    # –ù–æ–º–µ—Ä –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    restored_line = content
                else:
                    # –ù–æ–º–µ—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    restored_line = f"{expected_index}. {content.strip()}"
            else:
                restored_line = content
                
            print(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è:  {restored_line}")
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\\n")
        else:
            print("‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–∞—è\\n")

def test_select_menu_display():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ Select Menu"""
    
    print("\\n=== –¢–ï–°–¢ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø SELECT MENU ===")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
    test_items = [
        ("1. **–ê–ö-74–ú** √ó 3", "–ê–ö-74–ú", 3, False),
        ("‚ùå ~~2. **–°—Ä–µ–¥–Ω–∏–π –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç** √ó 2~~", "–°—Ä–µ–¥–Ω–∏–π –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", 2, True),
        ("3. **–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω—ã–π –±—ã–∫** √ó 1", "–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω—ã–π –±—ã–∫", 1, False),
        ("‚ùå ~~4. **–ê–ø—Ç–µ—á–∫–∞ –≤–æ–π—Å–∫–æ–≤–∞—è** √ó 10~~", "–ê–ø—Ç–µ—á–∫–∞ –≤–æ–π—Å–∫–æ–≤–∞—è", 10, True)
    ]
    
    print("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Select Menu:")
    for i, (item_text, item_name, quantity, is_deleted) in enumerate(test_items):
        if is_deleted:
            # –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å –∫—Ä–µ—Å—Ç–∏–∫–æ–º
            label = f"‚ùå {i+1}. {item_name}"
            description = f"–£–¥–∞–ª–µ–Ω | –ë—ã–ª–æ: {quantity}"
            emoji = "üóëÔ∏è"
            action = "‚Üí –î–æ—Å—Ç—É–ø–Ω–æ: –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨"
        else:
            # –û–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            label = f"{i+1}. {item_name}"
            description = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}"
            emoji = "üì¶"
            action = "‚Üí –î–æ—Å—Ç—É–ø–Ω–æ: –£–î–ê–õ–ò–¢–¨, –ò–ó–ú–ï–ù–ò–¢–¨ –ö–û–õ–ò–ß–ï–°–¢–í–û"
        
        print(f"   {emoji} {label}")
        print(f"      ‚îú‚îÄ {description}")
        print(f"      ‚îî‚îÄ {action}")
        print()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å–∫–ª–∞–¥–∞\n")
    
    print("1. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
    items = test_item_parsing()
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}\n")
    
    print("2. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:")
    test_quantity_update()
    print()
    
    print("3. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:")
    test_item_deletion()
    print()
    
    print("4. –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
    test_restoration_logic()
    print()
    
    print("5. –¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Select Menu:")
    test_select_menu_display()
    print()
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
