"""
Subdivision Mapper Utility

Maps config.json subdivision data with database subdivision records.
Provides combined subdivision information for Discord operations.

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
‚Ä¢ PostgreSQL: –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (id, name, abbreviation) 
‚Ä¢ config.json: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Discord (description, color, emoji, channels, pings)
‚Ä¢ position_subdivision: —Å–≤—è–∑–∏ —Ä–æ–ª–µ–π —Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏
"""

import logging
from typing import Dict, List, Optional, Any, Tuple
from ..postgresql_pool import get_db_cursor
from .. import config_manager

logger = logging.getLogger(__name__)


class SubdivisionMapper:
    """Maps between config.json departments and database subdivisions"""
    
    def __init__(self):
        self._subdivision_cache = {}
        self._config_cache = {}
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä –ë–î -> –∫–ª—é—á–∏ config.json
        self.abbreviation_mapping = {
            "–£–í–ü": "–£–í–ü",        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏
            "CCO": "–°–°–û",        # –°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π -> –°–°–û 
            "PO–∏O": "–†–û–∏–û",      # –†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è -> –†–û–∏–û
            "BK": "–í–ö",          # –í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç -> –í–ö
            "MP": "–ú–†",          # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞ -> –ú–†
            "–®—Ç–∞–±": "genshtab",  # –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –®—Ç–∞–± -> genshtab
            "–í–ê": "–í–ê",          # –í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è
            "–í–ë–ü": "–í–ë–ü"         # –í—Ä–µ–º–µ–Ω–Ω–æ –ë–µ–∑ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        }
        
        # –û–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.config_to_db_mapping = {v: k for k, v in self.abbreviation_mapping.items()}
    
    async def get_subdivision_with_config(self, subdivision_identifier: str, config: Dict) -> Optional[Dict[str, Any]]:
        """
        Get subdivision data combined with Discord config
        
        Args:
            subdivision_identifier: Subdivision name, abbreviation, or config key
            config: Bot configuration containing departments
            
        Returns:
            Dict containing both DB and config data, or None if not found
        """
        try:
            # Get DB subdivision data
            db_subdivision = await self._get_db_subdivision(subdivision_identifier)
            if not db_subdivision:
                return None
            
            # Get corresponding config data
            config_data = self._get_config_for_subdivision(db_subdivision, config)
            
            # Combine data
            return {
                'id': db_subdivision['id'],
                'name': db_subdivision['name'],
                'abbreviation': db_subdivision['abbreviation'],
                'discord_config': config_data
            }
            
        except Exception as e:
            logger.error(f"get_subdivision_with_config failed: {e}")
            return None
    
    async def get_all_subdivisions_with_config(self, config: Dict) -> List[Dict[str, Any]]:
        """Get all subdivisions with their Discord config data"""
        try:
            subdivisions = []
            
            # Get all DB subdivisions
            with get_db_cursor() as cursor:
                cursor.execute("SELECT id, name, abbreviation FROM subdivisions ORDER BY name;")
                db_subdivisions = cursor.fetchall()
            
            for db_sub in db_subdivisions:
                config_data = self._get_config_for_subdivision(db_sub, config)
                subdivisions.append({
                    'id': db_sub['id'],
                    'name': db_sub['name'],
                    'abbreviation': db_sub['abbreviation'],
                    'discord_config': config_data
                })
            
            return subdivisions
            
        except Exception as e:
            logger.error(f"get_all_subdivisions_with_config failed: {e}")
            return []
    
    async def _get_db_subdivision(self, identifier: str) -> Optional[Dict[str, Any]]:
        """Get subdivision from database by name, abbreviation, or partial match"""
        try:
            with get_db_cursor() as cursor:
                # Try exact match first
                cursor.execute("""
                    SELECT id, name, abbreviation 
                    FROM subdivisions 
                    WHERE name = %s OR abbreviation = %s;
                """, (identifier, identifier))
                result = cursor.fetchone()
                
                if result:
                    return dict(result)
                
                # Try partial match
                cursor.execute("""
                    SELECT id, name, abbreviation 
                    FROM subdivisions 
                    WHERE name ILIKE %s OR abbreviation ILIKE %s
                    LIMIT 1;
                """, (f"%{identifier}%", f"%{identifier}%"))
                result = cursor.fetchone()
                
                return dict(result) if result else None
                
        except Exception as e:
            logger.error(f"_get_db_subdivision failed: {e}")
            return None
    
    def _get_config_for_subdivision(self, db_subdivision: Dict, config: Dict) -> Optional[Dict[str, Any]]:
        """Get Discord config data for subdivision"""
        try:
            departments = config.get('departments', {})
            
            # Look for config entry that matches subdivision name or abbreviation
            for dept_key, dept_config in departments.items():
                dept_name = dept_config.get('name', '')
                dept_abbrev = dept_config.get('abbreviation', '')
                
                # Match by name or abbreviation
                if (dept_name == db_subdivision['name'] or 
                    dept_abbrev == db_subdivision['abbreviation'] or
                    dept_key.lower() == db_subdivision['name'].lower() or
                    dept_key.lower() == db_subdivision['abbreviation'].lower()):
                    
                    return {
                        'config_key': dept_key,
                        'roles': dept_config.get('roles', {}),
                        'channels': dept_config.get('channels', {}),
                        'colors': dept_config.get('colors', {}),
                        'emoji': dept_config.get('emoji', ''),
                        'name': dept_config.get('name', ''),
                        'abbreviation': dept_config.get('abbreviation', '')
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"_get_config_for_subdivision failed: {e}")
            return None
    
    def get_subdivision_choices(self, config: Dict) -> List[Dict[str, str]]:
        """Get subdivision choices for Discord select menus"""
        try:
            choices = []
            departments = config.get('departments', {})
            
            for dept_key, dept_config in departments.items():
                name = dept_config.get('name', dept_key)
                abbreviation = dept_config.get('abbreviation', '')
                emoji = dept_config.get('emoji', '')
                
                display_name = f"{emoji} {name}" if emoji else name
                if abbreviation:
                    display_name += f" ({abbreviation})"
                
                choices.append({
                    'label': display_name,
                    'value': dept_key,
                    'description': f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ {name}"
                })
            
            return choices
            
        except Exception as e:
            logger.error(f"get_subdivision_choices failed: {e}")
            return []
    
    async def validate_subdivision_exists(self, subdivision_identifier: str) -> bool:
        """Check if subdivision exists in database"""
        try:
            subdivision = await self._get_db_subdivision(subdivision_identifier)
            return subdivision is not None
        except Exception as e:
            logger.error(f"validate_subdivision_exists failed: {e}")
            return False

    # ================================================================
    # üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–ó–ò–¶–ò–Ø–ú–ò –ò –†–û–õ–Ø–ú–ò
    # ================================================================
    
    async def get_subdivision_position_roles(self, identifier: str) -> List[Tuple[int, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ position_subdivision
        
        Args:
            identifier: –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–ë–î) –∏–ª–∏ –∫–ª—é—á config.json
            
        Returns:
            List[(role_id, position_name)]
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ë–î –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É
            if identifier in self.abbreviation_mapping:
                db_abbreviation = identifier
            elif identifier in self.config_to_db_mapping:
                db_abbreviation = self.config_to_db_mapping[identifier]
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {identifier}")
                return []
            
            with get_db_cursor() as cursor:
                query = """
                SELECT p.role_id, p.name
                FROM subdivisions s
                JOIN position_subdivision ps ON s.id = ps.subdivision_id
                JOIN positions p ON ps.position_id = p.id
                WHERE s.abbreviation = %s AND p.role_id IS NOT NULL
                ORDER BY p.name;
                """
                
                cursor.execute(query, (db_abbreviation,))
                results = cursor.fetchall()
                
                return [(row['role_id'], row['name']) for row in results]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π {identifier}: {e}")
            return []
    
    async def get_subdivision_full_data(self, identifier: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ (–ë–î + config.json + –ø–æ–∑–∏—Ü–∏–∏)
        
        Args:
            identifier: –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–ë–î) –∏–ª–∏ –∫–ª—é—á config.json
            
        Returns:
            Dict —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ë–î –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∏ config –∫–ª—é—á
            if identifier in self.abbreviation_mapping:
                # –≠—Ç–æ –ë–î –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
                db_abbreviation = identifier
                config_key = self.abbreviation_mapping[identifier]
            elif identifier in self.config_to_db_mapping:
                # –≠—Ç–æ config –∫–ª—é—á
                config_key = identifier
                db_abbreviation = self.config_to_db_mapping[identifier]
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {identifier}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î + –ø–æ–∑–∏—Ü–∏–∏
            with get_db_cursor() as cursor:
                query = """
                SELECT s.id, s.name, s.abbreviation,
                       ARRAY_AGG(p.role_id ORDER BY p.name) FILTER (WHERE p.role_id IS NOT NULL) as position_role_ids,
                       ARRAY_AGG(p.name ORDER BY p.name) FILTER (WHERE p.role_id IS NOT NULL) as position_names,
                       COUNT(p.id) FILTER (WHERE p.role_id IS NOT NULL) as positions_count
                FROM subdivisions s
                LEFT JOIN position_subdivision ps ON s.id = ps.subdivision_id
                LEFT JOIN positions p ON ps.position_id = p.id
                WHERE s.abbreviation = %s
                GROUP BY s.id, s.name, s.abbreviation;
                """
                
                cursor.execute(query, (db_abbreviation,))
                result = cursor.fetchone()
                
                if not result:
                    logger.warning(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ {db_abbreviation} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                    return None
            
            # –ü–æ–ª—É—á–∞–µ–º Discord-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json
            config_data = config_manager.load_config().get("departments", {}).get(config_key, {})
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            subdivision_data = {
                # –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î (–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
                "id": result['id'],
                "name": result['name'],
                "abbreviation": result['abbreviation'],
                "config_key": config_key,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á config.json
                "position_role_ids": list(result['position_role_ids']) if result['position_role_ids'] else [],
                "position_names": list(result['position_names']) if result['position_names'] else [],
                "positions_count": result['positions_count'],
                
                # –î–∞–Ω–Ω—ã–µ –∏–∑ config.json (Discord-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
                "description": config_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"),
                "color": config_data.get("color", 0),
                "emoji": config_data.get("emoji", "üìÅ"),
                "is_system": config_data.get("is_system", False),
                "application_channel_id": config_data.get("application_channel_id"),
                "persistent_message_id": config_data.get("persistent_message_id"),
                "ping_contexts": config_data.get("ping_contexts", {}),
                "key_role_id": config_data.get("key_role_id"),
                "role_id": config_data.get("role_id")
            }
            
            return subdivision_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {identifier}: {e}")
            return None
    
    async def get_all_subdivisions_enhanced(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π (–ë–î + config.json + –ø–æ–∑–∏—Ü–∏–∏)
        
        Returns:
            List[Dict] —Å–æ –≤—Å–µ–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ë–î
            with get_db_cursor() as cursor:
                query = """
                SELECT s.id, s.name, s.abbreviation,
                       COUNT(ps.id) FILTER (WHERE p.role_id IS NOT NULL) as positions_count
                FROM subdivisions s
                LEFT JOIN position_subdivision ps ON s.id = ps.subdivision_id
                LEFT JOIN positions p ON ps.position_id = p.id
                GROUP BY s.id, s.name, s.abbreviation
                ORDER BY s.name;
                """
                
                cursor.execute(query)
                results = cursor.fetchall()
            
            subdivisions = []
            for row in results:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                full_data = await self.get_subdivision_full_data(row['abbreviation'])
                if full_data:
                    subdivisions.append(full_data)
            
            return subdivisions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def validate_subdivision_consistency(self) -> Dict[str, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ë–î –∏ config.json
        
        Returns:
            Dict —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏
        """
        issues = {
            "missing_in_db": [],
            "missing_in_config": [],
            "name_mismatch": [],
            "no_positions": [],
            "mapping_issues": []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ë–î
            with get_db_cursor() as cursor:
                query = """
                SELECT s.abbreviation, s.name,
                       COUNT(ps.id) FILTER (WHERE p.role_id IS NOT NULL) as positions_count
                FROM subdivisions s
                LEFT JOIN position_subdivision ps ON s.id = ps.subdivision_id
                LEFT JOIN positions p ON ps.position_id = p.id
                GROUP BY s.id, s.abbreviation, s.name;
                """
                cursor.execute(query)
                db_results = cursor.fetchall()
            
            db_subdivisions = {row['abbreviation']: {'name': row['name'], 'positions': row['positions_count']} 
                             for row in db_results}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ config.json
            config_departments = config_manager.load_config().get("departments", {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for db_abbr in db_subdivisions:
                if db_abbr not in self.abbreviation_mapping:
                    issues["mapping_issues"].append(f"–ë–î '{db_abbr}' –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ config.json")
                    continue
                
                config_key = self.abbreviation_mapping[db_abbr]
                
                if config_key not in config_departments:
                    issues["missing_in_config"].append(f"'{config_key}' (–¥–ª—è –ë–î '{db_abbr}')")
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
                    db_name = db_subdivisions[db_abbr]['name']
                    config_name = config_departments[config_key].get('name', '')
                    if db_name != config_name:
                        issues["name_mismatch"].append(f"{db_abbr} ({config_key}): –ë–î='{db_name}' vs Config='{config_name}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    if db_subdivisions[db_abbr]['positions'] == 0:
                        issues["no_positions"].append(f"{db_abbr} ({config_key})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º config –∫–ª—é—á–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ë–î
            for config_key in config_departments:
                if config_key not in self.config_to_db_mapping:
                    issues["missing_in_db"].append(f"'{config_key}' –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –ë–î")
            
            return issues
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
            return issues
    
    def update_config_subdivision_data(self, identifier: str, data: Dict) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ config.json
        
        Args:
            identifier: –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–ë–î) –∏–ª–∏ –∫–ª—é—á config.json
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º config –∫–ª—é—á
            if identifier in self.abbreviation_mapping:
                config_key = self.abbreviation_mapping[identifier]
            elif identifier in self.config_to_db_mapping:
                config_key = identifier
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {identifier}")
                return False
            
            current_config = config_manager.load_config()
            if "departments" not in current_config:
                current_config["departments"] = {}
            
            current_config["departments"][config_key] = data
            
            success = config_manager.save_config(current_config)
            if success:
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {identifier} ({config_key}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ config.json")
            return success
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è config.json –¥–ª—è {identifier}: {e}")
            return False