"""
Department Manager - Centralized management for departments
"""
import discord
from typing import Dict, List, Optional, Tuple
from utils.config_manager import load_config, save_config
import logging

logger = logging.getLogger(__name__)

class DepartmentManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    PRESET_COLORS = {
        '–°–∏–Ω–∏–π': 0x3498db,
        '–ó–µ–ª—ë–Ω—ã–π': 0x2ecc71,
        '–ö—Ä–∞—Å–Ω—ã–π': 0xe74c3c,
        '–û—Ä–∞–Ω–∂–µ–≤—ã–π': 0xf39c12,
        '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': 0x9b59b6,
        '–ë–∏—Ä—é–∑–æ–≤—ã–π': 0x1abc9c,
        '–ñ—ë–ª—Ç—ã–π': 0xf1c40f,
        '–†–æ–∑–æ–≤—ã–π': 0xe91e63,
        '–°–µ—Ä—ã–π': 0x95a5a6,
        '–¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π': 0x2c3e50
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∑–∞—â–∏—â–µ–Ω—ã —Ñ–ª–∞–≥–æ–º is_system)
    SYSTEM_DEPARTMENTS = {
        '–£–í–ü': {
            'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏',
            'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –Ω–∞–¥–∑–æ—Ä –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤–æ–∏–Ω—Å–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
            'color': 0x3498db,
            'emoji': 'üéì',
            'is_system': True
        },
        '–°–°–û': {
            'name': '–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π',
            'description': '–≠–ª–∏—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á',
            'color': 0x2ecc71,
            'emoji': 'üéØ',
            'is_system': True
        },
        '–†–û–∏–û': {
            'name': '–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
            'description': '–†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            'color': 0x9b59b6,
            'emoji': 'üîç',
            'is_system': True
        },
        '–í–ö': {
            'name': '–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç',
            'description': '–û–±—É—á–µ–Ω–∏–µ –∏ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
            'color': 0xe74c3c,
            'emoji': 'üöî',
            'is_system': True
        },
        '–ú–†': {
            'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞',
            'description': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ª–∏—á–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É',
            'color': 0xf39c12,
            'emoji': 'üè•',
            'is_system': True
        },
        '–í–ê': {
            'name': '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è',
            'description': '–í—ã—Å—à–µ–µ –≤–æ–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ñ–∏—Ü–µ—Ä—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞',
            'color': 0x1abc9c,
            'emoji': 'üéñÔ∏è',
            'is_system': True
        }
    }
    
    @classmethod
    def initialize_system_departments(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        config = load_config()
        departments = config.get('departments', {})
        
        updated = False
        for dept_code, dept_data in cls.SYSTEM_DEPARTMENTS.items():
            if dept_code not in departments:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                full_dept_data = dept_data.copy()
                full_dept_data.update({
                    'application_channel_id': None,
                    'persistent_message_id': None,
                    'ping_contexts': {},
                    'key_role_id': None
                })
                departments[dept_code] = full_dept_data
                updated = True
                logger.info(f"Initialized system department: {dept_code}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º is_system —Ñ–ª–∞–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                existing_dept = departments[dept_code]
                if not existing_dept.get('is_system', False):
                    existing_dept['is_system'] = True
                    updated = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                missing_fields = {
                    'application_channel_id': None,
                    'persistent_message_id': None,
                    'ping_contexts': {},
                    'key_role_id': None
                }
                for field, default_value in missing_fields.items():
                    if field not in existing_dept:
                        existing_dept[field] = default_value
                        updated = True
        
        if updated:
            config['departments'] = departments
            save_config(config)
            logger.info("System departments initialized/updated")
    
    @classmethod
    def get_all_departments(cls) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        cls.initialize_system_departments()  # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        config = load_config()
        return config.get('departments', {})
    
    @classmethod
    def get_department(cls, dept_code: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        departments = cls.get_all_departments()
        return departments.get(dept_code)
    
    @classmethod
    def add_department(cls, dept_code: str, name: str, description: str, 
                      key_role_id: int, color: int, emoji: str = "üèõÔ∏è") -> Tuple[bool, str]:
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not dept_code or not name:
                return False, "–ö–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            departments = cls.get_all_departments()
            if dept_code in departments:
                return False, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º '{dept_code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            new_department = {
                'name': name,
                'description': description or '',
                'key_role_id': key_role_id,
                'color': color,
                'emoji': emoji,
                'is_system': False,
                'ping_contexts': {},  # –ü—É—Å—Ç—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'application_channel_id': None  # –ë—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            config = load_config()
            if 'departments' not in config:
                config['departments'] = {}
            
            config['departments'][dept_code] = new_department
            save_config(config)
            
            logger.info(f"Added new department: {dept_code} - {name}")
            return True, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code} - {name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
            
        except Exception as e:
            logger.error(f"Error adding department {dept_code}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}"
    
    @classmethod
    def update_department(cls, dept_code: str, **kwargs) -> Tuple[bool, str]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Args:
            dept_code: –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (name, description, key_role_id, color, emoji)
        """
        try:
            departments = cls.get_all_departments()
            
            if dept_code not in departments:
                return False, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
            department = departments[dept_code]
            
            for field, value in kwargs.items():
                if field in ['name', 'description', 'key_role_id', 'color', 'emoji']:
                    department[field] = value
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            config = load_config()
            config['departments'][dept_code] = department
            save_config(config)
            
            logger.info(f"Updated department: {dept_code}")
            return True, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"
            
        except Exception as e:
            logger.error(f"Error updating department {dept_code}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}"
    
    @classmethod
    def remove_department(cls, dept_code: str) -> Tuple[bool, str]:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            departments = cls.get_all_departments()
            
            if dept_code not in departments:
                return False, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
            department = departments[dept_code]
            if department.get('is_system', False):
                return False, f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}'"
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            config = load_config()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if 'departments' in config and dept_code in config['departments']:
                del config['departments'][dept_code]
            
            # –û—á–∏—Å—Ç–∫–∞ legacy ping_settings (–µ—Å–ª–∏ –µ—Å—Ç—å)
            ping_settings = config.get('ping_settings', {})
            role_id = department.get('key_role_id')
            if role_id and str(role_id) in ping_settings:
                del ping_settings[str(role_id)]
                config['ping_settings'] = ping_settings
            
            save_config(config)
            
            logger.info(f"Removed department: {dept_code}")
            return True, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã"
            
        except Exception as e:
            logger.error(f"Error removing department {dept_code}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}"
    
    @classmethod
    def generate_select_options(cls) -> List[discord.SelectOption]:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è select menu"""
        departments = cls.get_all_departments()
        options = []
        
        for dept_code, dept_data in departments.items():
            options.append(discord.SelectOption(
                label=f"{dept_code} - {dept_data['name']}",
                description=dept_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100],  # Discord limit
                emoji=dept_data.get('emoji', 'üèõÔ∏è'),
                value=dept_code
            ))
        
        return options
    
    @classmethod
    def get_departments_by_role(cls, role_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ ID —Ä–æ–ª–∏ (–¥–ª—è ping-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        departments = cls.get_all_departments()
        matching_departments = []
        
        for dept_code, dept_data in departments.items():
            if dept_data.get('key_role_id') == role_id:
                matching_departments.append(dept_code)
        
        return matching_departments
    
    @classmethod
    def get_color_options(cls) -> List[discord.SelectOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è select menu"""
        options = []
        
        for color_name, color_value in cls.PRESET_COLORS.items():
            options.append(discord.SelectOption(
                label=color_name,
                value=str(color_value),
                emoji="üé®"
            ))
        
        return options
    
    @classmethod
    def get_department_statistics(cls) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        departments = cls.get_all_departments()
        
        stats = {
            'total': len(departments),
            'system': 0,
            'custom': 0,
            'with_channels': 0,
            'with_pings': 0
        }
        
        for dept_data in departments.values():
            if dept_data.get('is_system', False):
                stats['system'] += 1
            else:
                stats['custom'] += 1
                
            if dept_data.get('application_channel_id'):
                stats['with_channels'] += 1
                
            if dept_data.get('ping_contexts'):
                stats['with_pings'] += 1
        
        return stats
    
    @classmethod
    def department_exists(cls, dept_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        departments = cls.get_all_departments()
        return dept_id in departments
    
    @classmethod
    def get_available_colors(cls) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤"""
        return list(cls.PRESET_COLORS.keys())
    
    @classmethod
    def add_department(cls, dept_id: str, name: str, emoji: Optional[str] = None, 
                      color: Optional[str] = None, key_role_id: Optional[int] = None) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è  
            emoji: –≠–º–æ–¥–∑–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            color: –¶–≤–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞)
            key_role_id: ID –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            if 'departments' not in config:
                config['departments'] = {}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞
            color_value = cls.PRESET_COLORS.get(color, cls.PRESET_COLORS['–°–∏–Ω–∏–π'])
            
            new_department = {
                'name': name,
                'emoji': emoji or 'üèõÔ∏è',
                'color': color or '—Å–∏–Ω–∏–π',
                'key_role_id': key_role_id,
                'is_system': False,
                'ping_contexts': {},
                'application_channel_id': None
            }
            
            config['departments'][dept_id] = new_department
            save_config(config)
            
            logger.info(f"Added department: {dept_id} - {name}")
            return True
            
        except Exception as e:
            logger.error(f"Error adding department {dept_id}: {e}")
            return False
    
    @classmethod
    def edit_department(cls, dept_id: str, name: Optional[str] = None, 
                       emoji: Optional[str] = None, color: Optional[str] = None, 
                       key_role_id: Optional[int] = None) -> bool:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            name: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            emoji: –ù–æ–≤–æ–µ —ç–º–æ–¥–∑–∏
            color: –ù–æ–≤—ã–π —Ü–≤–µ—Ç
            key_role_id: –ù–æ–≤—ã–π ID –∫–ª—é—á–µ–≤–æ–π —Ä–æ–ª–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            departments = config.get('departments', {})
            
            if dept_id not in departments:
                logger.error(f"Department {dept_id} not found")
                return False
            
            department = departments[dept_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            if name is not None:
                department['name'] = name
            if emoji is not None:
                department['emoji'] = emoji
            if color is not None:
                department['color'] = color
            if key_role_id is not None:
                department['key_role_id'] = key_role_id
            
            config['departments'][dept_id] = department
            save_config(config)
            
            logger.info(f"Updated department: {dept_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error editing department {dept_id}: {e}")
            return False
    
    @classmethod
    def delete_department(cls, dept_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            departments = config.get('departments', {})
            
            if dept_id not in departments:
                logger.error(f"Department {dept_id} not found")
                return False
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            del departments[dept_id]
            config['departments'] = departments
            
            # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤
            if 'ping_contexts' in config:
                ping_contexts = config['ping_contexts']
                for context_key in list(ping_contexts.keys()):
                    if context_key.startswith(f"{dept_id}_"):
                        del ping_contexts[context_key]
                config['ping_contexts'] = ping_contexts
            
            save_config(config)
            
            logger.info(f"Deleted department: {dept_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error deleting department {dept_id}: {e}")
            return False
    
    @classmethod
    def get_user_department(cls, user: discord.Member) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–æ–ª—è–º
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Discord
            
        Returns:
            str: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        departments = cls.get_all_departments()
        
        user_department = None
        highest_position = -1
        
        for dept_id, dept_data in departments.items():
            key_role_id = dept_data.get('key_role_id')
            if key_role_id:
                role = user.guild.get_role(key_role_id)
                if role and role in user.roles:
                    # –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–ª—å —Å –Ω–∞–∏–≤—ã—Å—à–µ–π –ø–æ–∑–∏—Ü–∏–µ–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
                    if role.position > highest_position:
                        highest_position = role.position
                        user_department = dept_id
        
        return user_department
    
    @classmethod
    def get_user_department_name(cls, user: discord.Member) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Discord
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        """
        department_id = cls.get_user_department(user)
        if department_id:
            departments = cls.get_all_departments()
            dept_data = departments.get(department_id, {})
            return dept_data.get('name', department_id)
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    @classmethod
    def get_department_safe(cls, dept_code: str) -> Optional[Dict]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            dept_code: –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        departments = cls.get_all_departments()
        dept_data = departments.get(dept_code)
        
        if not dept_data:
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤
        safe_data = {
            'name': dept_data.get('name', dept_code),
            'description': dept_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'emoji': dept_data.get('emoji', 'üèõÔ∏è'),
            'is_system': dept_data.get('is_system', False),
            'key_role_id': dept_data.get('key_role_id'),
            'ping_contexts': dept_data.get('ping_contexts', {}),
            'application_channel_id': dept_data.get('application_channel_id')
        }
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ - –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É
        color = dept_data.get('color', 0x3498db)
        if isinstance(color, str):
            try:
                safe_data['color'] = int(color)
            except (ValueError, TypeError):
                safe_data['color'] = 0x3498db  # –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            safe_data['color'] = color if isinstance(color, int) else 0x3498db
        
        return safe_data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
DepartmentManager.initialize_system_departments()
