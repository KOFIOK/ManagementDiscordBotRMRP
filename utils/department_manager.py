"""
Department Manager - Centralized management for departments
"""
import discord
from typing import Dict, List, Optional, Tuple
from utils.config_manager import load_config, save_config
import logging

logger = logging.getLogger(__name__)

class DepartmentManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º–∏"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    PRESET_COLORS = {
        '–°–∏–Ω–∏–π': 0x3498db,
        '–ó–µ–ª—ë–Ω—ã–π': 0x2ecc71,
        '–ö—Ä–∞—Å–Ω—ã–π': 0xe74c3c,
        '–û—Ä–∞–Ω–∂–µ–≤—ã–π': 0xf39c12,
        '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π': 0x9b59b6,
        '–ë–∏—Ä—é–∑–æ–≤—ã–π': 0x1abc9c,
        '–ñ—ë–ª—Ç—ã–π': 0xf1c40f,
        '–†–æ–∑–æ–≤—ã–π': 0xe91e63,
        '–°–µ—Ä—ã–π': 0x95a5a6,
        '–¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π': 0x2c3e50
    }
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∑–∞—â–∏—â–µ–Ω—ã —Ñ–ª–∞–≥–æ–º is_system)
    SYSTEM_DEPARTMENTS = {
        '–£–í–ü': {
            'name': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –í–æ–µ–Ω–Ω–æ–π –ü–æ–ª–∏—Ü–∏–∏',
            'description': '–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –Ω–∞–¥–∑–æ—Ä –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤–æ–∏–Ω—Å–∫–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
            'color': 0x3498db,
            'emoji': 'üéì',
            'is_system': True
        },
        '–°–°–û': {
            'name': '–°–∏–ª—ã –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –û–ø–µ—Ä–∞—Ü–∏–π',
            'description': '–≠–ª–∏—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á',
            'color': 0x2ecc71,
            'emoji': 'üéØ',
            'is_system': True
        },
        '–†–û–∏–û': {
            'name': '–†–æ—Ç–∞ –û—Ö—Ä–∞–Ω—ã –∏ –û–±–µ—Å–ø–µ—á–µ–Ω–∏—è',
            'description': '–†–∞–∑–≤–µ–¥—ã–≤–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            'color': 0x9b59b6,
            'emoji': 'üîç',
            'is_system': True
        },
        '–í–ö': {
            'name': '–í–æ–µ–Ω–Ω—ã–π –ö–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç',
            'description': '–û–±—É—á–µ–Ω–∏–µ –∏ –º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
            'color': 0xe74c3c,
            'emoji': 'üöî',
            'is_system': True
        },
        '–ú–†': {
            'name': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –†–æ—Ç–∞',
            'description': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ª–∏—á–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É',
            'color': 0xf39c12,
            'emoji': 'üè•',
            'is_system': True
        },
        '–í–ê': {
            'name': '–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è',
            'description': '–í—ã—Å—à–µ–µ –≤–æ–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ñ–∏—Ü–µ—Ä—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞',
            'color': 0x1abc9c,
            'emoji': 'üéñÔ∏è',
            'is_system': True
        }
    }
    
    @classmethod
    def initialize_system_departments(cls):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
        config = load_config()
        departments = config.get('departments', {})
        
        updated = False
        for dept_code, dept_data in cls.SYSTEM_DEPARTMENTS.items():
            if dept_code not in departments:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                full_dept_data = dept_data.copy()
                full_dept_data.update({
                    'application_channel_id': None,
                    'persistent_message_id': None,
                    'ping_contexts': {}
                })
                departments[dept_code] = full_dept_data
                updated = True
                logger.info(f"Initialized system department: {dept_code}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º is_system —Ñ–ª–∞–≥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                existing_dept = departments[dept_code]
                if not existing_dept.get('is_system', False):
                    existing_dept['is_system'] = True
                    updated = True
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                missing_fields = {
                    'application_channel_id': None,
                    'persistent_message_id': None,
                    'ping_contexts': {}
                }
                for field, default_value in missing_fields.items():
                    if field not in existing_dept:
                        existing_dept[field] = default_value
                        updated = True
        
        if updated:
            config['departments'] = departments
            save_config(config)
            logger.info("System departments initialized/updated")
    
    @classmethod
    def get_all_departments(cls) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        cls.initialize_system_departments()  # –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        config = load_config()
        return config.get('departments', {})
    
    @classmethod
    def get_department(cls, dept_code: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        departments = cls.get_all_departments()
        return departments.get(dept_code)
    
    # –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–µ–Ω–∏–µ HEX-–∫–æ–¥–∞ —Ü–≤–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    @classmethod
    def get_color_hex_by_name(cls, color_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ."""
        for name, hex_code in cls.PRESET_COLORS.items():
            if name.lower() == color_name.lower():
                return hex_code
        return cls.PRESET_COLORS['–°–∏–Ω–∏–π'] # –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: add_department (–±—ã–≤—à–µ–µ –≤—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø–µ—Ä–≤–æ–µ —É–¥–∞–ª–µ–Ω–æ)
    @classmethod
    def add_department(cls, dept_id: str, name: str, description: Optional[str] = None,
                      emoji: Optional[str] = None, color: Optional[str] = None,
                      role_id: Optional[int] = None) -> bool:
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
            emoji: –≠–º–æ–¥–∑–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            color: –¶–≤–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞)
            role_id: ID –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–¥–ª—è —Å–≤—è–∑–∏ —Å PostgreSQL –ë–î)

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            if 'departments' not in config:
                config['departments'] = {}

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not dept_id or not name:
                logger.error("Dept ID and name are required.")
                return False

            if dept_id in config['departments']:
                logger.error(f"Department with ID '{dept_id}' already exists.")
                return False

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ß–ò–°–õ–û–í–û–ì–û —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            final_color_hex = cls.get_color_hex_by_name(color) if color else cls.PRESET_COLORS['–°–∏–Ω–∏–π']

            new_department = {
                'name': name,
                'description': description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                'emoji': emoji or 'üèõÔ∏è',
                'color': final_color_hex, # –°–û–•–†–ê–ù–Ø–ï–ú –ß–ò–°–õ–û–í–û–ô HEX-–ö–û–î
                'role_id': role_id,  # –°–≤—è–∑—å —Å PostgreSQL –ë–î
                'is_system': False,
                'ping_contexts': {},
                'application_channel_id': None
            }

            config['departments'][dept_id] = new_department
            save_config(config)

            logger.info(f"Added department: {dept_id} - {name}")
            return True

        except Exception as e:
            logger.error(f"Error adding department {dept_id}: {e}")
            return False

    @classmethod
    def edit_department(cls, dept_id: str, name: str, description: Optional[str] = None,
                       emoji: Optional[str] = None, color: Optional[str] = None,
                       role_id: Optional[int] = None) -> bool:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            emoji: –≠–º–æ–¥–∑–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            color: –¶–≤–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞)
            role_id: ID –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            departments = config.get('departments', {})

            if dept_id not in departments:
                logger.error(f"Department '{dept_id}' not found")
                return False

            department = departments[dept_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
            if name is not None:
                department['name'] = name
            if description is not None:
                department['description'] = description
            if emoji is not None:
                department['emoji'] = emoji
            if color is not None:
                if isinstance(color, str):
                    if color.startswith('#'):
                        # HEX —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
                        is_valid, hex_value = cls.validate_hex_color(color)
                        department['color'] = hex_value if is_valid else cls.PRESET_COLORS['–°–∏–Ω–∏–π']
                    else:
                        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
                        department['color'] = cls.get_color_hex_by_name(color)
                elif isinstance(color, int):
                    # –ß–∏—Å–ª–æ–≤–æ–π HEX –∫–æ–¥
                    department['color'] = color
            if role_id is not None:
                department['role_id'] = role_id

            save_config(config)
            logger.info(f"Edited department: {dept_id} - {name}")
            return True

        except Exception as e:
            logger.error(f"Error editing department {dept_id}: {e}")
            return False

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: update_department
    # –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–µ –ø—É—Ç–∞—Ç—å —Å add_department.
    # –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ kwargs, –æ–Ω —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 'color'.
    # –ù—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ kwargs –ø–µ—Ä–µ–¥–∞–µ—Ç HEX-–∫–æ–¥, –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
    # –í–∞—à –º–µ—Ç–æ–¥ edit_department (–Ω–∏–∂–µ) –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å get_color_hex_by_name
    # –¢–∞–∫ —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ update_department –º–æ–∂–µ—Ç –æ—Å—Ç–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    # –ø–µ—Ä–µ–¥–∞—é—Ç HEX-–∫–æ–¥, –∏–ª–∏ –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
    # –î–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –ª—É—á—à–µ, —á—Ç–æ–±—ã –æ–Ω —Ç–æ–∂–µ –º–æ–≥ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —Ü–≤–µ—Ç–∞.
    @classmethod
    def update_department(cls, dept_code: str, **kwargs) -> Tuple[bool, str]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

        Args:
            dept_code: –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            **kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (name, description, role_id, color (str or int), emoji)
        """
        try:
            departments = cls.get_all_departments()

            if dept_code not in departments:
                return False, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            department = departments[dept_code]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
            for field, value in kwargs.items():
                if field == 'color' and isinstance(value, str):
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HEX
                    department[field] = cls.get_color_hex_by_name(value)
                elif field in ['name', 'description', 'role_id', 'emoji']:
                    department[field] = value

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            config = load_config()
            config['departments'][dept_code] = department
            save_config(config)

            logger.info(f"Updated department: {dept_code}")
            return True, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"

        except Exception as e:
            logger.error(f"Error updating department {dept_code}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}"

    @classmethod
    def remove_department(cls, dept_code: str) -> Tuple[bool, str]:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            departments = cls.get_all_departments()

            if dept_code not in departments:
                return False, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞
            department = departments[dept_code]
            if department.get('is_system', False):
                return False, f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}'"

            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            config = load_config()

            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if 'departments' in config and dept_code in config['departments']:
                del config['departments'][dept_code]

            # –û—á–∏—Å—Ç–∫–∞ legacy ping_settings (–µ—Å–ª–∏ –µ—Å—Ç—å)
            ping_settings = config.get('ping_settings', {})
            role_id = department.get('role_id')
            if role_id and str(role_id) in ping_settings:
                del ping_settings[str(role_id)]
                config['ping_settings'] = ping_settings

            save_config(config)

            logger.info(f"Removed department: {dept_code}")
            return True, f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{dept_code}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã"

        except Exception as e:
            logger.error(f"Error removing department {dept_code}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}"

    @classmethod
    def generate_select_options(cls) -> List[discord.SelectOption]:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ü–∏–∏ –¥–ª—è select menu"""
        departments = cls.get_all_departments()
        options = []

        for dept_code, dept_data in departments.items():
            # –ó–¥–µ—Å—å color –≤ dept_data —É–∂–µ –±—É–¥–µ—Ç HEX-–∫–æ–¥–æ–º
            color_hex = dept_data.get('color', 0x3498db)

            options.append(discord.SelectOption(
                label=f"{dept_code} - {dept_data['name']}",
                description=dept_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100],  # Discord limit
                emoji=dept_data.get('emoji', 'üèõÔ∏è'),
                value=dept_code
            ))

        return options

    @classmethod
    def get_departments_by_role(cls, role_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ ID —Ä–æ–ª–∏ (–¥–ª—è ping-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        departments = cls.get_all_departments()
        matching_departments = []

        for dept_code, dept_data in departments.items():
            if dept_data.get('role_id') == role_id:
                matching_departments.append(dept_code)

        return matching_departments

    @classmethod
    def get_color_options(cls) -> List[discord.SelectOption]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è select menu (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI)"""
        options = []

        for color_name, color_value in cls.PRESET_COLORS.items():
            options.append(discord.SelectOption(
                label=color_name,
                value=color_name, # Value —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
                emoji="üé®"
            ))

        return options

    @classmethod
    def get_available_colors(cls) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        return list(cls.PRESET_COLORS.keys())

    @classmethod
    def validate_hex_color(cls, color_input: str) -> Tuple[bool, int]:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å HEX –∫–æ–¥ —Ü–≤–µ—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        Args:
            color_input: –°—Ç—Ä–æ–∫–∞ —Å HEX –∫–æ–¥–æ–º (—Å # –∏–ª–∏ –±–µ–∑)
            
        Returns:
            Tuple[bool, int]: (is_valid, hex_value)
        """
        import re
        
        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
        color_input = color_input.strip().lstrip('#')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 3 –∏–ª–∏ 6 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ hex —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[0-9a-fA-F]{3,6}$', color_input):
            return False, 0
        
        # –ï—Å–ª–∏ 3 —Å–∏–º–≤–æ–ª–∞, —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–æ 6
        if len(color_input) == 3:
            color_input = ''.join(c * 2 for c in color_input)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        try:
            hex_value = int(color_input, 16)
            return True, hex_value
        except ValueError:
            return False, 0

    @classmethod
    def get_department_statistics(cls) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        departments = cls.get_all_departments()

        stats = {
            'total': len(departments),
            'system': 0,
            'custom': 0,
            'with_channels': 0,
            'with_pings': 0
        }

        for dept_data in departments.values():
            if dept_data.get('is_system', False):
                stats['system'] += 1
            else:
                stats['custom'] += 1

            if dept_data.get('application_channel_id'):
                stats['with_channels'] += 1

            if dept_data.get('ping_contexts'):
                stats['with_pings'] += 1

        return stats

    @classmethod
    def department_exists(cls, dept_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"""
        departments = cls.get_all_departments()
        return dept_id in departments

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: edit_department
    @classmethod
    def edit_department(cls, dept_id: str, name: Optional[str] = None,
                       emoji: Optional[str] = None, color: Optional[str] = None, # color —Ç–µ–ø–µ—Ä—å Optional[str]
                       role_id: Optional[int] = None, description: Optional[str] = None) -> bool: # –î–æ–±–∞–≤–ª–µ–Ω description
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ

        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            name: –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            emoji: –ù–æ–≤–æ–µ —ç–º–æ–¥–∑–∏
            color: –ù–æ–≤—ã–π —Ü–≤–µ—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ)
            role_id: –ù–æ–≤—ã–π ID –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–¥–ª—è —Å–≤—è–∑–∏ —Å PostgreSQL –ë–î)
            description: –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            departments = config.get('departments', {})

            if dept_id not in departments:
                logger.error(f"Department {dept_id} not found")
                return False

            department = departments[dept_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
            if name is not None:
                department['name'] = name
            if emoji is not None:
                department['emoji'] = emoji
            if description is not None: # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                department['description'] = description
            if color is not None:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ —á–∏—Å–ª–æ–≤–æ–π HEX-–∫–æ–¥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                department['color'] = cls.get_color_hex_by_name(color)
            if role_id is not None:
                department['role_id'] = role_id

            config['departments'][dept_id] = department
            save_config(config)

            logger.info(f"Updated department: {dept_id}")
            return True

        except Exception as e:
            logger.error(f"Error editing department {dept_id}: {e}")
            return False

    @classmethod
    def delete_department(cls, dept_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

        Args:
            dept_id: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            config = load_config()
            departments = config.get('departments', {})

            if dept_id not in departments:
                logger.error(f"Department {dept_id} not found")
                return False

            # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            del departments[dept_id]
            config['departments'] = departments

            # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–æ–≤
            if 'ping_contexts' in config:
                ping_contexts = config['ping_contexts']
                for context_key in list(ping_contexts.keys()):
                    if context_key.startswith(f"{dept_id}_"):
                        del ping_contexts[context_key]
                config['ping_contexts'] = ping_contexts

            save_config(config)

            logger.info(f"Deleted department: {dept_id}")
            return True

        except Exception as e:
            logger.error(f"Error deleting department {dept_id}: {e}")
            return False

    @classmethod
    def get_user_department(cls, user: discord.Member) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —Ä–æ–ª—è–º (PostgreSQL-based)

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Discord

        Returns:
            str: ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        departments = cls.get_all_departments()

        # Get user's role IDs for faster lookup
        user_role_ids = {role.id for role in user.roles}

        # Check each department's role_id (PostgreSQL-based)
        for dept_id, dept_data in departments.items():
            role_id = dept_data.get('role_id')

            # Check if user has this department's role_id
            if role_id and role_id in user_role_ids:
                return dept_id

        return None

    @classmethod
    def get_user_department_name(cls, user: discord.Member) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Discord

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        """
        department_id = cls.get_user_department(user)
        if department_id:
            departments = cls.get_all_departments()
            dept_data = departments.get(department_id, {})
            return dept_data.get('name', department_id)
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    @classmethod
    def get_department_safe(cls, dept_code: str) -> Optional[Dict]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö

        Args:
            dept_code: –ö–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        departments = cls.get_all_departments()
        dept_data = departments.get(dept_code)

        if not dept_data:
            return None

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤
        safe_data = {
            'name': dept_data.get('name', dept_code),
            'description': dept_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            'emoji': dept_data.get('emoji', 'üèõÔ∏è'),
            'is_system': dept_data.get('is_system', False),
            'role_id': dept_data.get('role_id'),
            'ping_contexts': dept_data.get('ping_contexts', {}),
            'application_channel_id': dept_data.get('application_channel_id')
        }

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å 'color' –≤ config.json –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç int (HEX-–∫–æ–¥–æ–º)
        # –±–ª–∞–≥–æ–¥–∞—Ä—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º add_department –∏ edit_department.
        # –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        color = dept_data.get('color', 0x3498db)
        if isinstance(color, str): # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –º–æ–∂–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            try:
                safe_data['color'] = int(color) # –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç HEX –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            except (ValueError, TypeError):
                safe_data['color'] = 0x3498db  # –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            safe_data['color'] = color if isinstance(color, int) else 0x3498db

        return safe_data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
DepartmentManager.initialize_system_departments()