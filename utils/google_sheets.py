import gspread
import os
from datetime import datetime
import discord
import re
import asyncio
import functools
from datetime import datetime

# Google Sheets configuration
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]

def retry_on_google_error(retries=3, delay=1):
    """Decorator for retrying Google Sheets operations on failure"""
    def decorator(func):
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            last_error = None
            for attempt in range(retries):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_error = e
                    error_msg = str(e)
                    
                    # Check if it's a Google API error
                    if "APIError" in str(type(e)) or "503" in error_msg or "500" in error_msg:
                        if attempt < retries - 1:  # Don't sleep on the last attempt
                            wait_time = delay * (attempt + 1)  # Exponential backoff
                            print(f"‚ö†Ô∏è Google Sheets error, retrying in {wait_time}s: {e}")
                            await asyncio.sleep(wait_time)
                            continue
                    else:
                        # If it's not a Google API error, don't retry
                        raise e
                    
            print(f"‚ùå All retry attempts failed: {last_error}")
            raise last_error
        return wrapper
    return decorator

class GoogleSheetsManager:
    def __init__(self):
        self.credentials_path = 'credentials.json'
        self.spreadsheet_name = '–í–° –†–§ | –û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π –ê—É–¥–∏—Ç'
        self.dismissal_sheet_name = '–û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π'
        self.client = None
        self.spreadsheet = None
        self.worksheet = None
        
    def initialize(self):
        """Initialize the Google Sheets connection."""
        try:
            # Check if credentials file exists
            if not os.path.exists(self.credentials_path):
                print(f"‚ùå Credentials file not found: {self.credentials_path}")
                return False
            
            # Connect to Google Sheets
            print(f"üìÅ Loading credentials from: {self.credentials_path}")
            self.client = gspread.service_account(filename=self.credentials_path)
            
            print(f"üìä Opening spreadsheet: {self.spreadsheet_name}")
            self.spreadsheet = self.client.open(self.spreadsheet_name)
            
            print(f"üìã Opening worksheet: {self.dismissal_sheet_name}")
            self.worksheet = self.spreadsheet.worksheet(self.dismissal_sheet_name)
            
            print("‚úÖ Google Sheets successfully initialized!")
            return True
        except gspread.SpreadsheetNotFound:
            print(f"‚ùå Spreadsheet '{self.spreadsheet_name}' not found or no access")
            return False
        except gspread.WorksheetNotFound:
            print(f"‚ùå Worksheet '{self.dismissal_sheet_name}' not found in spreadsheet")
            return False
        except Exception as e:
            print(f"‚ùå Failed to initialize Google Sheets: {type(e).__name__}: {e}")
            if hasattr(e, 'response'):
                print(f"Response status: {e.response.status_code}")
                print(f"Response text: {e.response.text}")
            return False
    
    async def async_initialize(self):
        """Async wrapper for initialize method."""
        return self.initialize()
    
    def _ensure_connection(self):
        """Ensure we have a valid connection to Google Sheets."""
        if not self.client or not self.spreadsheet or not self.worksheet:
            try:
                self.client = gspread.service_account(filename=self.credentials_path)
                self.spreadsheet = self.client.open(self.spreadsheet_name)
                self.worksheet = self.spreadsheet.worksheet(self.dismissal_sheet_name)
                return True
            except Exception as e:
                print(f"Error establishing Google Sheets connection: {e}")
                return False
        return True
    
    def get_worksheet(self, worksheet_name):
        """
        Get a specific worksheet by name.
        
        Args:
            worksheet_name (str): Name of the worksheet to get
            
        Returns:
            gspread.Worksheet or None: The worksheet object if found, None otherwise
        """
        try:
            if not self.client:
                self.client = gspread.service_account(filename=self.credentials_path)
            
            if not self.spreadsheet:
                self.spreadsheet = self.client.open(self.spreadsheet_name)
            
            return self.spreadsheet.worksheet(worksheet_name)
        except gspread.WorksheetNotFound:
            print(f"‚ùå Worksheet '{worksheet_name}' not found in spreadsheet")
            return None
        except Exception as e:
            print(f"‚ùå Error getting worksheet '{worksheet_name}': {e}")
            return None
    
    def get_rank_from_roles(self, member):
        """Extract rank from user's Discord roles."""
        # Check if this is a MockUser (users who left the server)
        if getattr(member, '_is_mock', False):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        # Check if member has roles attribute (additional safety check)
        if not hasattr(member, 'roles') or member.roles is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        # Full rank names
        ranks = [
            "–ì–µ–Ω–µ—Ä–∞–ª –ê—Ä–º–∏–∏", "–ì–µ–Ω–µ—Ä–∞–ª-–ü–æ–ª–∫–æ–≤–Ω–∏–∫", "–ì–µ–Ω–µ—Ä–∞–ª-–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ì–µ–Ω–µ—Ä–∞–ª-–ú–∞–π–æ—Ä",
            "–ü–æ–ª–∫–æ–≤–Ω–∏–∫", "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫", "–ú–∞–π–æ—Ä", "–ö–∞–ø–∏—Ç–∞–Ω", "–°—Ç–∞—Ä—à–∏–π –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
            "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ú–ª–∞–¥—à–∏–π –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–°—Ç–∞—Ä—à–∏–π –ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–ü—Ä–∞–ø–æ—Ä—â–∏–∫",
            "–°—Ç–∞—Ä—à–∏–Ω–∞", "–°—Ç–∞—Ä—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç", "–°–µ—Ä–∂–∞–Ω—Ç", "–ú–ª–∞–¥—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç", "–ï—Ñ—Ä–µ–π—Ç–æ—Ä", "–†—è–¥–æ–≤–æ–π"
        ]
        
        # Abbreviated rank names mapping to full names
        rank_abbreviations = {
            "–ú–ª. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": "–ú–ª–∞–¥—à–∏–π –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
            "–°—Ç. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": "–°—Ç–∞—Ä—à–∏–π –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", 
            "–°—Ç. –ü—Ä–∞–ø–æ—Ä—â–∏–∫": "–°—Ç–∞—Ä—à–∏–π –ü—Ä–∞–ø–æ—Ä—â–∏–∫",
            "–°—Ç. –°–µ—Ä–∂–∞–Ω—Ç": "–°—Ç–∞—Ä—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç",
            "–ú–ª. –°–µ—Ä–∂–∞–Ω—Ç": "–ú–ª–∞–¥—à–∏–π –°–µ—Ä–∂–∞–Ω—Ç",
            "–ì–µ–Ω. –ê—Ä–º–∏–∏": "–ì–µ–Ω–µ—Ä–∞–ª –ê—Ä–º–∏–∏",
            "–ì–µ–Ω. –ü–æ–ª–∫–æ–≤–Ω–∏–∫": "–ì–µ–Ω–µ—Ä–∞–ª-–ü–æ–ª–∫–æ–≤–Ω–∏–∫",
            "–ì–µ–Ω. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç": "–ì–µ–Ω–µ—Ä–∞–ª-–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç",
            "–ì–µ–Ω. –ú–∞–π–æ—Ä": "–ì–µ–Ω–µ—Ä–∞–ª-–ú–∞–π–æ—Ä"
        }
        
        for role in member.roles:
            # Check full rank names first
            if role.name in ranks:
                return role.name
            # Check abbreviated rank names
            elif role.name in rank_abbreviations:
                return rank_abbreviations[role.name]
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def get_department_from_roles(self, member, ping_settings):
        """Extract department from user's Discord roles based on ping settings."""
        # Check if this is a MockUser (users who left the server)
        if getattr(member, '_is_mock', False):
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        # Check if member has a guild (additional safety check)
        if not hasattr(member, 'guild') or member.guild is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
        if not ping_settings:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # Find user's highest department role (by position in hierarchy)
        user_department = None
        highest_position = -1
        
        for department_role_id in ping_settings.keys():
            department_role = member.guild.get_role(int(department_role_id))
            if department_role and department_role in member.roles:
                # Check if this role is higher in hierarchy than current highest
                if department_role.position > highest_position:
                    highest_position = department_role.position
                    user_department = department_role
        
        return user_department.name if user_department else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def extract_name_from_nickname(self, display_name):
        """Extract clean name from Discord nickname, removing department/position prefixes."""
        # Format 1: "{–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ} | –ò–º—è –§–∞–º–∏–ª–∏—è"
        if " | " in display_name:
            return display_name.split(" | ", 1)[1]
        
        # Format 2: "[–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è –§–∞–º–∏–ª–∏—è" or "!![–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è –§–∞–º–∏–ª–∏—è" or "![–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è –§–∞–º–∏–ª–∏—è"
        elif "]" in display_name:
            # Find the last occurrence of "]" to handle nested brackets
            bracket_end = display_name.rfind("]")
            if bracket_end != -1:
                # Extract everything after "]", removing leading exclamation marks and spaces
                after_bracket = display_name[bracket_end + 1:]
                # Remove leading exclamation marks and spaces
                clean_name = re.sub(r'^[!\s]+', '', after_bracket).strip()
                if clean_name:
                    return clean_name
          # If no specific format found, return as is
            return display_name
    @retry_on_google_error(retries=3, delay=1)
    async def get_user_info_by_discord_id(self, discord_id):
        """Search for user by Discord ID in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet and return full name with static from column J."""
        try:
            print(f"üìã SHEET SEARCH: Looking for Discord ID '{discord_id}' in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet")
            
            # Ensure connection
            if not self._ensure_connection():
                print("‚ùå SHEET SEARCH: Failed to establish Google Sheets connection")
                return None
            
            # Get the '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' worksheet
            users_worksheet = None
            all_worksheets = self.spreadsheet.worksheets()
            worksheet_names = [ws.title for ws in all_worksheets]
            print(f"üìã SHEET SEARCH: Available worksheets: {worksheet_names}")
            
            for worksheet in all_worksheets:
                if worksheet.title == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
                    users_worksheet = worksheet
                    break
            
            if not users_worksheet:
                print("‚ùå SHEET SEARCH: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet not found")
                return None
            
            print("‚úÖ SHEET SEARCH: Found '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' worksheet")
            
            # Get all values with retry mechanism
            try:
                all_values = users_worksheet.get_all_values()
                print(f"üìã SHEET SEARCH: Retrieved {len(all_values)} rows from sheet")
            except Exception as e:
                print(f"‚ùå Error getting values from sheet: {e}")
                raise  # Let the retry decorator handle it
            
            # Skip header row (row 0) and search in data rows
            discord_id_str = str(discord_id)
            
            for i, row in enumerate(all_values[1:], start=1):  # Start from row 1 (skip header)
                if len(row) > 5:  # Ensure row has at least column F (Discord ID)
                    cell_discord_id = row[5] if len(row) > 5 else ""  # Column F (index 5)
                    if cell_discord_id and cell_discord_id.strip() == discord_id_str:
                        print(f"‚úÖ SHEET SEARCH: MATCH FOUND in row {i+1} for Discord ID: '{discord_id}'")
                        
                        # Found match, return corresponding value from column J if exists
                        if len(row) > 9 and row[9]:  # Column J exists and has value
                            print(f"‚úÖ SHEET SEARCH: Returning column J value: '{row[9]}'")
                            return row[9]
                        else:
                            # If column J is empty, construct from B and C
                            name_value = row[1] if len(row) > 1 else ""  # Column B
                            static_value = row[2] if len(row) > 2 else ""  # Column C
                            if name_value and static_value:
                                result = f"{name_value} | {static_value}"
                                print(f"‚úÖ SHEET SEARCH: Column J empty, constructed: '{result}'")
                                return result
                            elif name_value:
                                print(f"‚úÖ SHEET SEARCH: No static found, returning name only: '{name_value}'")
                                return name_value
                            else:
                                print(f"‚ö†Ô∏è SHEET SEARCH: Found Discord ID but no name data")
                                return None
                                                        
            print(f"‚ùå SHEET SEARCH: No match found for Discord ID '{discord_id}'")
            return None
            
        except Exception as e:
            print(f"Error searching in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet: {e}")
            raise  # Let the retry decorator handle it

    @retry_on_google_error(retries=3, delay=1)
    async def check_moderator_authorization(self, approving_user):
        """
        Check if moderator is authorized in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet by Discord ID.
        Returns dict with authorization status and info.
        """
        try:
            print(f"üîç AUTHORIZATION CHECK: User '{approving_user.display_name}' (ID: {approving_user.id})")
            
            try:
                # Search in '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet by Discord ID
                full_user_info = await self.get_user_info_by_discord_id(approving_user.id)
                print(f"üîç AUTHORIZATION CHECK: Search result: {full_user_info}")
                
                if full_user_info:
                    print(f"‚úÖ AUTHORIZATION CHECK: Moderator FOUND in system!")
                    return {
                        "found": True,
                        "info": full_user_info,
                        "clean_name": approving_user.display_name,
                        "requires_manual_input": False
                    }
                else:
                    print(f"‚ùå AUTHORIZATION CHECK: Moderator NOT FOUND in system!")
                    return {
                        "found": False,  # Moderator not found - need manual registration
                        "info": None,
                        "clean_name": approving_user.display_name,
                        "requires_manual_input": True
                    }
            except Exception as e:
                print(f"‚ö†Ô∏è AUTHORIZATION CHECK: Sheet search failed: {e}")
                # Fall back to requiring manual auth if Google Sheets fails
                print(f"‚ÑπÔ∏è AUTHORIZATION CHECK: Using fallback mode - requiring manual auth")
                return {
                    "found": False,  # Require manual auth in fallback mode
                    "info": None,
                    "clean_name": approving_user.display_name,
                    "requires_manual_input": True
                }
                
        except Exception as e:
            print(f"‚ùå AUTHORIZATION CHECK: Error in check_moderator_authorization: {e}")
            # In case of any error, require manual auth for safety
            return {
                "found": False,  # Require manual auth in case of problems
                "info": None,
                "clean_name": approving_user.display_name,
                "requires_manual_input": False
            }
    
    async def add_dismissal_record(self, form_data, dismissed_user, approving_user, dismissal_time, ping_settings, override_moderator_info=None):
        """Add a dismissal record to the Google Sheets."""
        try:
            # Ensure connection
            if not self._ensure_connection():
                print("Failed to establish Google Sheets connection")
                return False
            
            # Extract name from form data (use form name as primary source)
            name_from_form = form_data.get('name', '')
            static_from_form = form_data.get('static', '')
              # Use name from form as primary, fallback to extracted from nickname
            real_name = name_from_form or self.extract_name_from_nickname(dismissed_user.display_name)
            discord_id = str(dismissed_user.id)
              # Handle MockUser case or when user has left server - use form data instead of roles
            if getattr(dismissed_user, '_is_mock', False):
                # For MockUser, get data from form instead of roles
                rank = form_data.get('rank', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                department = form_data.get('department', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"Using form data for MockUser: rank={rank}, department={department}")
            else:
                # For real users, try to get from roles first, then fallback to form data
                rank = self.get_rank_from_roles(dismissed_user)
                department = self.get_department_from_roles(dismissed_user, ping_settings)
                
                # If rank or department not found from roles (user may have left server), use form data
                if rank == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' and form_data.get('rank'):
                    rank = form_data.get('rank', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"Using form data for rank: {rank}")
                
                if department == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' and form_data.get('department'):
                    department = form_data.get('department', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"Using form data for department: {department}")
            
            # Log the data sources for debugging
            print(f"üìä DISMISSAL LOGGING DEBUG:")
            print(f"   User: {dismissed_user.display_name} (ID: {dismissed_user.id})")
            print(f"   Is MockUser: {getattr(dismissed_user, '_is_mock', False)}")
            print(f"   Form data: {form_data}")
            print(f"   Final rank: {rank}")
            print(f"   Final department: {department}")
            
            # Get approved by info - use override if provided, otherwise use centralized method
            if override_moderator_info:
                approved_by_info = override_moderator_info
            else:
                # Use centralized authorization check
                auth_result = await self.check_moderator_authorization(approving_user)
                approved_by_info = auth_result["info"] or auth_result["clean_name"]
              # Prepare row data according to table structure:
            # Column 1: –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏  
            # Column 2: –ò–º—è –§–∞–º–∏–ª–∏—è | 6 —Ü–∏—Ñ—Ä —Å—Ç–∞—Ç–∏–∫–∞
            # Column 3: –ò–º—è–§–∞–º–∏–ª–∏—è
            # Column 4: –°—Ç–∞—Ç–∏–∫
            # Column 5: –î–µ–π—Å—Ç–≤–∏–µ (–¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç "–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ")
            # Column 6: –î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è
            # Column 7: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            # Column 8: –î–æ–ª–∂–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–æ–ª—å)
            # Column 9: –ó–≤–∞–Ω–∏–µ
            # Column 10: Discord ID –±–æ–π—Ü–∞
            # Column 11: –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
            # Column 12: –ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª
            # Column 13: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Discord (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
            row_data = [
                str(dismissal_time.strftime('%d.%m.%Y %H:%M')),  # –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                f"{real_name} | {static_from_form}" if static_from_form else str(real_name),  # –ò–º—è –§–∞–º–∏–ª–∏—è | —Å—Ç–∞—Ç–∏–∫
                str(real_name),  # –ò–º—è–§–∞–º–∏–ª–∏—è
                str(static_from_form) if static_from_form else "",  # –°—Ç–∞—Ç–∏–∫
                "–£–≤–æ–ª–µ–Ω —Å–æ —Å–ª—É–∂–±—ã",  # –î–µ–π—Å—Ç–≤–∏–µ—è
                str(dismissal_time.strftime('%d.%m.%Y')),  # –î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è
                str(department),  # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                "",  # –î–æ–ª–∂–Ω–æ—Å—Ç—å (–ø—É—Å—Ç–æ–µ)
                str(rank),  # –ó–≤–∞–Ω–∏–µ
                str(discord_id),  # Discord ID –±–æ–π—Ü–∞
                str(form_data.get('reason', '')),  # –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
                str(approved_by_info),  # –ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª
                ""  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Discord (–ø—É—Å—Ç–æ–µ)
            ]
            
            # Insert record at the beginning (after headers)
            result = self.worksheet.insert_row(row_data, index=2)
              # Check if insert was successful
            if result:
                print(f"‚úÖ Successfully added dismissal record for {real_name}")
                return True
            else:
                print(f"‚ùå Failed to add dismissal record for {real_name}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error adding dismissal record to Google Sheets: {e}")
            # Print more detailed error information
            if hasattr(e, 'response'):
                print(f"Response status: {e.response.status_code}")
                print(f"Response text: {e.response.text}")
            return False
    async def send_to_blacklist(self, guild, form_data, days_difference, audit_message_url=None, approving_user=None, override_moderator_info=None):
        """Send a message to blacklist channel about early dismissal penalty."""
        try:
            from utils.config_manager import load_config
            
            config = load_config()
            blacklist_channel_id = config.get('blacklist_channel')
            
            if not blacklist_channel_id:
                print("Blacklist channel not configured")
                return False
            
            blacklist_channel = guild.get_channel(blacklist_channel_id)
            if not blacklist_channel:
                print(f"Blacklist channel not found: {blacklist_channel_id}")
                return False
            
            # Get approving user info - use override if provided, otherwise use centralized method
            approving_user_name = "–°–∏—Å—Ç–µ–º–∞"
            if approving_user:
                if override_moderator_info:
                    approving_user_name = override_moderator_info
                else:
                    # Use centralized authorization check
                    auth_result = await self.check_moderator_authorization(approving_user)
                    approving_user_name = auth_result["info"] or auth_result["clean_name"]
            
            name = form_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            static = form_data.get('static', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # Format dates (current date + 14 days)
            from datetime import datetime, timedelta
            current_date = datetime.now()
            enforcement_date = current_date + timedelta(days=14)
            
            def format_date(date):
                return date.strftime('%d.%m.%Y')
            
            # Create embed fields in the required format
            fields = [
                {"name": "1. –ö—Ç–æ –≤—ã–¥–∞—ë—Ç", "value": approving_user_name, "inline": False},
                {"name": "2. –ö–æ–º—É", "value": f"{name} | {static}", "inline": False},
                {"name": "3. –ü—Ä–∏—á–∏–Ω–∞", "value": "–ù–µ—É—Å—Ç–æ–π–∫–∞", "inline": False},
                {"name": "4. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", "value": format_date(current_date), "inline": True},
                {"name": "5. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "value": format_date(enforcement_date), "inline": True},
                {"name": "6. –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "value": audit_message_url if audit_message_url else "‚Äî", "inline": False}
            ]
            
            # Create blacklist embed
            embed = discord.Embed(
                title="üìã –ù–æ–≤–æ–µ –¥–µ–ª–æ",
                color=0xe74c3c,  # Red color (15158332 in decimal)
                timestamp=discord.utils.utcnow()
            )
            
            # Add fields to embed
            for field in fields:
                embed.add_field(
                    name=field["name"], 
                    value=field["value"], 
                    inline=field["inline"]
                )
            
            # Set thumbnail
            embed.set_thumbnail(url="https://i.imgur.com/07MRSyl.png")
            
            # Send message with role pings
            # Note: You may need to configure these role IDs in your config
            role_mentions = config.get('blacklist_role_mentions', [])
            content = ""
            if role_mentions:
                mentions = [f"<@&{role_id}>" for role_id in role_mentions]
                content = f"-# {' '.join(mentions)}"
            
            await blacklist_channel.send(content=content, embed=embed)
            print(f"Successfully sent blacklist message for {name} ({static})")
            return True
        
        except Exception as e:
            print(f"Error sending message to blacklist: {e}")
            return False

    async def get_latest_hiring_record_by_static(self, static):
        """Search for the latest '–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É' record by static in '–û–±—â–∏–π –ö–∞–¥—Ä–æ–≤—ã–π' sheet."""
        try:
            # Ensure connection
            if not self._ensure_connection():
                return None
            
            # Get all records from the worksheet
            all_records = self.worksheet.get_all_records()
              # Filter records by static and action
            hiring_records = []
            for record in all_records:
                # Check if static matches (column 4 - –°—Ç–∞—Ç–∏–∫)
                record_static = str(record.get('–°—Ç–∞—Ç–∏–∫', '')).strip()
                # Check if action is "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É" (column 5 - –î–µ–π—Å—Ç–≤–∏–µ)
                record_action = str(record.get('–î–µ–π—Å—Ç–≤–∏–µ', '')).strip()
                
                if record_static == static and record_action == "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É":
                    hiring_records.append(record)
            
            if not hiring_records:
                return None
                
            # Find the latest record by date (column 6 - –î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è)
            latest_record = None
            latest_date = None
            
            for record in hiring_records:
                date_str = str(record.get('–î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è', '')).strip()
                if date_str:
                    try:
                        # Parse date - handle both with and without time
                        record_date = None
                        
                        # If date contains time, extract date part
                        if ' ' in date_str:
                            date_part = date_str.split(' ')[0]
                        else:
                            date_part = date_str
                        
                        # Try different date formats
                        try:
                            record_date = datetime.strptime(date_part, '%d.%m.%Y')
                        except ValueError:
                            try:
                                record_date = datetime.strptime(date_part, '%d-%m-%Y')
                            except ValueError:
                                # Try full datetime format
                                try:
                                    record_date = datetime.strptime(date_str, '%d.%m.%Y %H:%M:%S')
                                except ValueError:
                                    record_date = datetime.strptime(date_str, '%d-%m-%Y %H:%M:%S')
                        
                        if record_date and (latest_date is None or record_date > latest_date):
                            latest_date = record_date
                            latest_record = record
                            
                    except ValueError:
                        print(f"Could not parse date: {date_str}")
                        continue
            
            return latest_record
        
        except Exception as e:
            print(f"Error searching for hiring record by static: {e}")
            return None
    async def add_blacklist_record(self, form_data, dismissed_user, approving_user, dismissal_time, days_difference, override_moderator_info=None):
        """Add a blacklist penalty record to the '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)' sheet."""
        try:
            # Ensure connection
            if not self._ensure_connection():
                print("Failed to establish Google Sheets connection for blacklist record")
                return False
            
            # Get the '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)' worksheet
            blacklist_worksheet = None
            for worksheet in self.spreadsheet.worksheets():
                if worksheet.title == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)":
                    blacklist_worksheet = worksheet
                    break
            
            if not blacklist_worksheet:
                print("'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨)' sheet not found")
                return False
            
            # Extract data
            name_from_form = form_data.get('name', '')
            static_from_form = form_data.get('static', '')
            
            # Use name from form as primary
            real_name = name_from_form or self.extract_name_from_nickname(dismissed_user.display_name)
            
            # Get approving user info - use override if provided, otherwise use centralized method
            if override_moderator_info:
                approved_by_info = override_moderator_info
            else:
                # Use centralized authorization check
                auth_result = await self.check_moderator_authorization(approving_user)
                approved_by_info = auth_result["info"] or auth_result["clean_name"]
            
            # Format dates
            from datetime import timedelta
            current_date = dismissal_time.strftime('%d.%m.%Y')
            # Calculate enforcement date (current date + 14 days)
            enforcement_date = (dismissal_time + timedelta(days=14)).strftime('%d.%m.%Y')
            # Prepare row data according to blacklist sheet structure:
            # Column A: –°—Ä–æ–∫ (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ—É—Å—Ç–æ–π–∫–∏)
            # Column B: –ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫
            # Column C: –ü—Ä–∏—á–∏–Ω–∞
            # Column D: –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è 
            # Column E: –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è
            # Column F: –ö–µ–º –≤–Ω–µ—Å—ë–Ω
            # Column G: –°–æ–æ–±—â–µ–Ω–∏–µ
            row_data = [
                "14 –¥–Ω–µ–π",  # –°—Ä–æ–∫ - 14 –¥–Ω–µ–π –Ω–µ—É—Å—Ç–æ–π–∫–∏
                f"{real_name} | {static_from_form}" if static_from_form else str(real_name),  # –ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫
                "–ù–µ—É—Å—Ç–æ–π–∫–∞",  # –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ–≥–¥–∞ "–ù–µ—É—Å—Ç–æ–π–∫–∞"
                current_date,  # –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è
                enforcement_date,  # –î–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è (–¥–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è + 14 –¥–Ω–µ–π)
                approved_by_info,  # –ö–µ–º –≤–Ω–µ—Å—ë–Ω
                ""  # –°–æ–æ–±—â–µ–Ω–∏–µ
            ]
            
            # Insert record at the beginning (after headers)
            result = blacklist_worksheet.insert_row(row_data, index=2)
            
            # Check if insert was successful
            if result:
                print(f"‚úÖ Successfully added blacklist penalty record for {real_name}")
                return True
            else:
                print(f"‚ùå Failed to add blacklist penalty record for {real_name}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error adding blacklist penalty record to Google Sheets: {e}")
            # Print more detailed error information
            if hasattr(e, 'response'):
                print(f"Response status: {e.response.status_code}")
                print(f"Response text: {e.response.text}")
            return False
    
    
    async def add_hiring_record(self, application_data, approved_user, approving_user, hiring_time, override_moderator_info=None):
        """Add a hiring record to the Google Sheets for new recruits with rank '–†—è–¥–æ–≤–æ–π'."""
        try:
            # Ensure connection
            if not self._ensure_connection():
                print("Failed to establish Google Sheets connection")
                return False
            
            # Extract data from application
            name_from_form = application_data.get('name', '')
            static_from_form = application_data.get('static', '')
            rank = application_data.get('rank', '–†—è–¥–æ–≤–æ–π')
            recruitment_type = application_data.get('recruitment_type', '')
            
            # Only create record for "–†—è–¥–æ–≤–æ–π" rank
            if rank.lower() != '—Ä—è–¥–æ–≤–æ–π':
                print(f"Skipping hiring record - rank is '{rank}', not '–†—è–¥–æ–≤–æ–π'")
                return True  # Not an error, just not applicable
            
            discord_id = str(approved_user.id)
            
            # Get approved by info - use override if provided, otherwise use centralized method
            if override_moderator_info:
                approved_by_info = override_moderator_info
            else:
                # Use centralized authorization check
                auth_result = await self.check_moderator_authorization(approving_user)
                approved_by_info = auth_result["info"] or auth_result["clean_name"]
            
            # Prepare row data according to table structure:
            # Column 1: –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏  
            # Column 2: –ò–º—è –§–∞–º–∏–ª–∏—è | 6 —Ü–∏—Ñ—Ä —Å—Ç–∞—Ç–∏–∫–∞
            # Column 3: –ò–º—è–§–∞–º–∏–ª–∏—è
            # Column 4: –°—Ç–∞—Ç–∏–∫
            # Column 5: –î–µ–π—Å—Ç–≤–∏–µ (–¥–ª—è –Ω–∞–π–º–∞ –±—É–¥–µ—Ç "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É")
            # Column 6: –î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è
            # Column 7: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–¥–ª—è –Ω–æ–≤—ã—Ö - "–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è")
            # Column 8: –î–æ–ª–∂–Ω–æ—Å—Ç—å (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
            # Column 9: –ó–≤–∞–Ω–∏–µ ("–†—è–¥–æ–≤–æ–π")
            # Column 10: Discord ID –±–æ–π—Ü–∞
            # Column 11: –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è (–¥–ª—è –Ω–∞–π–º–∞ - –ø–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞: –≠–∫—Å–∫—É—Ä—Å–∏—è/–ü—Ä–∏–∑—ã–≤)
            # Column 12: –ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª
            # Column 13: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Discord (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
            row_data = [
                str(hiring_time.strftime('%d.%m.%Y %H:%M')),  # –û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                f"{name_from_form} | {static_from_form}" if static_from_form else str(name_from_form),  # –ò–º—è –§–∞–º–∏–ª–∏—è | —Å—Ç–∞—Ç–∏–∫
                str(name_from_form),  # –ò–º—è–§–∞–º–∏–ª–∏—è
                str(static_from_form) if static_from_form else "",  # –°—Ç–∞—Ç–∏–∫
                "–ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–ª—É–∂–±—É",  # –î–µ–π—Å—Ç–≤–∏–µ
                str(hiring_time.strftime('%d.%m.%Y')),  # –î–∞—Ç–∞ –î–µ–π—Å—Ç–≤–∏—è
                "–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è",  # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                "",  # –î–æ–ª–∂–Ω–æ—Å—Ç—å (–ø—É—Å—Ç–æ–µ)
                "–†—è–¥–æ–≤–æ–π",  # –ó–≤–∞–Ω–∏–µ
                str(discord_id),  # Discord ID –±–æ–π—Ü–∞
                str(recruitment_type).capitalize(),  # –ü–æ—Ä—è–¥–æ–∫ –Ω–∞–±–æ—Ä–∞ (–≠–∫—Å–∫—É—Ä—Å–∏—è/–ü—Ä–∏–∑—ã–≤)
                str(approved_by_info),  # –ö–∞–¥—Ä–æ–≤—É—é –æ—Ç–ø–∏—Å–∞–ª
                ""  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ Discord (–ø—É—Å—Ç–æ–µ)
            ]
            
            # Insert record at the beginning (after headers)
            result = self.worksheet.insert_row(row_data, index=2)
            
            # Check if insert was successful
            if result:
                print(f"‚úÖ Successfully added hiring record for {name_from_form} (–†—è–¥–æ–≤–æ–π)")
                return True
            else:
                print(f"‚ùå Failed to add hiring record for {name_from_form}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error adding hiring record to Google Sheets: {e}")
            # Print more detailed error information
            if hasattr(e, 'response'):
                print(f"Response status: {e.response.status_code}")
                print(f"Response text: {e.response.text}")
            return False
    
    
    async def register_moderator(self, moderator_data, discord_user):
        """
        Register a new moderator in the '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet.
        
        Args:
            moderator_data: Dict containing moderator information
                - email: Moderator's email address
                - name: Moderator's full name (–ò–º—è –§–∞–º–∏–ª–∏—è)
                - static: Moderator's static number (formatted)
                - position: Moderator's position/rank
            discord_user: Discord user object for access management
            
        Returns:
            bool: True if registration successful, False otherwise
        """
        try:
            # Extract data from moderator_data dict
            email = moderator_data['email']
            name = moderator_data['name']
            static = moderator_data['static']
            position = moderator_data['position']
            # Ensure connection
            if not self._ensure_connection():
                print("Failed to establish Google Sheets connection for moderator registration")
                return False
            
            # Get the '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' worksheet
            users_worksheet = None
            for worksheet in self.spreadsheet.worksheets():
                if worksheet.title == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
                    users_worksheet = worksheet
                    break
            
            if not users_worksheet:
                print("'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet not found")
                return False
            # Check if moderator already exists (by Discord ID, email, or name+static)
            try:
                # Use get_all_values instead of get_all_records to avoid header issues
                all_values = users_worksheet.get_all_values()
                
                # Skip header row and check existing data
                for row in all_values[1:]:  # Skip first row (headers)
                    if len(row) > 0:
                        # Check by Discord ID (column F, index 5) - primary check
                        if len(row) > 5 and row[5].strip() == str(discord_user.id):
                            print(f"Moderator with Discord ID {discord_user.id} already exists")
                            return True  # Already registered, consider it success
                        
                        # Check by email (column A, index 0)
                        if len(row) > 0 and row[0].strip().lower() == email.lower():
                            print(f"Moderator with email {email} already exists")
                            return True  # Already registered, consider it success
                        
                        # Check by name + static combination (columns B and C, indices 1 and 2)
                        if len(row) > 2:
                            existing_name = row[1].strip() if len(row) > 1 else ""
                            existing_static = row[2].strip() if len(row) > 2 else ""
                            if existing_name == name and existing_static == static:
                                print(f"Moderator {name} | {static} already exists")
                                return True  # Already registered, consider it success
            except Exception as e:
                print(f"Warning: Could not check existing moderators: {e}")
                # Continue with registration anyway
                # # Format registration date
            registration_date = datetime.now().strftime('%d.%m.%Y %H:%M')
              # Prepare row data for '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' sheet (columns A-F):
            # Column A: Email
            # Column B: –ò–º—è –§–∞–º–∏–ª–∏—è  
            # Column C: –°—Ç–∞—Ç–∏–∫
            # Column D: –î–æ–ª–∂–Ω–æ—Å—Ç—å
            # Column E: –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            # Column F: Discord ID
            # Note: Column J with "–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫" is auto-generated by table formula
            row_data = [
                email,              # Column A: Email
                name,               # Column B: –ò–º—è –§–∞–º–∏–ª–∏—è
                static,             # Column C: –°—Ç–∞—Ç–∏–∫
                position,           # Column D: –î–æ–ª–∂–Ω–æ—Å—Ç—å
                registration_date,  # Column E: –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                str(discord_user.id)  # Column F: Discord ID
            ]# Find the next empty row safely (avoiding formula conflicts)
            all_data = users_worksheet.get_all_values()
              # Find the last row with actual data in columns A-F
            last_data_row = 0
            for i, row in enumerate(all_data):
                if any(cell.strip() for cell in row[:6] if cell):  # Check if first 6 columns have data
                    last_data_row = i + 1
            
            # Add new data after the last data row (not at the very end to avoid formula conflicts)
            next_row = last_data_row + 1
            
            # Safety check: ensure we don't overwrite existing data
            while next_row <= len(all_data):
                if next_row > len(all_data) or not any(cell.strip() for cell in all_data[next_row-1][:6] if cell):
                    break
                next_row += 1
            
            # Use batch update with exact range to avoid formula interference
            range_name = f"A{next_row}:F{next_row}"
            print(f"üìù Registering moderator in range {range_name}")
            
            # Use batch update instead of single cell updates
            result = users_worksheet.update(
                values=[row_data], 
                range_name=range_name,
                value_input_option='RAW'  # Use RAW to prevent formula interpretation
            )            # Check if append was successful
            if result:
                print(f"‚úÖ Successfully registered moderator: {name} | {static} ({email}) [Discord ID: {discord_user.id}]")
                # Automatically add moderator as editor to spreadsheet
                print(f"üîë Attempting to add editor access to spreadsheet...")
                
                # First check if they already have access
                has_access = await self.check_editor_access(email)
                if has_access:
                    print(f"üìã {email} already has access to spreadsheet")
                else:
                    # Try to add editor access
                    access_granted = await self.add_editor_to_spreadsheet(email)
                    if access_granted:
                        print(f"‚úÖ Successfully granted spreadsheet access to {email}")
                    else:
                        print(f"‚ö†Ô∏è  Could not automatically grant spreadsheet access to {email}")
                
                return True
            else:
                print(f"‚ùå Failed to register moderator: {name} | {static}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error registering moderator in Google Sheets: {e}")
            # Print more detailed error information
            if hasattr(e, 'response'):
                print(f"Response status: {e.response.status_code}")
                print(f"Response text: {e.response.text}")
            return False
    async def add_editor_to_spreadsheet(self, email):
        """
        Add a new editor to the Google Spreadsheet.
        
        Args:
            email: Email address of the user to add as editor
            
        Returns:
            bool: True if access granted successfully, False otherwise
        """
        try:
            # Ensure connection
            if not self._ensure_connection():
                print("Failed to establish Google Sheets connection for adding editor")
                return False
            
            print(f"üìß Adding editor access for: {email}")
            
            # Share the spreadsheet with the email address
            # 'writer' role gives edit access to the spreadsheet
            self.spreadsheet.share(
                email, 
                perm_type='user', 
                role='writer',
                notify=True,  # Send notification email
                email_message=f"–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–¥—Ä–æ–≤–æ–º—É –∞—É–¥–∏—Ç—É –í–° –†–§. –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É."
            )
            
            print(f"‚úÖ Successfully added {email} as editor to spreadsheet")
            return True
            
        except Exception as e:
            print(f"‚ùå Error adding editor to spreadsheet: {e}")
            # Check if error is due to invalid email or permission issues
            if "Invalid email" in str(e).lower():
                print(f"   Invalid email address: {email}")
            elif "permission" in str(e).lower():
                print(f"   Permission denied - check service account rights")
            else:
                print(f"   Unexpected error: {type(e).__name__}: {e}")
            
            return False
    
    async def check_editor_access(self, email):
        """
        Check if an email already has editor access to the spreadsheet.
        
        Args:
            email: Email address to check
            
        Returns:
            bool: True if user already has access, False otherwise
        """
        try:
            # Get list of permissions for the spreadsheet
            permissions = self.spreadsheet.list_permissions()
            
            # Check if email already has access
            for permission in permissions:
                if permission.get('emailAddress', '').lower() == email.lower():
                    role = permission.get('role', '')
                    print(f"üìã {email} already has {role} access")
                    return True
            return False
            
        except Exception as e:
            print(f"‚ùå Error checking editor access: {e}")
            return False
    

# Global instance
sheets_manager = GoogleSheetsManager()
