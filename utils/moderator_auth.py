import discord
from forms.moderator_auth_form import ModeratorAuthModal

class ModeratorAuthHandler:
    """Handler for moderator authorization and manual data input."""
    
    @staticmethod
    async def send_authorization_warning(interaction: discord.Interaction):
        """Send an ephemeral warning message about authorization requirement."""
        warning_embed = discord.Embed(
            title="‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            description=(
                "–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∞—É–¥–∏—Ç–µ "
                "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            ),
            color=0xffa500  # Orange color
        )
        
        warning_embed.add_field(
            name="üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
            value=(
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –ª–∏—Å—Ç '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'\n"
                "‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            ),
            inline=False
        )
        
        warning_embed.add_field(
            name="üí° –°–µ–π—á–∞—Å",
            value="–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∞—É–¥–∏—Ç –±—É–¥—É—Ç –∑–∞–ø—Ä–æ—à–µ–Ω—ã –≤—Ä—É—á–Ω—É—é",
            inline=False
        )
        
        warning_embed.set_footer(
            text="–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º",
            icon_url="https://i.imgur.com/07MRSyl.png"
        )
        
        try:
            await interaction.followup.send(embed=warning_embed, ephemeral=True)
        except:
            # If followup fails, try regular send
            try:
                await interaction.response.send_message(embed=warning_embed, ephemeral=True)
            except:
                print("Failed to send authorization warning message")
    
    @staticmethod
    async def request_moderator_data(interaction: discord.Interaction, callback_func, *args, **kwargs):
        """
        Show modal to request moderator data manually.
        
        Args:
            interaction: Discord interaction
            callback_func: Function to call with the result data
            *args, **kwargs: Additional arguments to pass to callback
        """
        try:
            modal = ModeratorAuthModal(callback_func, *args, **kwargs)
            await interaction.response.send_modal(modal)
        except Exception as e:
            print(f"Error showing moderator auth modal: {e}")
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )
    
    @staticmethod
    def format_moderator_info(name: str, static: str) -> str:
        """Format moderator info to standard '–ò–º—è –§–∞–º–∏–ª–∏—è | –°—Ç–∞—Ç–∏–∫' format."""
        return f"{name.strip()} | {static.strip()}"
    
    @staticmethod
    async def handle_moderator_auth_flow(sheets_manager, approving_user, success_callback, *args, **kwargs):
        """
        Complete flow for handling moderator authorization.
        
        Args:
            sheets_manager: GoogleSheetsManager instance
            approving_user: Discord user object
            success_callback: Function to call when authorization is complete
            *args, **kwargs: Additional arguments for callback
            
        Returns:
            dict with authorization result or None if manual input needed
        """
        try:
            # Check if moderator is authorized
            auth_result = await sheets_manager.check_moderator_authorization(approving_user)
            
            if auth_result["found"]:
                # Moderator found in system, return their info
                return {
                    "status": "found",
                    "info": auth_result["info"],
                    "manual_input": False
                }
            else:
                # Moderator not found, will need manual input
                return {
                    "status": "not_found", 
                    "info": auth_result["clean_name"],
                    "manual_input": True,
                    "callback": success_callback,
                    "callback_args": args,
                    "callback_kwargs": kwargs
                }
                
        except Exception as e:
            print(f"Error in handle_moderator_auth_flow: {e}")
            return {
                "status": "error",
                "info": approving_user.display_name,
                "manual_input": True,
                "callback": success_callback,
                "callback_args": args,
                "callback_kwargs": kwargs
            }
