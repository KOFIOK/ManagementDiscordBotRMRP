"""
üè∑Ô∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ò–ö–ù–ï–ô–ú–ê–ú–ò
========================================

–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç:
‚Ä¢ –ü—Ä–∏—ë–º–∞ –Ω–∞ —Å–ª—É–∂–±—É
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏—è –≤ –∑–≤–∞–Ω–∏–∏
‚Ä¢ –£–≤–æ–ª—å–Ω–µ–Ω–∏—è

–§–û–†–ú–ê–¢–´ –ù–ò–ö–ù–ï–ô–ú–û–í:
‚Ä¢ –ü—Ä–∏ –ø—Ä–∏—ë–º–µ: "–í–ê | –ê–ë–ë–†_—Ä–∞–Ω–≥–∞ | –ò–º—è –§–∞–º–∏–ª–∏—è"
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: "–ê–ë–ë–†_–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è | –ê–ë–ë–†_—Ä–∞–Ω–≥–∞ | –ò–º—è –§–∞–º–∏–ª–∏—è"
‚Ä¢ –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏: –æ–±–Ω–æ–≤–ª—è–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É —Ä–∞–Ω–≥–∞
‚Ä¢ –ü—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏: "–£–≤–æ–ª–µ–Ω | –ò–º—è –§–∞–º–∏–ª–∏—è"

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã —Ç–∏–ø–∞ "[–ù–∞—á. –®—Ç–∞–±–∞] –ê.–¢–∏–º–æ–Ω–æ–≤"
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

import re
import logging
from typing import Optional, Tuple, Dict, Any
from utils.database_manager.subdivision_mapper import SubdivisionMapper  
from utils.database_manager.rank_manager import rank_manager
from utils.database_manager import personnel_manager
from utils.config_manager import load_config

logger = logging.getLogger(__name__)

class NicknameManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞–º–∏"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –≤ Discord
    MAX_NICKNAME_LENGTH = 32

    def __init__(self):
        self.subdivision_mapper = SubdivisionMapper()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = load_config()
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞–Ω–≥–æ–≤ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        self.known_ranks = {
            '–†—è–¥–æ–≤–æ–π', '–ï—Ñ—Ä–µ–π—Ç–æ—Ä', '–ú–ª. –°–µ—Ä–∂–∞–Ω—Ç', '–°–µ—Ä–∂–∞–Ω—Ç', '–°—Ç. –°–µ—Ä–∂–∞–Ω—Ç', 
            '–°—Ç–∞—Ä—à–∏–Ω–∞', '–ü—Ä–∞–ø–æ—Ä—â–∏–∫', '–°—Ç. –ü—Ä–∞–ø–æ—Ä—â–∏–∫', '–ú–ª. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç',
            '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–°—Ç. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç', '–ö–∞–ø–∏—Ç–∞–Ω', '–ú–∞–π–æ—Ä', '–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫', '–ü–æ–ª–∫–æ–≤–Ω–∏–∫',
            # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
            '–ï—Ñ—Ä-—Ä', '–ú–ª. –°-—Ç', '–°-—Ç', '–°—Ç. –°-—Ç', '–°—Ç-–Ω–∞', '–°—Ç. –ü—Ä–∞–ø-–∫', '–ú–ª. –õ-—Ç', '–°—Ç. –õ-—Ç', '–ü–æ–¥–ø–æ–ª–∫-–∫'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self._init_patterns()
        
    def _init_patterns(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        custom_templates = self.config.get('nickname_auto_replacement', {}).get('custom_templates', {})
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏)
        base_patterns = {
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–¥–≥—Ä—É–ø–ø–∞–º–∏: "–†–û–∏–û[–ü–ì] | –°—Ç. –õ-—Ç | –í–∏–∫—Ç–æ—Ä –í–µ—Ä–ø–æ–≤"
            'standard_with_subgroup': r'^([–ê-–Ø–ÅA-Z–∞-—è—ë]{1,15})\[([–ê-–Ø–ÅA-Z–∞-—è—ë]{1,10})\]\s*\|\s*([–ê-–Ø–Å–∞-—è—ëA-Za-z\-\.\s]+?)\s*\|\s*(.+)$',
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: "–ü–û–î–† | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è" –∏–ª–∏ "–ü–û–î–† | –ò–º—è –§–∞–º–∏–ª–∏—è"
            'standard': r'^([–ê-–Ø–ÅA-Z–∞-—è—ë]{1,15}(?:\[\d+\])?)\s*\|\s*([–ê-–Ø–Å–∞-—è—ëA-Za-z\-\.\s]+?)\s*(?:\|\s*(.+))?$',
            
            # –°–ª–æ–∂–Ω—ã–π –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç: "!![–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è" –∏–ª–∏ "![–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è"
            'complex_special': r'^!{1,2}\[([^\]]+)\]\s*(.+)$',
            
            # –î–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: "[–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò.–§–∞–º–∏–ª–∏—è"
            'position': r'^\[([^\]]+)\]\s*([–ê-–ØA-Z]\.?\s*[–ê-–Ø–∞-—èA-Za-z]+)$',
            
            # –ü—Ä–æ—Å—Ç–æ–π –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç: "! –ò–º—è –§–∞–º–∏–ª–∏—è"
            'simple_special': r'^!\s+(.+)$',
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è" –∏–ª–∏ "–ò.–§–∞–º–∏–ª–∏—è"
            'simple': r'^([–ê-–ØA-Z]\.?\s*[–ê-–Ø–∞-—èA-Za-z]+\s*[–ê-–Ø–∞-—èA-Za-z]+)$',
            
            # –£–≤–æ–ª–µ–Ω–Ω—ã–π: "–£–≤–æ–ª–µ–Ω | –ò–º—è –§–∞–º–∏–ª–∏—è"
            'dismissed': r'^–£–≤–æ–ª–µ–Ω\s*\|\s*(.+)$'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for template_id, custom_settings in custom_templates.items():
            if template_id in base_patterns:
                pattern = self._build_custom_pattern(template_id, custom_settings, base_patterns[template_id])
                base_patterns[template_id] = pattern
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.PATTERNS = {name: re.compile(pattern) for name, pattern in base_patterns.items()}
        
    def _build_custom_pattern(self, template_id: str, custom_settings: dict, base_pattern: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        separator_raw = custom_settings.get('separator', '|')
        name_chars = custom_settings.get('name_chars', '–ê-–Ø–Å–∞-—è—ëA-Za-z\\-\\.\\s')
        subdivision_chars = custom_settings.get('subdivision_chars', '–ê-–Ø–ÅA-Z–∞-—è—ë\\d')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        separator = f" {separator_raw.strip()} "
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è—Ö
        separator_escaped = re.escape(separator).replace(' ', '\\s*')
        
        if template_id == 'standard':
            # –ü–∞—Ç—Ç–µ—Ä–Ω: –ü–û–î–† | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è (–µ–¥–∏–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            return f'^([{subdivision_chars}]{{1,15}}(?:\\[\\d+\\])?){separator_escaped}([{name_chars}]+?){separator_escaped}(?:(.+))?$'
            
        elif template_id == 'standard_with_subgroup':
            # –ü–∞—Ç—Ç–µ—Ä–Ω: –ü–û–î–†[–ü–ì] | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è (–µ–¥–∏–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            subgroup_brackets = custom_settings.get('subgroup_brackets', '[ ]')
            if len(subgroup_brackets) >= 2:
                open_br = re.escape(subgroup_brackets[0])
                close_br = re.escape(subgroup_brackets[-1])
            else:
                open_br, close_br = '\\[', '\\]'
                
            return f'^([{subdivision_chars}]{{1,15}}){open_br}([{subdivision_chars}]{{1,10}}){close_br}{separator_escaped}([{name_chars}]+?){separator_escaped}(.+)$'
            
        elif template_id == 'positional':
            # –ü–∞—Ç—Ç–µ—Ä–Ω: –ü–û–î–† | –î–û–õ–ñ–ù–û–°–¢–¨ | –ò–º—è –§–∞–º–∏–ª–∏—è (–µ–¥–∏–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
            return f'^([{subdivision_chars}]{{1,15}}){separator_escaped}([{name_chars}]+?){separator_escaped}(.+)$'
            
        elif template_id == 'simple':
            # –ü–∞—Ç—Ç–µ—Ä–Ω: –ò–º—è –§–∞–º–∏–ª–∏—è
            return f'^([{name_chars}]+)$'
            
        elif template_id == 'dismissed':
            # –ü–∞—Ç—Ç–µ—Ä–Ω: –£–≤–æ–ª–µ–Ω | –ò–º—è –§–∞–º–∏–ª–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã)
            status_text = custom_settings.get('status_text', '–£–≤–æ–ª–µ–Ω')
            return f'^{re.escape(status_text)}{separator_escaped}(.+)$'
        
        # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        return base_pattern
    
    def _is_rank(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∑–≤–∞–Ω–∏–µ–º"""
        return text in self.known_ranks
    
    def _is_position(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            config = load_config()
            nickname_settings = config.get('nickname_auto_replacement', {})
            custom_positions = nickname_settings.get('known_positions', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏
            if text in custom_positions:
                return True
        except Exception:
            pass
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
        position_keywords = ['–ù–∞—á.', '–ó–∞–º.', '–ö–æ–º.', '–ø–æ', '–û—Ç–¥–µ–ª–∞', '–ë—Ä–∏–≥', '–ö–†', '–®—Ç–∞–±–∞']
        return any(keyword in text for keyword in position_keywords)
    
    # ================================================================
    # üîß –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ê–í–¢–û–ó–ê–ú–ï–ù–´
    # ================================================================
    
    def _is_nickname_replacement_enabled_globally(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ"""
        try:
            config = load_config()
            nickname_settings = config.get('nickname_auto_replacement', {})
            return nickname_settings.get('enabled', True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    
    def _is_nickname_replacement_enabled_for_department(self, subdivision_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        try:
            config = load_config()
            nickname_settings = config.get('nickname_auto_replacement', {})
            department_settings = nickname_settings.get('departments', {})
            return department_settings.get(subdivision_key, True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {subdivision_key}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    
    def _is_nickname_replacement_enabled_for_module(self, module_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
        try:
            config = load_config()
            nickname_settings = config.get('nickname_auto_replacement', {})
            module_settings = nickname_settings.get('modules', {})
            return module_settings.get(module_name, True)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –¥–ª—è –º–æ–¥—É–ª—è {module_name}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–±–æ—Ç–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    
    def _should_update_nickname(self, operation: str, current_department: str = None, target_department: str = None) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∏–∫–Ω–µ–π–º —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        
        Args:
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ('hiring', 'transfer', 'promotion', 'dismissal')
            current_department: –¢–µ–∫—É—â–µ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_department: –¶–µ–ª–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (–¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
        
        Returns:
            True –µ—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º —Å–ª–µ–¥—É–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å, False –∏–Ω–∞—á–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not self._is_nickname_replacement_enabled_globally():
            logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
        if not self._is_nickname_replacement_enabled_for_module(operation):
            logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –º–æ–¥—É–ª—è {operation}")
            return False
        
        # –û—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if operation == 'dismissal':
            # –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ –í–°–ï–ì–î–ê –º–µ–Ω—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            return True
        
        elif operation == 'transfer':
            # –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            if current_department and not self._is_nickname_replacement_enabled_for_department(current_department):
                # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥—Ä—É–≥–æ–µ - –º–µ–Ω—è–µ–º
                logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –ò–ó –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {current_department} —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º")
                return True
            
            if target_department and not self._is_nickname_replacement_enabled_for_department(target_department):
                # –ï—Å–ª–∏ –≤ —Ü–µ–ª–µ–≤–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç—É–¥–∞ - –º–µ–Ω—è–µ–º
                logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –í –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ {target_department} —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π - –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º")
                return True
            
            return True  # –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ–≥–¥–∞ –º–µ–Ω—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º
        
        elif operation in ['promotion', 'hiring', 'name_change']:
            # –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è/–ø—Ä–∏—ë–º–∞/–∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ/—Ü–µ–ª–µ–≤–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            department_to_check = target_department or current_department
            if department_to_check and not self._is_nickname_replacement_enabled_for_department(department_to_check):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {department_to_check} –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation}")
                return False
            return True
        
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
    
    # ================================================================
    # üîç –ê–ù–ê–õ–ò–ó –ò –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ù–ò–ö–ù–ï–ô–ú–ê
    # ================================================================
    
    def parse_nickname(self, nickname: str) -> Dict[str, Optional[str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∏–∫–Ω–µ–π–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: subdivision, rank, position, name, format_type, is_special, subgroup
        """
        if not nickname:
            return {'subdivision': None, 'rank': None, 'position': None, 'name': None, 'format_type': 'empty', 'is_special': False, 'subgroup': None}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω—ã–π –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤—ã–º
        match = self.PATTERNS['complex_special'].match(nickname)
        if match:
            return {
                'subdivision': None,
                'rank': None,
                'position': None,
                'name': match.group(2).strip(),
                'format_type': 'complex_special',
                'is_special': True,
                'subgroup': None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç
        match = self.PATTERNS['simple_special'].match(nickname)
        if match:
            return {
                'subdivision': None,
                'rank': None,
                'position': None,
                'name': match.group(1).strip(),
                'format_type': 'simple_special',
                'is_special': True,
                'subgroup': None
            }
        
        # –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–¥–≥—Ä—É–ø–ø–æ–π: "–†–û–∏–û[–ü–ì] | –°—Ç. –õ-—Ç | –í–∏–∫—Ç–æ—Ä –í–µ—Ä–ø–æ–≤"
        match = self.PATTERNS['standard_with_subgroup'].match(nickname)
        if match:
            subdivision = match.group(1).strip()
            subgroup = match.group(2).strip()
            middle_part = match.group(3).strip()
            name_part = match.group(4).strip()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            if self._is_rank(middle_part):
                return {
                    'subdivision': subdivision,
                    'subgroup': subgroup,
                    'rank': middle_part,
                    'position': None,
                    'name': name_part,
                    'format_type': 'standard_with_subgroup',
                    'is_special': False
                }
            elif self._is_position(middle_part):
                return {
                    'subdivision': subdivision,
                    'subgroup': subgroup,
                    'rank': None,
                    'position': middle_part,
                    'name': name_part,
                    'format_type': 'positional_with_subgroup',
                    'is_special': True  # –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                }
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, —Å—á–∏—Ç–∞–µ–º —Ä–∞–Ω–≥–æ–º
                return {
                    'subdivision': subdivision,
                    'subgroup': subgroup,
                    'rank': middle_part,
                    'position': None,
                    'name': name_part,
                    'format_type': 'standard_with_subgroup',
                    'is_special': False
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        match = self.PATTERNS['standard'].match(nickname)
        if match:
            subdivision = match.group(1).strip()
            middle_part = match.group(2).strip()
            name_part = match.group(3) if match.group(3) else None
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞ (name_part)
            if name_part:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ middle_part —Ä–∞–Ω–≥–æ–º –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é
                if self._is_rank(middle_part):
                    return {
                        'subdivision': subdivision,
                        'rank': middle_part,
                        'position': None,
                        'name': name_part.strip(),
                        'format_type': 'standard',
                        'is_special': False,
                        'subgroup': None
                    }
                elif self._is_position(middle_part):
                    return {
                        'subdivision': subdivision,
                        'rank': None,
                        'position': middle_part,  # –î–æ–ª–∂–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –∑–≤–∞–Ω–∏—è
                        'name': name_part.strip(),
                        'format_type': 'positional',
                        'is_special': True,  # –î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã –æ—Å–æ–±—ã–µ - –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏
                        'subgroup': None
                    }
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø, —Å—á–∏—Ç–∞–µ–º —Ä–∞–Ω–≥–æ–º
                    return {
                        'subdivision': subdivision,
                        'rank': middle_part,
                        'position': None,
                        'name': name_part.strip(),
                        'format_type': 'standard',
                        'is_special': False,
                        'subgroup': None
                    }
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ—Ç—å–µ–π –≥—Ä—É–ø–ø—ã, —Ç–æ middle_part - —ç—Ç–æ –∏–º—è (—Ñ–æ—Ä–º–∞—Ç "–ü–û–î–† | –ò–º—è")
                return {
                    'subdivision': subdivision,
                    'rank': None,
                    'position': None,
                    'name': middle_part,
                    'format_type': 'standard',
                    'is_special': False,
                    'subgroup': None
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç
        match = self.PATTERNS['position'].match(nickname)
        if match:
            return {
                'subdivision': None,
                'rank': None,
                'position': None,
                'name': match.group(2).strip(),
                'format_type': 'position',
                'is_special': True,  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –Ω–∏–∫–Ω–µ–π–º—ã
                'subgroup': None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
        match = self.PATTERNS['dismissed'].match(nickname)
        if match:
            return {
                'subdivision': '–£–≤–æ–ª–µ–Ω',
                'rank': None,
                'position': None,
                'name': match.group(1).strip(),
                'format_type': 'dismissed',
                'is_special': False,
                'subgroup': None
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
        match = self.PATTERNS['simple'].match(nickname)
        if match:
            return {
                'subdivision': None,
                'rank': None,
                'position': None,
                'name': match.group(1).strip(),
                'format_type': 'simple',
                'is_special': False,
                'subgroup': None
            }
        
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return {
            'subdivision': None,
            'rank': None,
            'position': None,
            'name': nickname.strip(),
            'format_type': 'unknown',
            'is_special': True,  # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            'subgroup': None
        }
    
    def extract_name_parts(self, full_name: str) -> Tuple[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        
        Returns:
            Tuple (first_name, last_name)
        """
        if not full_name:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
        cleaned_name = full_name.strip()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã ! –∏ ![ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if cleaned_name.startswith('!'):
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ ! –≤ –Ω–∞—á–∞–ª–µ
            cleaned_name = re.sub(r'^!+', '', cleaned_name).strip()
            # –£–¥–∞–ª—è–µ–º [–¥–æ–ª–∂–Ω–æ—Å—Ç—å] –µ—Å–ª–∏ –µ—Å—Ç—å
            cleaned_name = re.sub(r'^\[[^\]]+\]\s*', '', cleaned_name).strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º
        parts = [part.strip() for part in cleaned_name.split() if part.strip()]
        
        if len(parts) == 1:
            # –ï—Å–ª–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–æ—Ä–º–∞—Ç "–ò.–§–∞–º–∏–ª–∏—è"
            if '.' in parts[0] and len(parts[0]) > 2:
                # "–ò.–§–∞–º–∏–ª–∏—è" -> –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
                name_part = parts[0]
                if name_part[1:2] == '.':
                    return name_part[0], name_part[2:].strip()
                else:
                    return parts[0], ""
            else:
                # –û–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ —Ç–æ—á–∫–∏ - —Å—á–∏—Ç–∞–µ–º —Ñ–∞–º–∏–ª–∏–µ–π
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", parts[0]
        
        elif len(parts) == 2:
            # –î–≤–∞ —Å–ª–æ–≤–∞ - –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
            first_name = parts[0]
            last_name = parts[1]
            
            # –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å —Ç–æ—á–∫–æ–π, —ç—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è
            if first_name.endswith('.'):
                first_name = first_name[:-1]
            
            return first_name, last_name
        
        else:
            # –ë–æ–ª–µ–µ –¥–≤—É—Ö —Å–ª–æ–≤ - –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ –∏–º—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ —Ñ–∞–º–∏–ª–∏—é
            first_name = parts[0]
            last_name = ' '.join(parts[1:])
            
            if first_name.endswith('.'):
                first_name = first_name[:-1]
            
            return first_name, last_name
    
    # ================================================================
    # üèóÔ∏è –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ù–ò–ö–ù–ï–ô–ú–û–í
    # ================================================================
    
    def format_name_for_nickname(self, first_name: str, last_name: str, max_length: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
        
        Args:
            first_name: –ò–º—è
            last_name: –§–∞–º–∏–ª–∏—è
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
        """
        # –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        first_name = first_name.strip() if first_name else ""
        last_name = last_name.strip() if last_name else ""
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏
        if not first_name and not last_name:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if not first_name:
            return last_name[:max_length] if last_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if not last_name:
            return first_name[:max_length] if first_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        full_name = f"{first_name} {last_name}"
        if len(full_name) <= max_length:
            return full_name
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ + —Ç–æ—á–∫–∞)
        short_first = f"{first_name[0]}."
        short_name = f"{short_first} {last_name}"
        if len(short_name) <= max_length:
            return short_name
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
        available_for_lastname = max_length - len(short_first) - 1  # -1 –¥–ª—è –ø—Ä–æ–±–µ–ª–∞
        if available_for_lastname > 0:
            truncated_lastname = last_name[:available_for_lastname]
            return f"{short_first} {truncated_lastname}"
        
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è
        return short_first[:max_length] if len(short_first) <= max_length else first_name[0]
    
    def build_service_nickname(self, subdivision_abbr: str, rank_abbr: str, 
                              first_name: str, last_name: str) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —Å–ª—É–∂–∞—â–µ–≥–æ
        
        Format: "–ü–û–î–† | –†–ê–ù–ì | –ò–º—è –§–∞–º–∏–ª–∏—è" –∏–ª–∏ "–ü–û–î–† | –ò–º—è –§–∞–º–∏–ª–∏—è" (–µ—Å–ª–∏ –Ω–µ—Ç –∑–≤–∞–Ω–∏—è)
        """
        # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valid_subdivision = subdivision_abbr if subdivision_abbr and subdivision_abbr.strip() and subdivision_abbr != "None" else None
        valid_rank = rank_abbr if rank_abbr and rank_abbr.strip() and rank_abbr != "None" else None
        
        # –°—Ç—Ä–æ–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∏–∫–Ω–µ–π–º–∞
        components = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if valid_subdivision:
            components.append(valid_subdivision)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if valid_rank:
            components.append(valid_rank)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if components:
            prefix = " | ".join(components) + " | "
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –Ω–∏ –∑–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –∏–º—è
            prefix = ""
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –∏–º–µ–Ω–∏
        available_length = self.MAX_NICKNAME_LENGTH - len(prefix)
        
        if available_length <= 0 and prefix:
            # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —É–ø—Ä–æ—â–∞–µ–º –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            logger.warning(f"–ü—Ä–µ—Ñ–∏–∫—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {prefix}")
            short_components = []
            if valid_subdivision:
                short_components.append(valid_subdivision)
            if valid_rank:
                short_components.append(valid_rank)
            short_prefix = "|".join(short_components) + "|"
            available_length = self.MAX_NICKNAME_LENGTH - len(short_prefix)
            formatted_name = self.format_name_for_nickname(first_name, last_name, available_length)
            return f"{short_prefix}{formatted_name}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è
        formatted_name = self.format_name_for_nickname(first_name, last_name, available_length)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if prefix:
            result = f"{prefix}{formatted_name}"
        else:
            result = formatted_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –¥–ª–∏–Ω—É
        if len(result) > self.MAX_NICKNAME_LENGTH:
            result = result[:self.MAX_NICKNAME_LENGTH]
        
        return result
    
    def build_dismissed_nickname(self, first_name: str, last_name: str) -> str:
        """
        –°—Ç—Ä–æ–∏—Ç –Ω–∏–∫–Ω–µ–π–º –¥–ª—è —É–≤–æ–ª–µ–Ω–Ω–æ–≥–æ —Å —É—á–µ—Ç–æ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        
        Format: "{status_text} {separator} –ò–º—è –§–∞–º–∏–ª–∏—è"
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        custom_templates = self.config.get('nickname_auto_replacement', {}).get('custom_templates', {})
        dismissed_settings = custom_templates.get('dismissed', {})
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        status_text = dismissed_settings.get('status_text', '–£–≤–æ–ª–µ–Ω')
        separator = dismissed_settings.get('separator', '|')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        separator_with_spaces = f" {separator.strip()} "
        
        prefix = f"{status_text}{separator_with_spaces}"
        available_length = self.MAX_NICKNAME_LENGTH - len(prefix)
        
        formatted_name = self.format_name_for_nickname(first_name, last_name, available_length)
        result = f"{prefix}{formatted_name}"
        
        if len(result) > self.MAX_NICKNAME_LENGTH:
            result = result[:self.MAX_NICKNAME_LENGTH]
        
        return result
    
    # ================================================================
    # üéØ –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
    # ================================================================
    
    async def handle_hiring(self, member: Any, rank_name: str, 
                           first_name: str, last_name: str, static: str = None) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –Ω–∞ —Å–ª—É–∂–±—É
        
        Args:
            member: –£—á–∞—Å—Ç–Ω–∏–∫ Discord
            rank_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è
            first_name: –ò–º—è (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
            last_name: –§–∞–º–∏–ª–∏—è (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
            static: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î)
            
        Returns:
            –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
            if not self._should_update_nickname('hiring', target_department='–í–ê'):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–∏—ë–º–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {member}")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–∏—ë–º–µ
            if static:
                success, message = personnel_manager.add_personnel(
                    member.id, first_name, last_name, static
                )
                if not success:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –≤ –ë–î: {message}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∑–≤–∞–Ω–∏—è
            rank_data = rank_manager.get_rank_by_name(rank_name)
            if not rank_data or not rank_data.get('abbreviation'):
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–≤–∞–Ω–∏—è: {rank_name}")
                rank_abbr = ""  # –ü—É—Å—Ç–∞—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
            else:
                rank_abbr = rank_data['abbreviation']
            
            # –ü—Ä–∏ –ø—Ä–∏—ë–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–í–ê" (–í–æ–µ–Ω–Ω–∞—è –ê–∫–∞–¥–µ–º–∏—è)
            new_nickname = self.build_service_nickname("–í–ê", rank_abbr, first_name, last_name)
            
            await member.edit(nick=new_nickname, reason="–ü—Ä–∏—ë–º –Ω–∞ —Å–ª—É–∂–±—É")
            logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø—Ä–∏—ë–º–µ: {member} -> {new_nickname}")
            
            return new_nickname
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ {member}: {e}")
            if 'new_nickname' in locals():
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
            return None
    
    async def handle_transfer(self, member: Any, subdivision_key: str, 
                             rank_name: str) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        
        Args:
            member: –£—á–∞—Å—Ç–Ω–∏–∫ Discord
            subdivision_key: –ö–ª—é—á –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ config.json
            rank_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è
            
        Returns:
            –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        new_nickname = None
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            current_nickname = member.display_name
            parsed = self.parse_nickname(current_nickname)
            current_department = parsed.get('subdivision', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
            if not self._should_update_nickname('transfer', current_department, subdivision_key):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ {current_department} –≤ {subdivision_key}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {member}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è –∑–≤–∞–Ω–∏–µ –∏–∑ employees)
            from utils.database_manager import PersonnelManager
            pm = PersonnelManager()
            personnel_data = await pm.get_personnel_summary(member.id)
            if not personnel_data:
                logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id}")
                # Fallback - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
                parsed = self.parse_nickname(member.display_name)
                if parsed.get('name'):
                    first_name, last_name = self.extract_name_parts(parsed['name'])
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id}")
                    return None
            else:
                first_name = personnel_data['first_name']
                last_name = personnel_data['last_name']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            subdivision_data = await self.subdivision_mapper.get_subdivision_full_data(subdivision_key)
            if not subdivision_data or not subdivision_data.get('abbreviation'):
                logger.warning(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã: {subdivision_key}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞–∫ fallback –µ—Å–ª–∏ –Ω–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã
                subdivision_abbr = subdivision_key.upper() if subdivision_key else "–í–ê"
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ë–î
                subdivision_abbr = subdivision_data['abbreviation']
            
            # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π –Ω–∏–∫–Ω–µ–π–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            if parsed.get('format_type') == 'standard_position' and parsed.get('position'):
                # –î–ª—è –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤ –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
                new_nickname = f"{subdivision_abbr} | {parsed['position']} | {first_name} {last_name}"
                reason = f"–ü–µ—Ä–µ–≤–æ–¥ –≤ {subdivision_data.get('name', subdivision_key)} (–¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)"
            else:
                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ä–∞–Ω–≥–æ–º
                # –ü–æ–ª—É—á–∞–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∑–≤–∞–Ω–∏—è
                rank_data = rank_manager.get_rank_by_name(rank_name)
                if not rank_data or not rank_data.get('abbreviation'):
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–≤–∞–Ω–∏—è: {rank_name}")
                    rank_abbr = ""  # –ü—É—Å—Ç–∞—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
                else:
                    rank_abbr = rank_data['abbreviation']
                
                new_nickname = self.build_service_nickname(subdivision_abbr, rank_abbr, first_name, last_name)
                reason = f"–ü–µ—Ä–µ–≤–æ–¥ –≤ {subdivision_data.get('name', subdivision_key)}"
            
            await member.edit(nick=new_nickname, reason=reason)
            logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {member} -> {new_nickname}")
            
            return new_nickname
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ {member}: {e}")
            if new_nickname:
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
            return None
    
    async def handle_promotion(self, member: Any, new_rank_name: str) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –≤ –∑–≤–∞–Ω–∏–∏
        
        Args:
            member: –£—á–∞—Å—Ç–Ω–∏–∫ Discord
            new_rank_name: –ù–æ–≤–æ–µ –∑–≤–∞–Ω–∏–µ
            
        Returns:
            –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        new_nickname = None
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            current_nickname = member.display_name
            parsed = self.parse_nickname(current_nickname)
            current_department = parsed.get('subdivision', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
            if not self._should_update_nickname('promotion', current_department):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ {current_department}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {member}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è –∑–≤–∞–Ω–∏–µ –∏–∑ employees)
            from utils.database_manager import PersonnelManager
            pm = PersonnelManager()
            personnel_data = await pm.get_personnel_summary(member.id)
            if not personnel_data:
                logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id}")
                # Fallback - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
                if parsed.get('name'):
                    first_name, last_name = self.extract_name_parts(parsed['name'])
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.id}")
                    return None
            else:
                first_name = personnel_data['first_name']
                last_name = personnel_data['last_name']
            parsed = self.parse_nickname(current_nickname)
            
            logger.info(f"üîç PROMOTION DEBUG: –¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: '{current_nickname}'")
            logger.info(f"üîç PROMOTION DEBUG: Parsed: {parsed}")
            logger.info(f"üîç PROMOTION DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è: {first_name} {last_name}")
            
            # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
            if parsed['is_special']:
                logger.info(f"–ù–∏–∫–Ω–µ–π–º –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–π/–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {current_nickname}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∑–≤–∞–Ω–∏—è
            rank_data = rank_manager.get_rank_by_name(new_rank_name)
            logger.info(f"üîç PROMOTION DEBUG: –†–∞–Ω–≥ '{new_rank_name}' -> –¥–∞–Ω–Ω—ã–µ: {rank_data}")
            
            if not rank_data or not rank_data.get('abbreviation'):
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–≤–∞–Ω–∏—è: {new_rank_name}")
                new_rank_abbr = ""  # –ü—É—Å—Ç–∞—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
            else:
                new_rank_abbr = rank_data['abbreviation']
            
            logger.info(f"üîç PROMOTION DEBUG: –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–Ω–≥–∞: '{new_rank_abbr}'")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            subdivision_abbr = None
            if parsed['format_type'] == 'standard' and parsed['subdivision'] and parsed['subdivision'] != "None":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç
                subdivision_abbr = parsed['subdivision']
                logger.info(f"üîç PROMOTION DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞: '{subdivision_abbr}'")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ –Ω–∏–∫–Ω–µ–π–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
                if personnel_data and personnel_data.get('subdivision_abbreviation'):
                    subdivision_abbr = personnel_data['subdivision_abbreviation']
                    logger.info(f"üîç PROMOTION DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –ë–î: '{subdivision_abbr}'")
                else:
                    # –ï—Å–ª–∏ –Ω–∏–≥–¥–µ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–ê
                    subdivision_abbr = "–í–ê"
                    logger.info(f"üîç PROMOTION DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: '{subdivision_abbr}'")
            
            new_nickname = self.build_service_nickname(subdivision_abbr, new_rank_abbr, first_name, last_name)
            logger.info(f"üîç PROMOTION DEBUG: –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: '{new_nickname}'")
            
            await member.edit(nick=new_nickname, reason=f"–ü–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ {new_rank_name}")
            logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏: {member} -> {new_nickname}")
            
            return new_nickname
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ {member}: {e}")
            if new_nickname:
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
            return None
    
    async def handle_name_change(self, member: Any, new_first_name: str, new_last_name: str, current_rank_name: str = None) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û
        
        Args:
            member: –£—á–∞—Å—Ç–Ω–∏–∫ Discord
            new_first_name: –ù–æ–≤–æ–µ –∏–º—è
            new_last_name: –ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è
            current_rank_name: –¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
            
        Returns:
            –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        new_nickname = None
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            current_nickname = member.display_name
            parsed = self.parse_nickname(current_nickname)
            current_department = parsed.get('subdivision', 'unknown')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
            if not self._should_update_nickname('name_change', current_department):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ {current_department}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {member}")
                return None
            
            logger.info(f"üîç NAME_CHANGE DEBUG: –¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º: '{current_nickname}'")
            logger.info(f"üîç NAME_CHANGE DEBUG: Parsed: {parsed}")
            logger.info(f"üîç NAME_CHANGE DEBUG: –ù–æ–≤–æ–µ –§–ò–û: {new_first_name} {new_last_name}")
            
            # –ï—Å–ª–∏ –Ω–∏–∫–Ω–µ–π–º –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
            if parsed['is_special']:
                logger.info(f"–ù–∏–∫–Ω–µ–π–º –∏–º–µ–µ—Ç –æ—Å–æ–±—ã–π/–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {current_nickname}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
            rank_abbr = ""
            if current_rank_name:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
                rank_data = rank_manager.get_rank_by_name(current_rank_name)
                if rank_data and rank_data.get('abbreviation'):
                    rank_abbr = rank_data['abbreviation']
                    logger.info(f"üîç NAME_CHANGE DEBUG: –ó–≤–∞–Ω–∏–µ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: '{current_rank_name}' -> '{rank_abbr}'")
            elif parsed['format_type'] == 'standard' and parsed['rank']:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
                rank_abbr = parsed['rank']
                logger.info(f"üîç NAME_CHANGE DEBUG: –ó–≤–∞–Ω–∏–µ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞: '{rank_abbr}'")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–≤–∞–Ω–∏–µ –∏–∑ –ë–î
                try:
                    from utils.database_manager import PersonnelManager
                    pm = PersonnelManager()
                    personnel_data = await pm.get_personnel_summary(member.id)
                    if personnel_data and personnel_data.get('current_rank'):
                        rank_data = rank_manager.get_rank_by_name(personnel_data['current_rank'])
                        if rank_data and rank_data.get('abbreviation'):
                            rank_abbr = rank_data['abbreviation']
                            logger.info(f"üîç NAME_CHANGE DEBUG: –ó–≤–∞–Ω–∏–µ –∏–∑ –ë–î: '{personnel_data['current_rank']}' -> '{rank_abbr}'")
                except Exception as db_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è –∏–∑ –ë–î: {db_error}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
            subdivision_abbr = "–í–ê"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if parsed['format_type'] == 'standard' and parsed['subdivision'] and parsed['subdivision'] != "None":
                subdivision_abbr = parsed['subdivision']
                logger.info(f"üîç NAME_CHANGE DEBUG: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞: '{subdivision_abbr}'")
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
                try:
                    from utils.database_manager import PersonnelManager
                    pm = PersonnelManager()
                    personnel_data = await pm.get_personnel_summary(member.id)
                    if personnel_data and personnel_data.get('subdivision_abbreviation'):
                        subdivision_abbr = personnel_data['subdivision_abbreviation']
                        logger.info(f"üîç NAME_CHANGE DEBUG: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –ë–î: '{subdivision_abbr}'")
                except Exception as db_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–∑ –ë–î: {db_error}")
            
            # –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º —Å –Ω–æ–≤—ã–º –§–ò–û
            new_nickname = self.build_service_nickname(subdivision_abbr, rank_abbr, new_first_name, new_last_name)
            logger.info(f"üîç NAME_CHANGE DEBUG: –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: '{new_nickname}'")
            
            await member.edit(nick=new_nickname, reason=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û: {new_first_name} {new_last_name}")
            logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û: {member} -> {new_nickname}")
            
            return new_nickname
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –§–ò–û {member}: {e}")
            if new_nickname:
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
            return None
    
    async def handle_dismissal(self, member: Any, reason: str = None, 
                              provided_name: Optional[str] = None) -> Optional[str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏
        
        Args:
            member: –£—á–∞—Å—Ç–Ω–∏–∫ Discord
            reason: –ü—Ä–∏—á–∏–Ω–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
            provided_name: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è (–∏–∑ —Ñ–æ—Ä–º—ã —É–≤–æ–ª—å–Ω–µ–Ω–∏—è)
            
        Returns:
            –ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ –í–°–ï–ì–î–ê –º–µ–Ω—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            if not self._should_update_nickname('dismissal'):
                logger.info(f"–ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —É–≤–æ–ª—å–Ω–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è {member}")
                return None
            
            # –£–≤–æ–ª—å–Ω—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            success, message = personnel_manager.dismiss_personnel(member.id, reason)
            if success:
                logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–ª —É–≤–æ–ª–µ–Ω –∏–∑ –ë–î: {message}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–æ–ª–∏—Ç—å –∏–∑ –ë–î: {message}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–æ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –µ—â–µ –µ—Å—Ç—å)
            from utils.database_manager import PersonnelManager
            pm = PersonnelManager()
            personnel_data = await pm.get_personnel_summary(member.id)
            
            if provided_name:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è
                first_name, last_name = self.extract_name_parts(provided_name)
            elif personnel_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                first_name = personnel_data['first_name']
                last_name = personnel_data['last_name']
            else:
                # Fallback - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
                current_nickname = member.display_name
                parsed = self.parse_nickname(current_nickname)
                
                if parsed['name']:
                    first_name, last_name = self.extract_name_parts(parsed['name'])
                else:
                    # Fallback –∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
                    first_name, last_name = self.extract_name_parts(current_nickname)
            
            new_nickname = self.build_dismissed_nickname(first_name, last_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –Ω–∏–∫–Ω–µ–π–º–∞
            if not member.guild.me.guild_permissions.manage_nicknames:
                logger.error(f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è 'Manage Nicknames' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ {member}")
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π
            if member.top_role >= member.guild.me.top_role and member != member.guild.owner:
                logger.error(f"‚ùå –†–æ–ª—å –±–æ—Ç–∞ –Ω–∏–∂–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º.")
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
                return None
            
            await member.edit(nick=new_nickname, reason="–£–≤–æ–ª—å–Ω–µ–Ω–∏–µ")
            logger.info(f"‚úÖ –ù–∏–∫–Ω–µ–π–º –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏: {member} -> {new_nickname}")
            
            return new_nickname
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –ø—Ä–∏ —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏ {member}: {e}")
            if new_nickname:
                logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –Ω–∏–∫–Ω–µ–π–º –±—ã–ª: '{new_nickname}'")
            return None
    
    # ================================================================
    # üîß –£–¢–ò–õ–ò–¢–´
    # ================================================================
    
    def preview_nickname_change(self, current_nickname: str, operation: str, **kwargs) -> str:
        """
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        
        Args:
            current_nickname: –¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ ('hiring', 'transfer', 'promotion', 'dismissal')
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            
        Returns:
            –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
        """
        parsed = self.parse_nickname(current_nickname)
        
        if operation == 'dismissal':
            name = kwargs.get('name') or parsed.get('name', current_nickname)
            first_name, last_name = self.extract_name_parts(name)
            return self.build_dismissed_nickname(first_name, last_name)
        
        elif operation == 'hiring':
            rank_abbr = kwargs.get('rank_abbr', '–ù–µ–∏–∑–≤')
            first_name = kwargs.get('first_name', '–ò–º—è')
            last_name = kwargs.get('last_name', '–§–∞–º–∏–ª–∏—è')
            return self.build_service_nickname("–í–ê", rank_abbr, first_name, last_name)
        
        elif operation == 'transfer':
            subdivision_abbr = kwargs.get('subdivision_abbr')
            if not subdivision_abbr or subdivision_abbr == "None":
                subdivision_abbr = "–í–ê"
            rank_abbr = kwargs.get('rank_abbr')
            if rank_abbr == "None":
                rank_abbr = ""
            first_name = kwargs.get('first_name', '–ò–º—è')
            last_name = kwargs.get('last_name', '–§–∞–º–∏–ª–∏—è')
            return self.build_service_nickname(subdivision_abbr, rank_abbr, first_name, last_name)
        
        elif operation == 'promotion':
            rank_abbr = kwargs.get('rank_abbr')
            if rank_abbr == "None":
                rank_abbr = ""
            subdivision_abbr = parsed.get('subdivision')
            if not subdivision_abbr or subdivision_abbr == "None":
                subdivision_abbr = "–í–ê"
            first_name, last_name = self.extract_name_parts(parsed.get('name', current_nickname))
            return self.build_service_nickname(subdivision_abbr, rank_abbr, first_name, last_name)
        
        return current_nickname


# ================================================================
# üéØ –≠–ö–ó–ï–ú–ü–õ–Ø–† –ú–ï–ù–ï–î–ñ–ï–†–ê
# ================================================================

nickname_manager = NicknameManager()