"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PostgreSQL connection manager —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å PostgreSQL
–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
"""

import os
import psycopg2
from psycopg2 import pool
from psycopg2.extras import RealDictCursor
import threading
import time
from contextlib import contextmanager
from typing import Optional, Dict, Any
import logging
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

class PostgreSQLConnectionPool:
    """–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, min_connections=2, max_connections=10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        Args:
            min_connections: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
            max_connections: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
        """
        self.conn_params = {
            'host': os.getenv('POSTGRES_HOST', '127.0.0.1'),
            'port': int(os.getenv('POSTGRES_PORT', '5432')),
            'database': os.getenv('POSTGRES_DB', 'postgres'),
            'user': os.getenv('POSTGRES_USER', 'postgres'),
            'password': os.getenv('POSTGRES_PASSWORD', 'simplepassword')
        }
        
        self.min_connections = min_connections
        self.max_connections = max_connections
        self._pool = None
        self._lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self._stats = {
            'total_connections_created': 0,
            'total_queries_executed': 0,
            'total_query_time': 0.0,
            'active_connections': 0,
            'pool_hits': 0,
            'pool_misses': 0,
            'slow_queries': 0,  # –ó–∞–ø—Ä–æ—Å—ã > 100ms
            'errors': 0
        }
        
        self._initialize_pool()
    
    def _initialize_pool(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            self._pool = psycopg2.pool.ThreadedConnectionPool(
                minconn=self.min_connections,
                maxconn=self.max_connections,
                **self.conn_params
            )
            self._stats['total_connections_created'] = self.min_connections
            logger.info(f"PostgreSQL pool —Å–æ–∑–¥–∞–Ω: {self.min_connections}-{self.max_connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            print(f"PostgreSQL connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ({self.min_connections}-{self.max_connections})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
            raise
    
    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        connection = None
        start_time = time.time()
        
        try:
            with self._lock:
                if self._pool:
                    connection = self._pool.getconn()
                    self._stats['active_connections'] += 1
                    
                    if connection:
                        self._stats['pool_hits'] += 1
                    else:
                        self._stats['pool_misses'] += 1
                        
            if not connection:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞")
            
            yield connection
            
        except Exception as e:
            self._stats['errors'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")
            raise
            
        finally:
            if connection:
                try:
                    with self._lock:
                        if self._pool:
                            self._pool.putconn(connection)
                            self._stats['active_connections'] -= 1
                            
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    query_time = time.time() - start_time
                    self._stats['total_query_time'] += query_time
                    self._stats['total_queries_executed'] += 1
                    
                    if query_time > 0.1:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã > 100ms
                        self._stats['slow_queries'] += 1
                        logger.warning(f"‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query_time:.3f}s")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
    
    @contextmanager 
    def get_cursor(self, cursor_factory=RealDictCursor):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞"""
        with self.get_connection() as conn:
            cursor = conn.cursor(cursor_factory=cursor_factory)
            try:
                yield cursor
                conn.commit()
            except Exception as e:
                conn.rollback()
                raise e
            finally:
                cursor.close()
    
    def get_pool_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        avg_query_time = (
            self._stats['total_query_time'] / max(self._stats['total_queries_executed'], 1)
        )
        
        pool_usage = (self._stats['active_connections'] / self.max_connections) * 100
        
        return {
            'pool_config': {
                'min_connections': self.min_connections,
                'max_connections': self.max_connections,
                'active_connections': self._stats['active_connections'],
                'pool_usage_percent': round(pool_usage, 1)
            },
            'performance': {
                'total_queries': self._stats['total_queries_executed'],
                'total_query_time': round(self._stats['total_query_time'], 3),
                'average_query_time': round(avg_query_time * 1000, 2),  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                'slow_queries': self._stats['slow_queries'],
                'slow_query_rate': round((self._stats['slow_queries'] / max(self._stats['total_queries_executed'], 1)) * 100, 2)
            },
            'pool_efficiency': {
                'pool_hits': self._stats['pool_hits'],
                'pool_misses': self._stats['pool_misses'],
                'hit_rate': round((self._stats['pool_hits'] / max(self._stats['pool_hits'] + self._stats['pool_misses'], 1)) * 100, 2)
            },
            'errors': {
                'total_errors': self._stats['errors'],
                'error_rate': round((self._stats['errors'] / max(self._stats['total_queries_executed'], 1)) * 100, 2)
            }
        }
    
    def print_pool_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        stats = self.get_pool_stats()
        
        print("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê POSTGRESQL CONNECTION POOL")
        print("=" * 55)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞:")
        print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {stats['pool_config']['min_connections']}-{stats['pool_config']['max_connections']}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {stats['pool_config']['active_connections']}")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞: {stats['pool_config']['pool_usage_percent']}%")
        
        print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['performance']['total_queries']}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {stats['performance']['average_query_time']}ms")
        print(f"   ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['performance']['slow_queries']} ({stats['performance']['slow_query_rate']}%)")
        
        print(f"\nüéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª–∞:")
        print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –ø—É–ª: {stats['pool_efficiency']['pool_hits']}")
        print(f"   ‚Ä¢ –ü—Ä–æ–º–∞—Ö–∏ –ø—É–ª–∞: {stats['pool_efficiency']['pool_misses']}")
        print(f"   ‚Ä¢ Hit Rate: {stats['pool_efficiency']['hit_rate']}%")
        
        print(f"\n–û—à–∏–±–∫–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['errors']['total_errors']} ({stats['errors']['error_rate']}%)")
        print("=" * 55)
    
    def close_pool(self):
        """–ó–∞–∫—Ä—ã—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self._pool:
            self._pool.closeall()
            print("üîí PostgreSQL connection pool –∑–∞–∫—Ä—ã—Ç")
            logger.info("PostgreSQL connection pool closed")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
_connection_pool = None

def get_connection_pool() -> PostgreSQLConnectionPool:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global _connection_pool
    if _connection_pool is None:
        _connection_pool = PostgreSQLConnectionPool(
            min_connections=3,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è Discord bot
            max_connections=8   # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
        )
    return _connection_pool

def get_pool_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pool = get_connection_pool()
    return pool.get_pool_stats()

def print_connection_pool_status():
    """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    pool = get_connection_pool()
    pool.print_pool_stats()

# Convenience —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–æ–¥–µ
@contextmanager
def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —á–µ—Ä–µ–∑ –ø—É–ª"""
    pool = get_connection_pool()
    with pool.get_connection() as conn:
        yield conn

@contextmanager
def get_db_cursor(cursor_factory=RealDictCursor):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å–æ—Ä –ë–î —á–µ—Ä–µ–∑ –ø—É–ª"""
    pool = get_connection_pool()
    with pool.get_cursor(cursor_factory=cursor_factory) as cursor:
        yield cursor