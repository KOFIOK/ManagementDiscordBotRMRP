"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Google Sheets

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
—Å Google Sheets, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.

–≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤ google_sheets.py
"""

import asyncio
import time
import random
from typing import Dict, List, Optional, Any
from utils.google_sheets import GoogleSheetsManager
from utils.user_database import UserDatabase
import gspread


class OptimizedSheetsManager:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, base_manager: GoogleSheetsManager):
        self.base_manager = base_manager
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è rate limiting
        self._request_count = 0
        self._request_window_start = time.time()
        self._max_requests_per_minute = 40  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç (Google: 100/min)
        self._rate_limit_cooldown = False
        self._cooldown_until = 0
    
    async def _check_rate_limit(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç rate limiting"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ cooldown
        if self._rate_limit_cooldown and current_time < self._cooldown_until:
            sleep_time = self._cooldown_until - current_time
            print(f"üõë RATE LIMIT: –ñ–¥–µ–º {sleep_time:.2f}s –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è cooldown")
            await asyncio.sleep(sleep_time)
            self._rate_limit_cooldown = False
        
        # –°–±—Ä–æ—Å –æ–∫–Ω–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        if current_time - self._request_window_start > 60:
            self._request_count = 0
            self._request_window_start = current_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        if self._request_count >= self._max_requests_per_minute:
            sleep_time = 60 - (current_time - self._request_window_start)
            print(f"‚è≥ RATE LIMIT: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {self._max_requests_per_minute} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω, –∂–¥–µ–º {sleep_time:.2f}s")
            await asyncio.sleep(sleep_time)
            self._request_count = 0
            self._request_window_start = time.time()
        
        self._request_count += 1
    
    async def _handle_rate_limit_error(self, error):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 429 –æ—à–∏–±–∫—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç cooldown"""
        print(f"üö® RATE LIMIT ERROR: {error}")
        self._rate_limit_cooldown = True
        self._cooldown_until = time.time() + 120  # 2 –º–∏–Ω—É—Ç—ã cooldown
        print(f"‚è∞ COOLDOWN: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cooldown –Ω–∞ 2 –º–∏–Ω—É—Ç—ã")
    
    async def _retry_with_exponential_backoff(self, func, max_retries=5, base_delay=1):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å retry –∏ exponential backoff –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 429 –æ—à–∏–±–æ–∫
        """
        for attempt in range(max_retries):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await self._check_rate_limit()
                return await func()
            except gspread.exceptions.APIError as e:
                if e.response.status_code == 429:  # Quota exceeded
                    await self._handle_rate_limit_error(e)
                    
                    if attempt == max_retries - 1:
                        print(f"‚ùå RETRY: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ ({max_retries})")
                        raise
                    
                    # Exponential backoff —Å jitter
                    delay = base_delay * (2 ** attempt) + random.uniform(0, 1)
                    print(f"‚è≥ RETRY: –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥–µ–º {delay:.2f}s –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ API")
                    await asyncio.sleep(delay)
                else:
                    # –î—Ä—É–≥–∏–µ API –æ—à–∏–±–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    raise
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                raise
    
    async def get_users_batch(self, user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Google Sheets (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
            worksheet = self.base_manager.get_worksheet(UserDatabase.WORKSHEET_NAME)
            if not worksheet:
                print(f"‚ùå BATCH: –õ–∏—Å—Ç '{UserDatabase.WORKSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {user_id: None for user_id in user_ids}
            
            print(f"üîÑ BATCH: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º —Å retry
            async def get_records():
                return await asyncio.to_thread(worksheet.get_all_records)
            
            all_records = await self._retry_with_exponential_backoff(get_records)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ Discord ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            users_index = {}
            for record in all_records:
                discord_id_str = str(record.get('Discord ID', '')).strip()
                if discord_id_str:
                    try:
                        discord_id = int(discord_id_str)
                        users_index[discord_id] = {
                            'first_name': str(record.get('–ò–º—è', '')).strip(),
                            'last_name': str(record.get('–§–∞–º–∏–ª–∏—è', '')).strip(),
                            'static': str(record.get('–°—Ç–∞—Ç–∏–∫', '')).strip(),
                            'rank': str(record.get('–ó–≤–∞–Ω–∏–µ', '')).strip(),
                            'department': str(record.get('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '')).strip(),
                            'position': str(record.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '')).strip(),
                            'discord_id': discord_id
                        }
                    except (ValueError, TypeError):
                        continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = {}
            for user_id in user_ids:
                if user_id in users_index:
                    user_data = users_index[user_id]
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
                    user_data['full_name'] = f"{user_data['first_name']} {user_data['last_name']}".strip()
                    result[user_id] = user_data
                    print(f"‚úÖ BATCH: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_data['full_name']}")
                else:
                    result[user_id] = None
                    print(f"‚ùå BATCH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"üìä BATCH RESULT: {len([r for r in result.values() if r])}/{len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ")
            return result
            
        except Exception as e:
            print(f"‚ùå BATCH ERROR: {e}")
            return {user_id: None for user_id in user_ids}
    
    async def get_user_fast(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        batch_result = await self.get_users_batch([user_id])
        return batch_result.get(user_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_optimized_sheets = None

def get_optimized_sheets_manager():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä OptimizedSheetsManager —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _optimized_sheets
    
    if _optimized_sheets is None:
        try:
            from utils.google_sheets import GoogleSheetsManager
            
            # GoogleSheetsManager –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ __init__
            base_manager = GoogleSheetsManager()
            base_manager.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            _optimized_sheets = OptimizedSheetsManager(base_manager)
            print("‚úÖ OPTIMIZED SHEETS: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
        except Exception as e:
            print(f"‚ùå OPTIMIZED SHEETS INIT ERROR: {e}")
            _optimized_sheets = None
    
    return _optimized_sheets


async def get_users_batch_optimized(user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è batch –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    Returns:
        Dict {user_id: user_data} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    optimized_sheets = get_optimized_sheets_manager()
    if optimized_sheets is None:
        print("‚ùå FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UserDatabase")
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UserDatabase
        results = {}
        for user_id in user_ids:
            try:
                user_data = await UserDatabase.get_user_info(user_id)
                results[user_id] = user_data
            except Exception as e:
                print(f"‚ùå FALLBACK ERROR –¥–ª—è {user_id}: {e}")
                results[user_id] = None
        return results
    
    return await optimized_sheets.get_users_batch(user_ids)


async def get_user_fast_optimized(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    optimized_sheets = get_optimized_sheets_manager()
    if optimized_sheets is None:
        print("‚ùå FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UserDatabase")
        try:
            return await UserDatabase.get_user_info(user_id)
        except Exception as e:
            print(f"‚ùå FALLBACK ERROR –¥–ª—è {user_id}: {e}")
            return None
    
    return await optimized_sheets.get_user_fast(user_id)
