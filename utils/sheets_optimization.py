"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Google Sheets

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
—Å Google Sheets, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.

–≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –≤ google_sheets.py
"""

import asyncio
from typing import Dict, List, Optional, Any
from utils.google_sheets import GoogleSheetsManager


class OptimizedSheetsManager:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        self.base_manager = GoogleSheetsManager()
        self._batch_cache = {}  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
    
    async def get_users_batch(self, user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        
        Args:
            user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            Dict {user_id: user_data} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        try:
            from utils.user_database import UserDatabase
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
            worksheet = self.base_manager.get_worksheet(UserDatabase.WORKSHEET_NAME)
            if not worksheet:
                print(f"‚ùå BATCH: –õ–∏—Å—Ç '{UserDatabase.WORKSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {user_id: None for user_id in user_ids}
            
            print(f"üîÑ BATCH: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            all_records = await asyncio.to_thread(worksheet.get_all_records)
              # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ Discord ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            users_index = {}
            for record in all_records:
                discord_id_str = str(record.get('Discord ID', '')).strip()
                if discord_id_str:
                    try:
                        discord_id = int(discord_id_str)
                        users_index[discord_id] = {
                            'first_name': str(record.get('–ò–º—è', '')).strip(),
                            'last_name': str(record.get('–§–∞–º–∏–ª–∏—è', '')).strip(),
                            'static': str(record.get('–°—Ç–∞—Ç–∏–∫', '')).strip(),
                            'rank': str(record.get('–ó–≤–∞–Ω–∏–µ', '')).strip(),  # –ò–°–ü–†–ê–í–õ–ï–ù–û: '–ó–≤–∞–Ω–∏–µ' –≤–º–µ—Å—Ç–æ '–í–æ–∏–Ω—Å–∫–æ–µ –ó–≤–∞–Ω–∏–µ'
                            'department': str(record.get('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '')).strip(),
                            'position': str(record.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '')).strip(),
                            'discord_id': discord_id_str
                        }
                    except ValueError:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ Discord ID
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            results = {}
            for user_id in user_ids:
                if user_id in users_index:
                    user_data = users_index[user_id]
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
                    user_data['full_name'] = f"{user_data['first_name']} {user_data['last_name']}".strip()
                    results[user_id] = user_data
                    print(f"‚úÖ BATCH: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_data['full_name']}")
                else:
                    results[user_id] = None
                    print(f"‚ö†Ô∏è BATCH: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"‚úÖ BATCH: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–π–¥–µ–Ω–æ {len([r for r in results.values() if r])}")
            return results
            
        except Exception as e:
            print(f"‚ùå BATCH ERROR: {e}")
            import traceback
            traceback.print_exc()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return {user_id: None for user_id in user_ids}
    
    async def get_user_fast(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            results = await self.get_users_batch([user_id])
            return results.get(user_id)
            
        except Exception as e:
            print(f"‚ùå FAST GET ERROR –¥–ª—è {user_id}: {e}")
            return None
    
    async def preload_active_users(self, limit: int = 100) -> Dict[int, Dict[str, Any]]:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            from utils.user_database import UserDatabase
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
            worksheet = self.base_manager.get_worksheet(UserDatabase.WORKSHEET_NAME)
            if not worksheet:
                print(f"‚ùå PRELOAD: –õ–∏—Å—Ç '{UserDatabase.WORKSHEET_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {}
            
            print(f"üîÑ PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ {limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            all_records = await asyncio.to_thread(worksheet.get_all_records)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            results = {}
            count = 0
            
            for record in all_records:
                if count >= limit:
                    break
                    
                discord_id_str = str(record.get('Discord ID', '')).strip()
                if discord_id_str:
                    try:
                        discord_id = int(discord_id_str)
                        user_data = {
                            'first_name': str(record.get('–ò–º—è', '')).strip(),
                            'last_name': str(record.get('–§–∞–º–∏–ª–∏—è', '')).strip(),
                            'static': str(record.get('–°—Ç–∞—Ç–∏–∫', '')).strip(),
                            'rank': str(record.get('–í–æ–∏–Ω—Å–∫–æ–µ –ó–≤–∞–Ω–∏–µ', '')).strip(),
                            'department': str(record.get('–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', '')).strip(),
                            'position': str(record.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '')).strip(),
                            'discord_id': discord_id_str
                        }
                        user_data['full_name'] = f"{user_data['first_name']} {user_data['last_name']}".strip()
                        
                        results[discord_id] = user_data
                        count += 1
                        
                    except ValueError:
                        continue
            
            print(f"‚úÖ PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return results
            
        except Exception as e:
            print(f"‚ùå PRELOAD ERROR: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
optimized_sheets = OptimizedSheetsManager()


async def get_users_batch_optimized(user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è batch –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    return await optimized_sheets.get_users_batch(user_ids)


async def get_user_fast_optimized(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    return await optimized_sheets.get_user_fast(user_id)
