"""
–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
"""

import discord
from typing import Optional, Dict, Any
from utils.config_manager import load_config
from forms.supplies.supplies_control_view import send_supplies_control_message
from forms.supplies.supplies_subscription_view import send_supplies_subscription_message


class SuppliesRestoreManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∞–≤–æ–∫"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def restore_all_messages(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
        try:
            config = load_config()
            supplies_config = config.get('supplies', {})
            
            print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å—Ç–∞–≤–æ–∫...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await self._restore_control_message(supplies_config)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await self._restore_subscription_message(supplies_config)
            
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
    
    async def _restore_control_message(self, supplies_config: Dict[str, Any]):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏"""
        try:
            control_channel_id = supplies_config.get('control_channel_id')
            if not control_channel_id:
                print("‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            channel = self.bot.get_channel(control_channel_id)
            if not channel:
                print(f"‚ùå –ö–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {control_channel_id})")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            has_message = await self._check_for_supplies_message(
                channel, 
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏"
            )
            
            if not has_message:
                print(f"üìù –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –≤ #{channel.name}")
                await send_supplies_control_message(channel)
            else:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ #{channel.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _restore_subscription_message(self, supplies_config: Dict[str, Any]):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            subscription_channel_id = supplies_config.get('subscription_channel_id')
            if not subscription_channel_id:
                print("‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            channel = self.bot.get_channel(subscription_channel_id)
            if not channel:
                print(f"‚ùå –ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (ID: {subscription_channel_id})")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            has_message = await self._check_for_supplies_message(
                channel, 
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö"
            )
            
            if not has_message:
                print(f"üìù –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ –≤ #{channel.name}")
                await send_supplies_subscription_message(channel)
            else:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ #{channel.name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    async def _check_for_supplies_message(self, channel: discord.TextChannel, 
                                        title_keyword: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–æ–∫ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in channel.history(limit=10):
                if message.author == self.bot.user and message.embeds:
                    for embed in message.embeds:
                        if embed.title and title_keyword in embed.title:
                            return True
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ #{channel.name}: {e}")
            return False
    
    async def update_control_message_timers(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–∞—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            config = load_config()
            control_channel_id = config.get('supplies', {}).get('control_channel_id')
            
            if not control_channel_id:
                return
            
            channel = self.bot.get_channel(control_channel_id)
            if not channel:
                return
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏
            async for message in channel.history(limit=10):
                if (message.author == self.bot.user and message.embeds and 
                    len(message.embeds) >= 1 and message.embeds[0].title and 
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏" in message.embeds[0].title):
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º view —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
                    from forms.supplies.supplies_control_view import SuppliesControlView
                    new_view = SuppliesControlView()
                    new_view._update_button_states()
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
                    from forms.supplies.supplies_manager import SuppliesManager
                    from datetime import datetime
                    
                    supplies_manager = SuppliesManager()
                    active_timers = supplies_manager.get_active_timers()
                    
                    timer_embed = discord.Embed(
                        title="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏",
                        color=discord.Color.blue(),
                        timestamp=datetime.now()
                    )
                    
                    if not active_timers:
                        timer_embed.description = "üü¢ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ—Å—Ç–∞–≤–∫–µ"
                    else:
                        for object_key, timer_info in active_timers.items():
                            object_name = timer_info.get('object_name', object_key)
                            emoji = timer_info.get('emoji', 'üì¶')
                            started_by = timer_info.get('started_by_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            remaining = supplies_manager.get_remaining_time(object_key)
                            
                            timer_embed.add_field(
                                name=f"{emoji} {object_name}",
                                value=f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: **{remaining}**\nüë§ –ó–∞–ø—É—Å—Ç–∏–ª: {started_by}",
                                inline=True
                            )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º view –∏ embeds
                    embeds = list(message.embeds)
                    if len(embeds) >= 2:
                        embeds[1] = timer_embed
                    else:
                        embeds.append(timer_embed)
                    
                    await message.edit(embeds=embeds, view=new_view)
                    break
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            async for message in channel.history(limit=10):
                if (message.author == self.bot.user and 
                    message.embeds and 
                    message.embeds[0].title and
                    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏" in message.embeds[0].title):
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º view —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
                    from forms.supplies.supplies_control_view import SuppliesControlView
                    new_view = SuppliesControlView()
                    new_view._update_button_states()
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
                    from forms.supplies.supplies_manager import SuppliesManager
                    from datetime import datetime
                    
                    supplies_manager = SuppliesManager()
                    active_timers = supplies_manager.get_active_timers()
                    
                    timer_embed = discord.Embed(
                        title="üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏",
                        color=discord.Color.blue(),
                        timestamp=datetime.now()
                    )
                    
                    if not active_timers:
                        timer_embed.description = "üü¢ –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø–æ—Å—Ç–∞–≤–∫–µ"
                    else:
                        for object_key, timer_info in active_timers.items():
                            object_name = timer_info.get('object_name', object_key)
                            emoji = timer_info.get('emoji', 'üì¶')
                            started_by = timer_info.get('started_by_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            remaining = supplies_manager.get_remaining_time(object_key)
                            
                            timer_embed.add_field(
                                name=f"{emoji} {object_name}",
                                value=f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: **{remaining}**\nüë§ –ó–∞–ø—É—Å—Ç–∏–ª: {started_by}",
                                inline=True
                            )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º view –∏ embeds
                    embeds = list(message.embeds)
                    if len(embeds) >= 2:
                        embeds[1] = timer_embed
                    else:
                        embeds.append(timer_embed)
                    
                    await message.edit(embeds=embeds, view=new_view)
                    break
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
supplies_restore_manager: Optional[SuppliesRestoreManager] = None


def initialize_supplies_restore_manager(bot) -> SuppliesRestoreManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
    global supplies_restore_manager
    
    try:
        supplies_restore_manager = SuppliesRestoreManager(bot)
        return supplies_restore_manager
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
        return None


def get_supplies_restore_manager() -> Optional[SuppliesRestoreManager]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–æ–∫"""
    return supplies_restore_manager
