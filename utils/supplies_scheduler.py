import asyncio
import discord
from datetime import datetime, timedelta
from typing import Optional
from utils.config_manager import load_config
from forms.supplies.supplies_manager import SuppliesManager


class SuppliesScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö"""
    
    def __init__(self, bot):
        self.bot = bot
        self.supplies_manager = SuppliesManager(bot)
        self.task: Optional[asyncio.Task] = None
        self.is_running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.is_running:
            print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._scheduler_loop())
        print("üöö –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            return
        
        self.is_running = False
        if self.task:
            self.task.cancel()
        print("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–∞–≤–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        while self.is_running:
            try:
                await self._check_timers()
                await asyncio.sleep(15)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ UI
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
                await asyncio.sleep(15)
    
    async def _check_timers(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            active_timers = self.supplies_manager.get_active_timers()
            config = load_config()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            notification_channel_id = config.get('supplies', {}).get('notification_channel_id')
            subscription_role_id = config.get('supplies', {}).get('subscription_role_id')
            warning_minutes = config.get('supplies', {}).get('warning_minutes', 20)
            
            if not notification_channel_id:
                if active_timers:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä—ã
                    print("‚ö†Ô∏è –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            notification_channel = self.bot.get_channel(notification_channel_id)
            if not notification_channel:
                if active_timers:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä—ã
                    print(f"‚ùå –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {notification_channel_id}")
                return
            
            current_time = datetime.now()
            timers_changed = False
            expired_timers = []  # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            for object_key, timer_info in active_timers.items():
                end_time = datetime.fromisoformat(timer_info["end_time"])
                time_until_ready = end_time - current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–µ—Ä (–≥–æ—Ç–æ–≤ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ)
                if current_time >= end_time:
                    expired_timers.append((object_key, timer_info))
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                warning_time = timedelta(minutes=warning_minutes)
                if (time_until_ready <= warning_time and 
                    not timer_info.get("warning_sent", False)):
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    await self.supplies_manager.clear_start_message(object_key, notification_channel)
                    
                    await self._send_warning_notification(
                        notification_channel,
                        object_key,
                        timer_info,
                        subscription_role_id,
                        int(time_until_ready.total_seconds() // 60)  # –º–∏–Ω—É—Ç—ã
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    await self._mark_warning_sent(object_key)
                    timers_changed = True
            
            # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º warning —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–∫–∞ —Ç–∞–π–º–µ—Ä—ã –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
            await self._update_warning_messages(notification_channel)
            
            # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ç–∞–π–º–µ—Ä—ã
            for object_key, timer_info in expired_timers:
                await self._send_ready_notification(
                    notification_channel, 
                    object_key, 
                    timer_info, 
                    subscription_role_id
                )
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await self.supplies_manager.clear_start_message(object_key, notification_channel)
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ç–∞–π–º–µ—Ä
                self.supplies_manager.cancel_timer(object_key)
                timers_changed = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –≤ embed'–∞—Ö
            await self._update_control_message()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
            await self._update_notification_messages(notification_channel)
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
    
    async def _update_control_message(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏"""
        try:
            from utils.supplies_restore import get_supplies_restore_manager
            restore_manager = get_supplies_restore_manager()
            if restore_manager:
                await restore_manager.update_control_message_timers()
            else:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")

    async def _update_notification_messages(self, notification_channel):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:
            if notification_channel:
                await self.supplies_manager.update_notification_messages(notification_channel)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–π: {e}")
    
    async def _send_ready_notification(self, channel: discord.TextChannel, object_key: str, 
                                     timer_info: dict, subscription_role_id: Optional[int]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            object_name = timer_info.get("object_name", object_key)
            emoji = timer_info.get("emoji", "üì¶")
            started_by_name = timer_info.get("started_by_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            role_mention = f"<@&{subscription_role_id}>" if subscription_role_id else "@everyone"
            
            embed = discord.Embed(
                title="üöö –ü–æ—Å—Ç–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!",
                description=f"{emoji} **{object_name}** –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!",
                color=discord.Color.green(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                value=(
                    f"üè≠ **–û–±—ä–µ–∫—Ç:** {object_name}\n"
                    f"üë§ **–ó–∞–ø—É—Å—Ç–∏–ª:** {started_by_name}\n"
                    f"‚úÖ **–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
                ),
                inline=False
            )
            
            embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
            
            await channel.send(
                content=f"{role_mention} {emoji} **{object_name}** –≥–æ—Ç–æ–≤ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ!",
                embed=embed
            )
            
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {object_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {object_key}: {e}")
    
    async def _send_warning_notification(self, channel: discord.TextChannel, object_key: str,
                                       timer_info: dict, subscription_role_id: Optional[int],
                                       minutes_left: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ N –º–∏–Ω—É—Ç –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
        try:
            object_name = timer_info.get("object_name", object_key)
            emoji = timer_info.get("emoji", "üì¶")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            role_mention = f"-# <@&{subscription_role_id}>" if subscription_role_id else ""
            
            embed = discord.Embed(
                title="‚ö†Ô∏è –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞!",
                description=f"{emoji} **{object_name}** –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ **{minutes_left} –º–∏–Ω—É—Ç**!",
                color=discord.Color.orange(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="‚è∞ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                value=(
                    f"**–û–±—ä–µ–∫—Ç:** {object_name}\n"
                    f"**–û—Å—Ç–∞–ª–æ—Å—å:** {minutes_left} –º–∏–Ω—É—Ç\n"
                ),
                inline=False
            )
            
            embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏")
            
            message = await channel.send(
                content=f"{role_mention}",
                embed=embed
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            await self.supplies_manager.save_notification_message(object_key, message.id, 'warning')
            
            print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è {object_name}: {minutes_left} –º–∏–Ω—É—Ç")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {object_key}: {e}")
    
    async def _mark_warning_sent(self, object_key: str):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        try:
            data = self.supplies_manager._load_data()
            if object_key in data.get("active_timers", {}):
                data["active_timers"][object_key]["warning_sent"] = True
                self.supplies_manager._save_data(data)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {object_key}: {e}")

    async def _update_warning_messages(self, channel):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π"""
        try:
            if channel:
                await self.supplies_manager.update_warning_messages(channel)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
supplies_scheduler: Optional[SuppliesScheduler] = None


def initialize_supplies_scheduler(bot) -> SuppliesScheduler:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–∞–≤–æ–∫"""
    global supplies_scheduler
    
    try:
        supplies_scheduler = SuppliesScheduler(bot)
        return supplies_scheduler
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}")
        return None


def get_supplies_scheduler() -> Optional[SuppliesScheduler]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫"""
    return supplies_scheduler
