"""
User Data Caching System

–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ PostgreSQL –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ Discord.

Features:
- –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ —Å TTL
- –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å fallback
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
- BULK PRELOAD - –º–∞—Å—Å–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Any, Tuple, List
from utils.database_manager import personnel_manager


class UserDataCache:
    """–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: user_data}
        self._cache: Dict[int, Dict[str, Any]] = {}
        
        # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞: {user_id: expiry_datetime}
        self._expiry: Dict[int, datetime] = {}
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self._loading: Dict[int, bool] = {}
        
        # –§–ª–∞–≥ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
        self._bulk_preloaded = False
        self._bulk_preload_time = None
        self._bulk_preload_lock = asyncio.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        self._stats = {
            'hits': 0,
            'misses': 0,
            'total_requests': 0,
            'cache_size': 0,
            'last_cleanup': datetime.now(),
            'bulk_preload_count': 0,
            'bulk_preload_time': None
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        self.CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç TTL - –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
        self.MAX_CACHE_SIZE = 1000  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–æ—Å—Ç–∞ (—Ç–µ–∫—É—â–∏–µ 281 + –∑–∞–ø–∞—Å)
        self.CLEANUP_INTERVAL = 300  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.BULK_PRELOAD_TTL = 1800  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    
    async def get_user_info(self, user_id: int, force_refresh: bool = False) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        self._stats['total_requests'] += 1
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
        if not self._bulk_preloaded and not self._loading.get('__bulk_preload__', False):
            print(f"üîÑ AUTO BULK PRELOAD: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑)")
            self._loading['__bulk_preload__'] = True
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å)
                asyncio.create_task(self._auto_bulk_preload())
            except Exception as e:
                print(f"‚ùå AUTO BULK PRELOAD ERROR: {e}")
            finally:
                self._loading.pop('__bulk_preload__', None)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if self._loading.get(user_id, False):
            print(f"üîÑ RECURSIVE PROTECTION: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è {user_id}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not force_refresh and self._is_cached(user_id):
            self._stats['hits'] += 1
            print(f"üìã CACHE HIT: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            cached_data = self._cache[user_id]
            return cached_data.copy() if cached_data is not None else None
        
        # –ö—ç—à –ø—Ä–æ–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self._stats['misses'] += 1
        print(f"üîÑ CACHE MISS: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –±–∞–∑—ã")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        self._loading[user_id] = True
        
        try:            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL
            if self._bulk_preloaded and user_id not in self._cache:
                print(f"üö´ BULK MISS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._store_in_cache(user_id, None)
                return None
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏—é
            user_data = None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º database_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            try:
                user_data = personnel_manager.get_personnel_by_discord_id(user_id)
                if user_data:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    user_data = {
                        'full_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                        'static': user_data.get('static', ''),
                        'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        'department': user_data.get('subdivision', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
                    }
                print(f"üîç DATABASE_MANAGER: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
            except Exception as e:
                print(f"‚ö†Ô∏è DATABASE_MANAGER FALLBACK: {e}")
                user_data = None
            
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._store_in_cache(user_id, user_data)
                print(f"‚úÖ CACHE STORE: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                return user_data.copy() if user_data is not None else None
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
                self._store_in_cache(user_id, None)
                print(f"‚ö†Ô∏è CACHE STORE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            print(f"‚ùå CACHE ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in self._cache:
                print(f"üîÑ CACHE FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
                return self._cache[user_id].copy()
            return None
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            self._loading.pop(user_id, None)
    
    async def _auto_bulk_preload(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Ñ–æ–Ω–µ"""
        try:
            print(f"üîÑ AUTO BULK PRELOAD: –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏")
            result = await self.bulk_preload_all_users()
            if result.get('success', False):
                print(f"‚úÖ AUTO BULK PRELOAD: –§–æ–Ω–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå AUTO BULK PRELOAD: –§–æ–Ω–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {result.get('error', 'Unknown error')}")
        except Exception as e:
            print(f"‚ùå AUTO BULK PRELOAD ERROR: {e}")
    
    def _is_cached(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ"""
        if user_id not in self._cache:
            return False
        
        if user_id not in self._expiry:
            return False
        
        return datetime.now() < self._expiry[user_id]
    
    async def _get_user_info_internal(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ fallback –ª–æ–≥–∏–∫–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        if self._is_cached(user_id):
            print(f"üìã INTERNAL CACHE HIT: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            cached_data = self._cache[user_id]
            return cached_data.copy() if cached_data is not None else None
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if self._loading.get(user_id, False):
            print(f"üîÑ INTERNAL RECURSIVE PROTECTION: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è {user_id}")
            return None
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        self._loading[user_id] = True
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º database_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ü–û–õ–ù–´–• –¥–∞–Ω–Ω—ã—Ö
            import asyncio
            user_data = await personnel_manager.get_personnel_summary(user_id)
            
            if user_data:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è leave_requests
                formatted_data = {
                    'full_name': user_data.get('full_name', '').strip() or f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                    'static': user_data.get('static', ''),
                    'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'department': user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'),
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'first_name': user_data.get('first_name', ''),
                    'last_name': user_data.get('last_name', ''),
                    'employee_status': user_data.get('employee_status', None)
                }
                user_data = formatted_data
                print(f"üîç INTERNAL DATABASE_MANAGER: –ü–æ–ª—É—á–µ–Ω—ã –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} - {user_data.get('rank', 'N/A')} {user_data.get('full_name', 'N/A')} ({user_data.get('department', 'N/A')})")
            else:
                print(f"‚ö†Ô∏è INTERNAL DATABASE_MANAGER: –î–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                user_data = None
            
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._store_in_cache(user_id, user_data)
                print(f"‚úÖ INTERNAL CACHE STORE: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                return user_data.copy()
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._store_in_cache(user_id, None)
                print(f"‚ö†Ô∏è INTERNAL CACHE STORE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
                
        except Exception as e:
            print(f"‚ùå INTERNAL CACHE ERROR: {e}")
            return None
        finally:
            # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
            self._loading.pop(user_id, None)
    
    def _store_in_cache(self, user_id: int, user_data: Optional[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self._cache) >= self.MAX_CACHE_SIZE:
            self._cleanup_expired()
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if len(self._cache) >= self.MAX_CACHE_SIZE:
                self._remove_oldest_entries(self.MAX_CACHE_SIZE // 4)  # –£–¥–∞–ª—è–µ–º 25%
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._cache[user_id] = user_data
        self._expiry[user_id] = datetime.now() + timedelta(seconds=self.CACHE_TTL)
        self._stats['cache_size'] = len(self._cache)
    
    def _cleanup_expired(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞"""
        now = datetime.now()
        expired_keys = [
            user_id for user_id, expiry_time in self._expiry.items()
            if expiry_time <= now
        ]
        
        for user_id in expired_keys:
            self._cache.pop(user_id, None)
            self._expiry.pop(user_id, None)
        
        if expired_keys:
            print(f"üßπ CACHE CLEANUP: –£–¥–∞–ª–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        self._stats['cache_size'] = len(self._cache)
        self._stats['last_cleanup'] = now
    
    def _remove_oldest_entries(self, count: int):
        """–£–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏"""
        if not self._expiry:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        sorted_entries = sorted(self._expiry.items(), key=lambda x: x[1])
        
        for i in range(min(count, len(sorted_entries))):
            user_id = sorted_entries[i][0]
            self._cache.pop(user_id, None)
            self._expiry.pop(user_id, None)
        
        print(f"üßπ CACHE EVICTION: –£–¥–∞–ª–µ–Ω–æ {min(count, len(sorted_entries))} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        self._stats['cache_size'] = len(self._cache)
    
    def invalidate_user(self, user_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        self._cache.pop(user_id, None)
        self._expiry.pop(user_id, None)
        self._stats['cache_size'] = len(self._cache)
        print(f"üóëÔ∏è CACHE INVALIDATE: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
    
    def clear_cache(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self._cache.clear()
        self._expiry.clear()
        self._stats['cache_size'] = 0
        print("üóëÔ∏è CACHE CLEAR: –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        self._stats['cache_size'] = len(self._cache)
        
        # –í—ã—á–∏—Å–ª—è–µ–º hit rate
        total_requests = self._stats['total_requests']
        if total_requests > 0:
            hit_rate = (self._stats['hits'] / total_requests) * 100
        else:
            hit_rate = 0
        
        return {
            **self._stats,
            'hit_rate_percent': round(hit_rate, 2),
            'expired_entries': self._count_expired_entries(),
            'memory_usage_estimate': len(self._cache) * 500  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
        }
    
    def _count_expired_entries(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        now = datetime.now()
        return sum(1 for expiry_time in self._expiry.values() if expiry_time <= now)
    
    async def preload_users(self, user_ids: list) -> Dict[int, Optional[Dict[str, Any]]]:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            Dict {user_id: user_data} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        """
        print(f"üîÑ CACHE PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        results = {}
        tasks = []
          # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        for user_id in user_ids:
            if not self._is_cached(user_id):  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
                tasks.append(self.get_user_info(user_id))
            else:
                results[user_id] = self._cache[user_id].copy()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–ª–∏ batch-–∑–∞–ø—Ä–æ—Å–æ–º
        if tasks:
            try:
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                missing_user_ids = [uid for uid in user_ids if uid not in results]
                
                # Batch-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ PostgreSQL
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                batch_error = Exception("Batch optimization not available with PostgreSQL")
                print(f"‚ö†Ô∏è BATCH FALLBACK: {batch_error}")
                print(f"üìã STANDARD PRELOAD: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                
                async def limited_get_user_info(user_id):
                    async with semaphore:
                        return await self.get_user_info(user_id)
                
                limited_tasks = [limited_get_user_info(uid) for uid in missing_user_ids]
                task_results = await asyncio.gather(*limited_tasks, return_exceptions=True)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for i, result in enumerate(task_results):
                    user_id = missing_user_ids[i]
                    if isinstance(result, Exception):
                        print(f"‚ùå PRELOAD ERROR –¥–ª—è {user_id}: {result}")
                        results[user_id] = None
                    else:
                        results[user_id] = result
                        
            except Exception as e:
                print(f"‚ùå PRELOAD BATCH ERROR: {e}")
        
        print(f"‚úÖ CACHE PRELOAD –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return results
    
    async def bulk_preload_all_users(self, force_refresh: bool = False) -> Dict[str, Any]:
        """
        –ú–ê–°–°–û–í–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ PostgreSQL –≤ –∫—ç—à
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ PostgreSQL
        –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
        
        Args:
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        """
        async with self._bulk_preload_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
            if not force_refresh and self._is_bulk_preload_valid():
                print(f"üìã BULK PRELOAD: –î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É")
                return {
                    'success': True,
                    'users_loaded': len(self._cache),
                    'from_cache': True,
                    'message': '–î–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É'
                }
            
            print(f"üöÄ BULK PRELOAD: –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∏–∑ PostgreSQL")
            start_time = datetime.now()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ database_manager –∏—Å–ø–æ–ª—å–∑—É—è get_all_personnel
                all_users_raw = await personnel_manager.get_all_personnel()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è leave_requests
                all_users = []
                for user_data in all_users_raw:
                    if user_data.get('discord_id'):
                        formatted_user = {
                            'discord_id': user_data.get('discord_id'),
                            'full_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
                            'static': user_data.get('static', ''),
                            'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                            'department': user_data.get('subdivision', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'),
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            'first_name': user_data.get('first_name', ''),
                            'last_name': user_data.get('last_name', ''),
                            'employee_status': 'active' if user_data.get('rank') else None
                        }
                        all_users.append(formatted_user)
                
                if not all_users:
                    print(f"‚ö†Ô∏è BULK PRELOAD: –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ database_manager")
                    return {
                        'success': False,
                        'users_loaded': 0,
                        'error': '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ database_manager'
                    }
                
                # –ö—ç—à–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                preloaded_count = 0
                error_count = 0
                
                for user_data in all_users:
                    try:
                        discord_id = user_data.get('discord_id')
                        if not discord_id:
                            continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (—Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º TTL –¥–ª—è bulk –¥–∞–Ω–Ω—ã—Ö)
                        self._store_in_cache_bulk(discord_id, user_data)
                        preloaded_count += 1
                        
                    except Exception as record_error:
                        error_count += 1
                        continue
                
                # –û—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
                self._bulk_preloaded = True
                self._bulk_preload_time = datetime.now()
                self._stats['bulk_preload_count'] = preloaded_count
                self._stats['bulk_preload_time'] = self._bulk_preload_time
                
                load_time = (datetime.now() - start_time).total_seconds()
                
                print(f"‚úÖ BULK PRELOAD: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {load_time:.2f}s")
                print(f"   üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ: {preloaded_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
                print(f"   üìä –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(self._cache)} –∑–∞–ø–∏—Å–µ–π")
                
                return {
                    'success': True,
                    'users_loaded': preloaded_count,
                    'errors': error_count,
                    'load_time': load_time,
                    'cache_size': len(self._cache)
                }
                
            except Exception as e:
                print(f"‚ùå BULK PRELOAD ERROR: {e}")
                import traceback
                traceback.print_exc()
                return {
                    'success': False,
                    'users_loaded': 0,
                    'error': str(e)
                }
    
    def _is_bulk_preload_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ –º–∞—Å—Å–æ–≤–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞"""
        if not self._bulk_preloaded or not self._bulk_preload_time:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        age = datetime.now() - self._bulk_preload_time
        return age.total_seconds() < self.BULK_PRELOAD_TTL
    
    def _store_in_cache_bulk(self, user_id: int, user_data: Optional[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ (—Å –ø—Ä–æ–¥–ª–µ–Ω–Ω—ã–º TTL)"""
        # –î–ª—è bulk –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π TTL
        bulk_ttl = max(self.CACHE_TTL, self.BULK_PRELOAD_TTL)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._cache[user_id] = user_data
        self._expiry[user_id] = datetime.now() + timedelta(seconds=bulk_ttl)
        self._stats['cache_size'] = len(self._cache)
    
    async def background_cleanup_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        while True:
            try:
                await asyncio.sleep(self.CLEANUP_INTERVAL)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
                now = datetime.now()
                if (now - self._stats['last_cleanup']).total_seconds() >= self.CLEANUP_INTERVAL:
                    self._cleanup_expired()
                    
            except asyncio.CancelledError:
                print("üõë CACHE CLEANUP TASK: –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break
            except Exception as e:
                print(f"‚ùå CACHE CLEANUP ERROR: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
user_cache = UserDataCache()


# =================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–°–ï–• –ú–û–î–£–õ–ï–ô ===================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
_global_cache = UserDataCache()


async def initialize_user_cache(force_refresh: bool = False) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ
        
    Returns:
        bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"üöÄ CACHE INIT: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    result = await _global_cache.bulk_preload_all_users(force_refresh)
    return result.get('success', False)


async def refresh_user_cache() -> bool:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—ç—à–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"üîÑ CACHE REFRESH: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
    result = await _global_cache.bulk_preload_all_users(force_refresh=True)
    return result.get('success', False)


def is_cache_initialized() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫—ç—à
    
    Returns:
        bool: True –µ—Å–ª–∏ –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    """
    return _global_cache._bulk_preloaded and _global_cache._is_bulk_preload_valid()


async def get_cached_user_info(user_id: int, force_refresh: bool = False) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return await _global_cache.get_user_info(user_id, force_refresh)


def get_cache_statistics() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫—ç—à–∞
    """
    return _global_cache.get_cache_stats()


def clear_user_cache() -> None:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
    """
    _global_cache.clear_cache()


def invalidate_user_cache(user_id: int) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    if user_id in _global_cache._cache:
        del _global_cache._cache[user_id]
        del _global_cache._expiry[user_id]
        _global_cache._stats['cache_size'] = len(_global_cache._cache)
        print(f"üóëÔ∏è CACHE INVALIDATE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞")


async def preload_user_data(user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
    """
    –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à
    
    Args:
        user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    results = {}
    for user_id in user_ids:
        user_data = await _global_cache.get_user_info(user_id)
        results[user_id] = user_data
    
    print(f"üì¶ CACHE PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return results


async def get_user_name_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ –Ω–∞–π–¥–µ–Ω"


async def get_user_static_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°—Ç–∞—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('static', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ –Ω–∞–π–¥–µ–Ω"


async def get_user_department_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"


async def get_user_rank_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ó–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


async def get_user_position_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


# =================== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú ===================

def get_cached_user_info_sync(user_id: int) -> Optional[Dict[str, Any]]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–û–õ–¨–ö–û –∏–∑ –∫—ç—à–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º
    """
    try:
        if _global_cache._is_cached(user_id):
            cached_data = _global_cache._cache.get(user_id)
            if cached_data and cached_data != "NOT_FOUND":
                return cached_data.copy()
        return None
    except Exception:
        return None

# –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º warehouse
async def get_warehouse_user_data(user_id: int) -> Dict[str, str]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å warehouse_user_data –º–æ–¥—É–ª–µ–º"""
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return {
            'name_value': user_data.get('full_name', ''),
            'static_value': user_data.get('static', ''),
            'source': 'universal_cache'
        }
    return {
        'name_value': '',
        'static_value': '',
        'source': 'not_found'
    }

async def prepare_modal_data(user_id: int) -> Dict[str, str]:
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    (–∑–∞–º–µ–Ω–∞ warehouse_user_data.prepare_modal_data)
    """
    try:
        user_data = await get_cached_user_info(user_id)
        
        if user_data:
            name_value = user_data.get('full_name', '')
            static_value = user_data.get('static', '')
            
            return {
                'name_value': name_value,
                'static_value': static_value,
                'name_placeholder': f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞: {name_value}" if name_value else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                'static_placeholder': f"–î–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞: {static_value}" if static_value else "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
                'has_data': bool(name_value or static_value),
                'source': 'cache'
            }
        else:
            return {
                'name_value': '',
                'static_value': '',
                'name_placeholder': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                'static_placeholder': "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
                'has_data': False,
                'source': 'none'
            }
            
    except Exception as e:
        print(f"‚ùå MODAL PREP ERROR: {e}")
        return {
            'name_value': '',
            'static_value': '',
            'name_placeholder': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)",
            'static_placeholder': "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
            'has_data': False,
            'source': 'error'
        }

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
async def get_cached_user_info(user_id: int, force_refresh: bool = False) -> Optional[Dict[str, Any]]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫—ç—à"""
    return await _global_cache.get_user_info(user_id, force_refresh)

async def bulk_preload_all_users() -> Dict[str, Any]:
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞)"""
    return await _global_cache.bulk_preload_all_users()

def get_cache_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return _global_cache.get_cache_stats()

def print_cache_status():
    """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    try:
        stats = _global_cache.get_cache_stats()
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–≠–®–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("=" * 50)
        print(f"üéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}")
        print(f"   ‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {stats.get('hits', 0)}")
        print(f"   ‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞: {stats.get('misses', 0)}")
        print(f"   ‚Ä¢ Hit Rate: {stats.get('hit_rate_percent', 0)}%")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {len(_global_cache._cache)}")
        print("=" * 50)
    except Exception as e:
        print(f"‚ùå ERROR in print_cache_status: {e}")
        import traceback
        traceback.print_exc()

async def force_refresh_user_cache(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await _global_cache.force_refresh_user(user_id)
