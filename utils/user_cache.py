"""
User Data Caching System

–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google Sheets API –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–æ–≤ Discord.

Features:
- –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ —Å TTL
- –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å fallback
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Any, Tuple, List
from utils.user_database import UserDatabase


class UserDataCache:
    """–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_id: user_data}
        self._cache: Dict[int, Dict[str, Any]] = {}
        
        # –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫—ç—à–∞: {user_id: expiry_datetime}
        self._expiry: Dict[int, datetime] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        self._stats = {
            'hits': 0,
            'misses': 0,
            'total_requests': 0,
            'cache_size': 0,
            'last_cleanup': datetime.now()
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç TTL
        self.MAX_CACHE_SIZE = 1000  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ
        self.CLEANUP_INTERVAL = 600  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    
    async def get_user_info(self, user_id: int, force_refresh: bool = False) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        self._stats['total_requests'] += 1
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not force_refresh and self._is_cached(user_id):
            self._stats['hits'] += 1
            print(f"üìã CACHE HIT: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            cached_data = self._cache[user_id]
            return cached_data.copy() if cached_data is not None else None
          # –ö—ç—à –ø—Ä–æ–ø—É—Å–∫ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self._stats['misses'] += 1
        print(f"üîÑ CACHE MISS: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –±–∞–∑—ã")
        
        try:            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π batch-–∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                from utils.sheets_optimization import get_user_fast_optimized
                user_data = await get_user_fast_optimized(user_id)
                print(f"üöÄ FAST OPTIMIZED: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id}")
            except ImportError:
                # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π UserDatabase
                user_data = await UserDatabase.get_user_info(user_id)
                print(f"üìã STANDARD: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id}")
            
            if user_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self._store_in_cache(user_id, user_data)
                print(f"‚úÖ CACHE STORE: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                return user_data.copy() if user_data is not None else None
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
                self._store_in_cache(user_id, None)
                print(f"‚ö†Ô∏è CACHE STORE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            print(f"‚ùå CACHE ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if user_id in self._cache:
                print(f"üîÑ CACHE FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
                return self._cache[user_id].copy()
            return None
    
    def _is_cached(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ"""
        if user_id not in self._cache:
            return False
        
        if user_id not in self._expiry:
            return False
        
        return datetime.now() < self._expiry[user_id]
    
    def _store_in_cache(self, user_id: int, user_data: Optional[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self._cache) >= self.MAX_CACHE_SIZE:
            self._cleanup_expired()
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            if len(self._cache) >= self.MAX_CACHE_SIZE:
                self._remove_oldest_entries(self.MAX_CACHE_SIZE // 4)  # –£–¥–∞–ª—è–µ–º 25%
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._cache[user_id] = user_data
        self._expiry[user_id] = datetime.now() + timedelta(seconds=self.CACHE_TTL)
        self._stats['cache_size'] = len(self._cache)
    
    def _cleanup_expired(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞"""
        now = datetime.now()
        expired_keys = [
            user_id for user_id, expiry_time in self._expiry.items()
            if expiry_time <= now
        ]
        
        for user_id in expired_keys:
            self._cache.pop(user_id, None)
            self._expiry.pop(user_id, None)
        
        if expired_keys:
            print(f"üßπ CACHE CLEANUP: –£–¥–∞–ª–µ–Ω–æ {len(expired_keys)} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        self._stats['cache_size'] = len(self._cache)
        self._stats['last_cleanup'] = now
    
    def _remove_oldest_entries(self, count: int):
        """–£–¥–∞–ª–∏—Ç—å —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏"""
        if not self._expiry:
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        sorted_entries = sorted(self._expiry.items(), key=lambda x: x[1])
        
        for i in range(min(count, len(sorted_entries))):
            user_id = sorted_entries[i][0]
            self._cache.pop(user_id, None)
            self._expiry.pop(user_id, None)
        
        print(f"üßπ CACHE EVICTION: –£–¥–∞–ª–µ–Ω–æ {min(count, len(sorted_entries))} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        self._stats['cache_size'] = len(self._cache)
    
    def invalidate_user(self, user_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        self._cache.pop(user_id, None)
        self._expiry.pop(user_id, None)
        self._stats['cache_size'] = len(self._cache)
        print(f"üóëÔ∏è CACHE INVALIDATE: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
    
    def clear_cache(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self._cache.clear()
        self._expiry.clear()
        self._stats['cache_size'] = 0
        print("üóëÔ∏è CACHE CLEAR: –ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        self._stats['cache_size'] = len(self._cache)
        
        # –í—ã—á–∏—Å–ª—è–µ–º hit rate
        total_requests = self._stats['total_requests']
        if total_requests > 0:
            hit_rate = (self._stats['hits'] / total_requests) * 100
        else:
            hit_rate = 0
        
        return {
            **self._stats,
            'hit_rate_percent': round(hit_rate, 2),
            'expired_entries': self._count_expired_entries(),
            'memory_usage_estimate': len(self._cache) * 500  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
        }
    
    def _count_expired_entries(self) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        now = datetime.now()
        return sum(1 for expiry_time in self._expiry.values() if expiry_time <= now)
    
    async def preload_users(self, user_ids: list) -> Dict[int, Optional[Dict[str, Any]]]:
        """
        –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
        Returns:
            Dict {user_id: user_data} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        """
        print(f"üîÑ CACHE PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        results = {}
        tasks = []
          # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        for user_id in user_ids:
            if not self._is_cached(user_id):  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
                tasks.append(self.get_user_info(user_id))
            else:
                results[user_id] = self._cache[user_id].copy()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏–ª–∏ batch-–∑–∞–ø—Ä–æ—Å–æ–º
        if tasks:
            try:
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                missing_user_ids = [uid for uid in user_ids if uid not in results]
                
                try:
                    from utils.sheets_optimization import get_users_batch_optimized
                    print(f"üöÄ BATCH PRELOAD: –ò—Å–ø–æ–ª—å–∑—É–µ–º batch-–∑–∞–ø—Ä–æ—Å –¥–ª—è {len(missing_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    batch_results = await get_users_batch_optimized(missing_user_ids)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    for user_id, user_data in batch_results.items():
                        self._store_in_cache(user_id, user_data)
                        results[user_id] = user_data.copy() if user_data else None
                        
                except ImportError:
                    print(f"üìã STANDARD PRELOAD: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
                    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    semaphore = asyncio.Semaphore(5)  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    
                    async def limited_get_user_info(user_id):
                        async with semaphore:
                            return await self.get_user_info(user_id)
                    
                    limited_tasks = [limited_get_user_info(uid) for uid in missing_user_ids]
                    task_results = await asyncio.gather(*limited_tasks, return_exceptions=True)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for i, result in enumerate(task_results):
                        user_id = missing_user_ids[i]
                        if isinstance(result, Exception):
                            print(f"‚ùå PRELOAD ERROR –¥–ª—è {user_id}: {result}")
                            results[user_id] = None
                        else:
                            results[user_id] = result
                        
            except Exception as e:
                print(f"‚ùå PRELOAD BATCH ERROR: {e}")
        
        print(f"‚úÖ CACHE PRELOAD –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return results
    
    async def background_cleanup_task(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞"""
        while True:
            try:
                await asyncio.sleep(self.CLEANUP_INTERVAL)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
                now = datetime.now()
                if (now - self._stats['last_cleanup']).total_seconds() >= self.CLEANUP_INTERVAL:
                    self._cleanup_expired()
                    
            except asyncio.CancelledError:
                print("üõë CACHE CLEANUP TASK: –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                break
            except Exception as e:
                print(f"‚ùå CACHE CLEANUP ERROR: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
user_cache = UserDataCache()


# =================== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–°–ï–• –ú–û–î–£–õ–ï–ô ===================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
_global_cache = UserDataCache()


async def get_cached_user_info(user_id: int, force_refresh: bool = False) -> Optional[Dict[str, Any]]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    return await _global_cache.get_user_info(user_id, force_refresh)


def get_cache_statistics() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
    
    Returns:
        Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫—ç—à–∞
    """
    return _global_cache.get_cache_stats()


def clear_user_cache() -> None:
    """
    –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
    """
    _global_cache.clear_cache()


def invalidate_user_cache(user_id: int) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    if user_id in _global_cache._cache:
        del _global_cache._cache[user_id]
        del _global_cache._expiry[user_id]
        _global_cache._stats['cache_size'] = len(_global_cache._cache)
        print(f"üóëÔ∏è CACHE INVALIDATE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞")


async def preload_user_data(user_ids: List[int]) -> Dict[int, Optional[Dict[str, Any]]]:
    """
    –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à
    
    Args:
        user_ids: –°–ø–∏—Å–æ–∫ Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    """
    results = {}
    for user_id in user_ids:
        user_data = await _global_cache.get_user_info(user_id)
        results[user_id] = user_data
    
    print(f"üì¶ CACHE PRELOAD: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return results


async def get_user_name_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ –Ω–∞–π–¥–µ–Ω"


async def get_user_static_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°—Ç–∞—Ç–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –Ω–∞–π–¥–µ–Ω"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('static', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ –Ω–∞–π–¥–µ–Ω"


async def get_user_department_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"


async def get_user_rank_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ó–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


async def get_user_position_fast(user_id: int) -> str:
    """
    –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    """
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


# =================== –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú ===================

# –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º warehouse
async def get_warehouse_user_data(user_id: int) -> Dict[str, str]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å warehouse_user_data –º–æ–¥—É–ª–µ–º"""
    user_data = await get_cached_user_info(user_id)
    if user_data:
        return {
            'name_value': user_data.get('full_name', ''),
            'static_value': user_data.get('static', ''),
            'source': 'universal_cache'
        }
    return {
        'name_value': '',
        'static_value': '',
        'source': 'not_found'
    }
