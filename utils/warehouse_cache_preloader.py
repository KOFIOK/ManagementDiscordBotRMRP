"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import asyncio
from datetime import datetime
from typing import List
from utils.user_cache import preload_user_data
from utils.config_manager import load_config


class WarehouseCachePreloader:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –¥–ª—è —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self, bot):
        self.bot = bot
        self.preload_task = None
        self.is_preloading = False
    
    async def start_preloading(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞"""
        if self.is_preloading:
            print("üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return
        
        self.is_preloading = True
        self.preload_task = asyncio.create_task(self._preload_active_users())
    
    async def _preload_active_users(self):
        """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            print("üöÄ CACHE PRELOADER: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞...")
            
            # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
            await asyncio.sleep(10)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏–π
            guilds = self.bot.guilds
            if not guilds:
                print("‚ö†Ô∏è CACHE PRELOADER: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –±–æ—Ç–æ–≤)
            active_users = []
            for guild in guilds:
                for member in guild.members:
                    if not member.bot and member.id not in active_users:
                        active_users.append(member.id)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            preload_count = min(50, len(active_users))  # –ú–∞–∫—Å–∏–º—É–º 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_to_preload = active_users[:preload_count]
            
            print(f"üì¶ CACHE PRELOADER: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {preload_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –±–∞—Ç—á–∞–º–∏ –ø–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            batch_size = 10
            successful_loads = 0
            
            for i in range(0, len(users_to_preload), batch_size):
                batch = users_to_preload[i:i + batch_size]
                
                try:
                    results = await preload_user_data(batch)
                    batch_success = sum(1 for result in results.values() if result is not None)
                    successful_loads += batch_success
                    
                    print(f"‚úÖ CACHE PRELOADER: –ë–∞—Ç—á {i//batch_size + 1}: {batch_success}/{len(batch)} —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    print(f"‚ùå CACHE PRELOADER: –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {i//batch_size + 1}: {e}")
                    continue
            
            print(f"‚úÖ CACHE PRELOADER: –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful_loads}/{preload_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ —á–∞—Å
            await asyncio.sleep(3600)  # 1 —á–∞—Å
            await self._periodic_cache_refresh()
            
        except Exception as e:
            print(f"‚ùå CACHE PRELOADER: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.is_preloading = False
    
    async def _periodic_cache_refresh(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞"""
        try:
            print("üîÑ CACHE PRELOADER: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
            from utils.user_cache import get_cache_statistics
            stats = get_cache_statistics()
            
            # –ï—Å–ª–∏ hit rate –Ω–∏–∑–∫–∏–π, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
            if stats['hit_rate_percent'] < 60:
                print(f"üìà CACHE PRELOADER: Hit Rate –Ω–∏–∑–∫–∏–π ({stats['hit_rate_percent']}%), –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É")
                
                # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –µ—â–µ 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                import random
                all_users = []
                for guild in self.bot.guilds:
                    for member in guild.members:
                        if not member.bot:
                            all_users.append(member.id)
                
                if all_users:
                    random_users = random.sample(all_users, min(20, len(all_users)))
                    await preload_user_data(random_users)
                    print(f"‚úÖ CACHE PRELOADER: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(random_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await asyncio.sleep(3600)  # –ï—â–µ —á–µ—Ä–µ–∑ —á–∞—Å
            if not self.is_preloading:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                self.preload_task = asyncio.create_task(self._periodic_cache_refresh())
                
        except Exception as e:
            print(f"‚ùå CACHE PRELOADER: –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def stop_preloading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É"""
        if self.preload_task and not self.preload_task.done():
            self.preload_task.cancel()
            print("üõë CACHE PRELOADER: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.is_preloading = False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫–∞
cache_preloader = None


def setup_cache_preloader(bot):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫ –∫—ç—à–∞"""
    global cache_preloader
    cache_preloader = WarehouseCachePreloader(bot)
    return cache_preloader


def start_cache_preloading(bot):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞"""
    global cache_preloader
    if not cache_preloader:
        cache_preloader = setup_cache_preloader(bot)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.create_task(cache_preloader.start_preloading())
    print("üöÄ CACHE PRELOADER: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞")


def stop_cache_preloading():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞"""
    global cache_preloader
    if cache_preloader:
        cache_preloader.stop_preloading()
