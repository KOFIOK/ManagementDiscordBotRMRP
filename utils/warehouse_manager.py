"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π —Å–∫–ª–∞–¥–∞
–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤–∞–ª–∏–¥–∞—Ü–∏—é –ª–∏–º–∏—Ç–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π/–∑–≤–∞–Ω–∏–π –∏ –ª–æ–≥–∏–∫—É –∫—É–ª–¥–∞—É–Ω–∞
"""

import discord
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, Tuple, Any
import re
from .config_manager import load_config
from .google_sheets import GoogleSheetsManager

class WarehouseManager:
    def __init__(self, sheets_manager: GoogleSheetsManager):
        self.sheets_manager = sheets_manager
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–∫–ª–∞–¥–∞
        self.item_categories = {
            "–û—Ä—É–∂–∏–µ": {
                "emoji": "üî´",
                "key": "–æ—Ä—É–∂–∏–µ",
                "items": [
                    "–ê–ö-74–ú", "–ö–æ–ª—å—Ç –ú16", "–ö–æ–ª—å—Ç 416 –ö–∞–Ω–∞–¥–∞", "–§–ù –°–ö–ê–†-–¢", 
                    "–®—Ç–µ–π—Ä –ê–£–ì-–ê3", "–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω—ã–π –±—ã–∫", "–°–ê–† –ú249", 
                    "–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω–Ω—ã–π –±—ã–∫ –ú–ö2", "–û–±—Ä–µ–∑", "–¢–∞–π–ø 97"
                ]
            },
            "–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã": {
                "emoji": "ü¶∫", 
                "key": "–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã",
                "items": [
                    "–°—Ä–µ–¥–Ω–∏–π –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç", "–¢—è–∂–µ–ª—ã–π –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç",
                ]
            },
            "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã": {
                "emoji": "üíä",
                "key": "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã", 
                "items": [
                    "–ê—Ä–º–µ–π—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞", "–û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ", "–î–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä", "–ê–ª–∫–æ—Ç–µ—Å—Ç–µ—Ä"
                ]
            },
            "–î—Ä—É–≥–æ–µ": {
                "emoji": "üì¶",
                "key": "–¥—Ä—É–≥–æ–µ",
                "items": [
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ü–∞—Ç—Ä–æ–Ω—ã", "–ë–æ–¥–∏–∫–∞–º–µ—Ä—ã", "–ö–æ–º–ø–ª–µ–∫—Ç –ë–æ–µ—Ü", "–ü—Ä–æ—á–µ–µ"
                ]
            }
        }        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–∏–¥—ã –æ—Ä—É–∂–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
        self.restricted_weapons = [
            "–ö–æ–ª—å—Ç –ú16", "–ö–æ–ª—å—Ç 416 –ö–∞–Ω–∞–¥–∞", "–§–ù –°–ö–ê–†-–¢", 
            "–®—Ç–µ–π—Ä –ê–£–ì-–ê3", "–¢–∞—É—Ä—É—Å –ë–µ—à–µ–Ω—ã–π –±—ã–∫"
        ]

    def get_warehouse_channels(self) -> Tuple[Optional[int], Optional[int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã —Å–∫–ª–∞–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = load_config()
        request_channel = config.get("warehouse_request_channel")
        audit_channel = config.get("warehouse_audit_channel")
        return request_channel, audit_channel
    
    def get_warehouse_submission_channel(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ —Å–∫–ª–∞–¥–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = load_config()
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∫ fallback
        submission_channel = config.get("warehouse_submission_channel")
        if submission_channel:
            return submission_channel
        
        fallback_channel = config.get("warehouse_request_channel")
        if fallback_channel:
            print("‚ö†Ô∏è warehouse_submission_channel –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è warehouse_request_channel –∫–∞–∫ fallback")
        
        return fallback_channel

    def get_cooldown_hours(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –≤ —á–∞—Å–∞—Ö"""
        config = load_config()
        return config.get("warehouse_cooldown_hours", 6)

    def get_limits_mode(self) -> Dict[str, bool]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –ª–∏–º–∏—Ç–æ–≤"""
        config = load_config()
        return config.get("warehouse_limits_mode", {
            "positions_enabled": True,
            "ranks_enabled": False
        })

    def get_position_limits(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º"""
        config = load_config()
        return config.get("warehouse_limits_positions", {})

    def get_rank_limits(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ –∑–≤–∞–Ω–∏—è–º"""
        config = load_config()
        return config.get("warehouse_limits_ranks", {})

    async def check_user_cooldown(self, user_id: int, channel: discord.TextChannel) -> Tuple[bool, Optional[datetime]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        –ö—É–ª–¥–∞—É–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ä–∞–∑—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (can_request, next_available_time_moscow)
        """
        cooldown_hours = self.get_cooldown_hours()
        moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
        print(f"üïê COOLDOWN CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ª–∏–º–∏—Ç: {cooldown_hours} —á–∞—Å–æ–≤")
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        found_message = False
        async for message in channel.history(limit=200):
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å embed'–∞–º–∏ –æ –∑–∞—è–≤–∫–∞—Ö —Å–∫–ª–∞–¥–∞
            if (message.embeds and 
                "–ó–∞–ø—Ä–æ—Å —Å–∫–ª–∞–¥–∞" in message.embeds[0].title and
                message.embeds[0].footer and
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}" in message.embeds[0].footer.text):
                found_message = True
                
                embed = message.embeds[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –ø–æ —Ü–≤–µ—Ç—É embed'–∞ –∏ –ø–æ–ª—è–º
                status = "pending"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
                
                if embed.color:
                    if embed.color.value == discord.Color.green().value:
                        status = "approved"  # –û–¥–æ–±—Ä–µ–Ω–∞
                    elif embed.color.value == discord.Color.red().value:
                        status = "rejected"  # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ–ª—è–º embed'–∞
                for field in embed.fields:
                    if field.name:
                        if "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" in field.name:
                            status = "approved"
                            break
                        elif "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ" in field.name:
                            status = "rejected"
                            break
                
                print(f"üìã COOLDOWN CHECK: –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
                
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –∫—É–ª–¥–∞—É–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
                if status == "rejected":
                    print(f"‚úÖ COOLDOWN CHECK: –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –º–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ä–∞–∑—É")
                    return True, None
                
                # –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∏ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                message_time_utc = message.created_at.replace(tzinfo=None)
                message_time_moscow = message_time_utc + timedelta(hours=3)  # UTC -> Moscow
                current_time_moscow = datetime.now(moscow_tz).replace(tzinfo=None)
                
                print(f"üìã COOLDOWN CHECK: –ó–∞—è–≤–∫–∞ –æ—Ç {message_time_moscow.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)")
                print(f"üìã COOLDOWN CHECK: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {current_time_moscow.strftime('%Y-%m-%d %H:%M:%S')} (–ú–°–ö)")
                
                time_since = current_time_moscow - message_time_moscow
                hours_passed = time_since.total_seconds() / 3600
                
                print(f"‚è∞ COOLDOWN CHECK: –ü—Ä–æ—à–ª–æ {hours_passed:.2f} —á–∞—Å–æ–≤ –∏–∑ {cooldown_hours}")
                
                if time_since < timedelta(hours=cooldown_hours):
                    next_time_moscow = message_time_moscow + timedelta(hours=cooldown_hours)
                    print(f"‚ùå COOLDOWN CHECK: –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å: {next_time_moscow.strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")
                    return False, next_time_moscow
                else:
                    print(f"‚úÖ COOLDOWN CHECK: –ö—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
                break
        
        if not found_message:
            print(f"‚úÖ COOLDOWN CHECK: –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å")
        
        return True, None

    async def get_user_info(self, user: discord.Member) -> Tuple[str, str, str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è, —Å—Ç–∞—Ç–∏–∫, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∑–≤–∞–Ω–∏–µ)
        –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ Google Sheets (–ª–∏—Å—Ç "–õ–∏—á–Ω—ã–π –°–æ—Å—Ç–∞–≤"), –ø–æ—Ç–æ–º –≤ —Ä–æ–ª—è—Ö Discord
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UserDatabase –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Google Sheets
            from utils.user_cache import get_cached_user_info
            user_data = await get_cached_user_info(user.id)
            
            if user_data:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ UserDatabase: first_name, last_name, static, rank, department, position, discord_id
                full_name = user_data.get('full_name', '')
                static = user_data.get('static', '')
                rank = user_data.get('rank', '').strip()
                department = user_data.get('department', '')
                position = user_data.get('position', '')
                
                # –ï—Å–ª–∏ –∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ä–æ–ª–µ–π Discord
                if not rank:
                    rank = self._extract_rank_from_roles(user)
                    print(f"üîÑ –ó–≤–∞–Ω–∏–µ –∏–∑ —Ä–æ–ª–µ–π Discord –¥–ª—è {user.display_name}: '{rank}'")
                
                print(f"‚úÖ USER ROLE DATA: {user.id} -> –¥–æ–ª–∂–Ω–æ—Å—Ç—å='{position}', –∑–≤–∞–Ω–∏–µ='{rank}'")
                
                if full_name and static:
                    print(f"‚úÖ UserDatabase: –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.display_name}: {full_name} | {static} | {position} | {rank}")
                    return full_name, static, position, rank
                else:
                    print(f"‚ö†Ô∏è UserDatabase: –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–ª—è {user.display_name}: –∏–º—è='{full_name}', —Å—Ç–∞—Ç–∏–∫='{static}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ UserDatabase: {e}")
            import traceback
            traceback.print_exc()

        # Fallback: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ —Ä–æ–ª–µ–π Discord
        print(f"üìã –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ UserDatabase –¥–ª—è {user.display_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª–∏ Discord")
        name = self._extract_name_from_nickname(user)
        static = self._extract_static_from_nickname(user)
        position = self._extract_position_from_roles(user)
        rank = self._extract_rank_from_roles(user)
        
        print(f"üìã Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user.display_name}: –∏–º—è='{name}', —Å—Ç–∞—Ç–∏–∫='{static}', –¥–æ–ª–∂–Ω–æ—Å—Ç—å='{position}', –∑–≤–∞–Ω–∏–µ='{rank}'")
        return name, static, position, rank

    def _extract_name_from_nickname(self, user: discord.Member) -> str:
        """–ò–∑–≤–ª–µ—á—å –∏–º—è –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞ Discord"""
        display_name = user.display_name
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏
        patterns = [
            r'^\[.*?\]\s*(.+)',  # [–î–æ–ª–∂–Ω–æ—Å—Ç—å] –ò–º—è –§–∞–º–∏–ª–∏—è
            r'^!!\[.*?\]\s*(.+)',  # !![–ó–≤–∞–Ω–∏–µ] –ò–º—è –§–∞–º–∏–ª–∏—è  
            r'^.*?\|\s*(.+)',  # –°—Ç–∞—Ç–∏–∫ | –ò–º—è –§–∞–º–∏–ª–∏—è
            r'^(.+)'  # –ü—Ä–æ—Å—Ç–æ –∏–º—è
        ]
        
        for pattern in patterns:
            match = re.search(pattern, display_name.strip())
            if match:
                return match.group(1).strip()
        
        return user.display_name

    def _extract_static_from_nickname(self, user: discord.Member) -> str:
        """–ò–∑–≤–ª–µ—á—å —Å—Ç–∞—Ç–∏–∫ –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞ Discord"""
        display_name = user.display_name
        
        # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXX-XXX –∏–ª–∏ XXXXXX
        static_pattern = r'(\d{2,3}[-\s]?\d{3})'
        match = re.search(static_pattern, display_name)
        if match:
            static = match.group(1).replace(' ', '-').replace('--', '-')
            return static
        
        return ""

    def _extract_position_from_roles(self, user: discord.Member) -> str:
        """–ò–∑–≤–ª–µ—á—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Ä–æ–ª–µ–π Discord"""
        position_keywords = [
            "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫ –°–°–û", "–°—Ç–∞—Ä—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ö—Ä–∞–Ω—ã", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ö—Ä–∞–Ω—ã", 
            "–ú–ª–∞–¥—à–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ö—Ä–∞–Ω—ã", "–í–æ–µ–Ω–Ω—ã–π –≤—Ä–∞—á", "–ü–æ–º–æ—â–Ω–∏–∫ –≤—Ä–∞—á–∞",
            "–°—Ç–∞—Ä—à–∏–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –í–ü", "–î–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –í–ü", "–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –í–ü",
            "–°—Ç–∞—Ä—à–∏–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"
        ]
        
        for role in user.roles:
            for keyword in position_keywords:
                if keyword.lower() in role.name.lower():
                    return keyword
        
        return ""

    def _extract_rank_from_roles(self, user: discord.Member) -> str:
        """–ò–∑–≤–ª–µ—á—å –∑–≤–∞–Ω–∏–µ –∏–∑ —Ä–æ–ª–µ–π Discord"""
        rank_keywords = [
            "–†—è–¥–æ–≤–æ–π", "–ï—Ñ—Ä–µ–π—Ç–æ—Ä", "–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç", "–°–µ—Ä–∂–∞–Ω—Ç", "–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç",
            "–°—Ç–∞—Ä—à–∏–Ω–∞", "–ü—Ä–∞–ø–æ—Ä—â–∏–∫", "–°—Ç–∞—Ä—à–∏–π –ø—Ä–∞–ø–æ—Ä—â–∏–∫", "–ú–ª–∞–¥—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç",
            "–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–°—Ç–∞—Ä—à–∏–π –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç", "–ö–∞–ø–∏—Ç–∞–Ω", "–ú–∞–π–æ—Ä", "–ü–æ–¥–ø–æ–ª–∫–æ–≤–Ω–∏–∫", "–ü–æ–ª–∫–æ–≤–Ω–∏–∫"
        ]
        
        for role in user.roles:
            for keyword in rank_keywords:
                if keyword.lower() in role.name.lower():
                    return keyword
        
        return ""

    def get_user_limits(self, position: str, rank: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∑–≤–∞–Ω–∏—è
        """
        limits_mode = self.get_limits_mode()
        
        # –ï—Å–ª–∏ –≤—Å–µ –ª–∏–º–∏—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if not limits_mode.get("positions_enabled", True) and not limits_mode.get("ranks_enabled", False):
            return {
                "–æ—Ä—É–∂–∏–µ": 999,
                "–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã": 999,
                "–∞–ø—Ç–µ—á–∫–∏": 999,
                "–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ": 999,
                "–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã": 999,
                "weapon_restrictions": []
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if limits_mode.get("positions_enabled", True) and position:
            position_limits = self.get_position_limits()
            if position in position_limits:
                return position_limits[position]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ –∑–≤–∞–Ω–∏—é (fallback)
        if limits_mode.get("ranks_enabled", False) and rank:
            rank_limits = self.get_rank_limits()
            if rank in rank_limits:
                return rank_limits[rank]
        
        # –ë–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "–æ—Ä—É–∂–∏–µ": 3,
            "–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã": 10,
            "–∞–ø—Ç–µ—á–∫–∏": 20,
            "–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ": 8,
            "–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã": 4,
            "weapon_restrictions": []
        }

    def validate_item_request(self, category_key: str, item_name: str, quantity: int, 
                            position: str, rank: str) -> Tuple[bool, int, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–º–µ—Ç–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, corrected_quantity, message)
        """
        user_limits = self.get_user_limits(position, rank)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if category_key == "–æ—Ä—É–∂–∏–µ":
            max_weapons = user_limits.get("–æ—Ä—É–∂–∏–µ", 3)
            weapon_restrictions = user_limits.get("weapon_restrictions", [])
              # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —Ç–∏–ø –æ—Ä—É–∂–∏—è
            if weapon_restrictions and item_name not in weapon_restrictions:
                return False, 0, f"‚ùå –í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ä—É–∂–∏—è. –î–æ—Å—Ç—É–ø–Ω–æ: {', '.join(weapon_restrictions)}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if quantity > max_weapons:
                return True, max_weapons, f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: {max_weapons}"
            
        elif category_key == "–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã":
            max_armor = user_limits.get("–±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç—ã", 10)
            if quantity > max_armor:
                return True, max_armor, f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: {max_armor}"
                
        elif category_key == "–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ã":
            if item_name == "–ê—Ä–º–µ–π—Å–∫–∞—è –∞–ø—Ç–µ—á–∫–∞":
                max_medkits = user_limits.get("–∞–ø—Ç–µ—á–∫–∏", 20)
                if quantity > max_medkits:
                    return True, max_medkits, f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: {max_medkits}"
            elif item_name == "–û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ":
                max_painkillers = user_limits.get("–æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ", 8)
                if quantity > max_painkillers:
                    return True, max_painkillers, f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: {max_painkillers}"
            elif item_name == "–î–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä":
                max_defibs = user_limits.get("–¥–µ—Ñ–∏–±—Ä–∏–ª–ª—è—Ç–æ—Ä—ã", 4)
                if quantity > max_defibs:
                    return True, max_defibs, f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: {max_defibs}"
                
        elif category_key == "–¥—Ä—É–≥–æ–µ":
            if item_name == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
                # –õ–∏–º–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - 1000
                if quantity > 1000:
                    return True, 1000, "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ: 1000"
        
        return True, quantity, "‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"

    def get_ping_roles_for_warehouse_request(self, user: discord.Member, department: str) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞ –≤ warehouse request –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        from utils.config_manager import load_config
        
        config = load_config()
        ping_settings = config.get('ping_settings', {})
        
        ping_roles = []
        user_role_ids = [role.id for role in user.roles]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∏–Ω–≥–æ–≤
        for dept_role_id_str, ping_role_ids in ping_settings.items():
            dept_role_id = int(dept_role_id_str)
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∏–Ω–≥-—Ä–æ–ª–∏
            if dept_role_id in user_role_ids:
                for ping_role_id in ping_role_ids:
                    ping_role = user.guild.get_role(ping_role_id)
                    if ping_role and ping_role not in ping_roles:
                        ping_roles.append(ping_role)
                break  # –ù–∞—à–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
        
        return ping_roles
    
    def format_warehouse_request_embed(self, user: discord.Member, name: str, static: str,
                                     category: str, item_name: str, quantity: int,
                                     position: str, rank: str, department: str) -> discord.Embed:
        """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–ª–∞–¥–∞"""
        embed = discord.Embed(
            title="üì¶ –ó–∞–ø—Ä–æ—Å —Å–∫–ª–∞–¥–∞",
            description=f"## {user.mention}",
            color=discord.Color.orange(),
            timestamp=datetime.now()
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Å—Ç–∞—Ç–∏–∫
        embed.add_field(
            name="ÔøΩ –ò–º—è | –°—Ç–∞—Ç–∏–∫", 
            value=f"{name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} | {static or '–ù–µ —É–∫–∞–∑–∞–Ω'}", 
            inline=False
        )
        
        # –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∑–≤–∞–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        embed.add_field(name="ÔøΩ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", value=department or "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", inline=True)
        embed.add_field(name="ÔøΩ –î–æ–ª–∂–Ω–æ—Å—Ç—å", value=position or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=True)
        embed.add_field(name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=rank or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", inline=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        embed.add_field(name="\u200b", value="\u200b", inline=False)
            
        embed.add_field(name="üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", value=category, inline=True)
        embed.add_field(name="üìã –ü—Ä–µ–¥–º–µ—Ç", value=item_name, inline=True)
        embed.add_field(name="üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", value=str(quantity), inline=True)
        
        embed.set_footer(text=f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
        
        return embed

    def format_warehouse_audit_embed(self, user: discord.Member, moderator: discord.Member,
                                   name: str, static: str, category: str, item_name: str,
                                   quantity: int, position: str, rank: str) -> discord.Embed:
        """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞"""
        embed = discord.Embed(
            title="üìä –ê—É–¥–∏—Ç —Å–∫–ª–∞–¥–∞ - –í—ã–¥–∞—á–∞",
            color=discord.Color.green(),
            timestamp=datetime.now()
        )
        
        embed.add_field(name="üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=f"{user.mention}\n({name})", inline=True)
        embed.add_field(name="üÜî –°—Ç–∞—Ç–∏–∫", value=static or "–ù–µ —É–∫–∞–∑–∞–Ω", inline=True)
        embed.add_field(name="üëÆ –í—ã–¥–∞–ª", value=moderator.mention, inline=True)
        
        if position:
            embed.add_field(name="üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å", value=position, inline=True)
        if rank:
            embed.add_field(name="üéñÔ∏è –ó–≤–∞–Ω–∏–µ", value=rank, inline=True)
            
        embed.add_field(name="üì¶ –í—ã–¥–∞–Ω–æ", value=f"{item_name} - {quantity} —à—Ç.", inline=False)
        
        embed.set_footer(text="–°–∏—Å—Ç–µ–º–∞ –∞—É–¥–∏—Ç–∞ —Å–∫–ª–∞–¥–∞ –í–° –†–§")
        
        return embed
