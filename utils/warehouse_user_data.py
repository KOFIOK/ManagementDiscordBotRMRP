"""
Warehouse User Data Optimization

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–≤ —Å–∏—Å—Ç–µ–º–µ —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Ç–∞–π–º–∞—É—Ç–æ–≤ Discord –ø—Ä–∏
–¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω.

Features:
- –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ Discord interactions
- –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–ª–∞–¥—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
from datetime import datetime
from typing import Optional, Dict, Any, Tuple
from utils.user_cache import get_cached_user_info, preload_user_data
from utils.user_database import UserDatabase


class WarehouseUserDataManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–∫–ª–∞–¥–∞"""
    
    def __init__(self):
        self.preload_cache = {}  # –ö—ç—à –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Å—Å–∏–π
        
    async def get_user_data_fast(self, user_id: int) -> Tuple[Optional[Dict[str, Any]], bool]:
        """
        –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[user_data, is_from_cache] - –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–ª–∞–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –∫—ç—à–∞
            user_data = await get_cached_user_info(user_id)
            
            if user_data is not None:
                return user_data, True
            
            # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å
            print(f"‚ö° FAST REQUEST: –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id}")
            user_data = await UserDatabase.get_user_info(user_id)
            
            return user_data, False
            
        except Exception as e:
            print(f"‚ùå FAST REQUEST ERROR: {e}")
            return None, False
    
    async def prepare_user_data_for_modal(self, user_id: int) -> Dict[str, str]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (name, static, placeholders)
        """
        try:
            user_data, from_cache = await self.get_user_data_fast(user_id)
            
            if user_data:
                name_value = user_data.get('full_name', '')
                static_value = user_data.get('static', '')
                
                # –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ placeholder
                source = "–∫—ç—à" if from_cache else "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
                
                return {
                    'name_value': name_value,
                    'static_value': static_value,
                    'name_placeholder': f"–î–∞–Ω–Ω—ã–µ –∏–∑ {source}: {name_value}" if name_value else "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                    'static_placeholder': f"–î–∞–Ω–Ω—ã–µ –∏–∑ {source}: {static_value}" if static_value else "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
                    'has_data': bool(name_value or static_value),
                    'source': source
                }
            else:
                return {
                    'name_value': '',
                    'static_value': '',
                    'name_placeholder': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
                    'static_placeholder': "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
                    'has_data': False,
                    'source': 'none'
                }
                
        except Exception as e:
            print(f"‚ùå MODAL PREP ERROR: {e}")
            return {
                'name_value': '',
                'static_value': '',
                'name_placeholder': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)",
                'static_placeholder': "–ù–∞–ø—Ä–∏–º–µ—Ä: 123-456",
                'has_data': False,
                'source': 'error'
            }
    
    async def get_user_position_and_rank(self, user_id: int) -> Tuple[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∑–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[position, rank]
        """
        try:
            user_data, _ = await self.get_user_data_fast(user_id)
            
            if user_data:
                position = user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                rank = user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                
                print(f"‚úÖ USER ROLE DATA: {user_id} -> –¥–æ–ª–∂–Ω–æ—Å—Ç—å='{position}', –∑–≤–∞–Ω–∏–µ='{rank}'")
                return position, rank
            else:
                print(f"‚ö†Ô∏è USER ROLE FALLBACK: –î–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                
        except Exception as e:
            print(f"‚ùå USER ROLE ERROR: {e}")
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    async def get_user_department(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        """
        try:
            user_data, _ = await self.get_user_data_fast(user_id)
            
            if user_data:
                department = user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
                print(f"‚úÖ USER DEPT DATA: {user_id} -> –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ='{department}'")
                return department
            else:
                print(f"‚ö†Ô∏è USER DEPT FALLBACK: –î–∞–Ω–Ω—ã–µ –¥–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
                
        except Exception as e:
            print(f"‚ùå USER DEPT ERROR: {e}")
            return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    
    async def get_complete_user_info(self, user_id: int) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            user_data, from_cache = await self.get_user_data_fast(user_id)
            
            if user_data:
                return {
                    'full_name': user_data.get('full_name', ''),
                    'static': user_data.get('static', ''),
                    'position': user_data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'rank': user_data.get('rank', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    'department': user_data.get('department', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'),
                    'source': 'cache' if from_cache else 'database',
                    'found': True
                }
            else:
                return {
                    'full_name': '',
                    'static': '',
                    'position': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'rank': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                    'department': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                    'source': 'none',
                    'found': False
                }
                
        except Exception as e:
            print(f"‚ùå COMPLETE USER INFO ERROR: {e}")
            return {
                'full_name': '',
                'static': '',
                'position': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                'rank': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                'department': '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
                'source': 'error',
                'found': False
            }
    
    def store_session_data(self, user_id: int, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        self.preload_cache[user_id] = {
            'data': data,
            'timestamp': datetime.now()
        }
        print(f"üíæ SESSION STORE: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {user_id}")
    
    def get_session_data(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        session_data = self.preload_cache.get(user_id)
        if session_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (5 –º–∏–Ω—É—Ç)
            age = (datetime.now() - session_data['timestamp']).total_seconds()
            if age < 300:  # 5 –º–∏–Ω—É—Ç
                print(f"üìã SESSION HIT: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {user_id}")
                return session_data['data']
            else:
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                del self.preload_cache[user_id]
                print(f"üóëÔ∏è SESSION EXPIRED: –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è {user_id}")
        
        return None
    
    def clear_session_data(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.preload_cache:
            del self.preload_cache[user_id]
            print(f"üóëÔ∏è SESSION CLEAR: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {user_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
warehouse_user_manager = WarehouseUserDataManager()


async def get_warehouse_user_data(user_id: int) -> Dict[str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∫–ª–∞–¥—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return await warehouse_user_manager.get_complete_user_info(user_id)


async def prepare_modal_data(user_id: int) -> Dict[str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    return await warehouse_user_manager.prepare_user_data_for_modal(user_id)


async def get_user_role_data(user_id: int) -> Tuple[str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –∑–≤–∞–Ω–∏—è
    
    Args:
        user_id: Discord ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Tuple[position, rank]
    """
    return await warehouse_user_manager.get_user_position_and_rank(user_id)
